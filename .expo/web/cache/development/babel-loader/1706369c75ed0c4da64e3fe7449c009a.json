{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from \"./packing_util\";\nimport { getCoordsDataType } from \"./shader_compiler\";\nexport var ArgMinMaxPackedProgram = _createClass(function ArgMinMaxPackedProgram(shape, windowSize, op, firstPass) {\n  _classCallCheck(this, ArgMinMaxPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  util.assert(shape.length > 2, function () {\n    return \"Packed arg\" + (op.charAt(0).toUpperCase() + op.slice(1)) + \" supports only inputs with rank above 2.\";\n  });\n  var inSize = shape[shape.length - 1];\n  var outSize = Math.ceil(inSize / windowSize);\n  this.outputShape = shape.slice(0, -1);\n\n  if (outSize > 1) {\n    this.outputShape.push(outSize);\n  }\n\n  if (!firstPass) {\n    this.variableNames.push('bestIndicesA');\n  }\n\n  var outShape = this.outputShape;\n  var rank = outShape.length;\n  var dtype = getCoordsDataType(rank);\n  var coords = getChannels('coords', rank);\n  var sourceLocSetup;\n  var sourceRank;\n\n  if (outSize === 1) {\n    sourceRank = rank + 1;\n    var sourceLocDType = getCoordsDataType(sourceRank);\n    sourceLocSetup = \"\\n        \" + sourceLocDType + \" sourceLocR = \" + sourceLocDType + \"(\" + coords.join() + \", 0);\\n        ++\" + coords[rank - 1] + \";\\n        \" + sourceLocDType + \" sourceLocG = \" + sourceLocDType + \"(\" + coords.join() + \", 0);\\n        ++\" + coords[rank - 2] + \";\\n        \" + sourceLocDType + \" sourceLocA = \" + sourceLocDType + \"(\" + coords.join() + \", 0);\\n        --\" + coords[rank - 1] + \";\\n        \" + sourceLocDType + \" sourceLocB = \" + sourceLocDType + \"(\" + coords.join() + \", 0);\\n        --\" + coords[rank - 2] + \";\";\n  } else {\n    sourceRank = rank;\n    sourceLocSetup = \"\\n        \" + dtype + \" sourceLocR = coords;\\n        ++\" + coords[rank - 1] + \";\\n        \" + dtype + \" sourceLocG = coords;\\n        ++\" + coords[rank - 2] + \";\\n        \" + dtype + \" sourceLocA = coords;\\n        --\" + coords[rank - 1] + \";\\n        \" + dtype + \" sourceLocB = coords;\\n        --\" + coords[rank - 2] + \";\";\n  }\n\n  var channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n  var inChannel = '.' + channels[sourceRank - 1];\n  var intChannels = channels.map(function (x) {\n    return 'int ' + x;\n  });\n  var srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n  var srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n  var srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n  var srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n  var compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n  var fetchCandidateIdx = firstPass ? '' : \"\\n          inIdx = round(vec4(getBestIndicesAChannel(\" + srcRCoords.join() + \"),\\n                             getBestIndicesAChannel(\" + srcGCoords.join() + \"),\\n                             getBestIndicesAChannel(\" + srcBCoords.join() + \"),\\n                             getBestIndicesAChannel(\" + srcACoords.join() + \")));\";\n  var fetchValue = \"vec4(\\n            getAChannel(\" + srcRCoords.join() + \"),\\n            hasNextCol ? getAChannel(\" + srcGCoords.join() + \") : 0.,\\n            hasNextRow ? getAChannel(\" + srcBCoords.join() + \") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\" + srcACoords.join() + \") : 0.)\";\n  var getBestIndicesAChannelSnippet = firstPass ? '' : \"\\n      float getBestIndicesAChannel(\" + intChannels.join() + \") {\\n        return getChannel(getBestIndicesA(\" + channels.join() + \"),\\n                                          vec2(\" + channels.slice(-2).join() + \"));\\n      }\";\n  this.userCode = \"\\n      float getAChannel(\" + intChannels.join() + \") {\\n        return getChannel(getA(\" + channels.join() + \"),\\n                               vec2(\" + channels.slice(-2).join() + \"));\\n      }\\n      \" + getBestIndicesAChannelSnippet + \"\\n      void main() {\\n        \" + dtype + \" coords = getOutputCoords();\\n        bool hasNextCol = \" + coords[rank - 1] + \" < \" + (outShape[rank - 1] - 1) + \";\\n        bool hasNextRow = \" + coords[rank - 2] + \" < \" + (outShape[rank - 2] - 1) + \";\\n        \" + sourceLocSetup + \"\\n        ivec4 srcIdx = ivec4(sourceLocR\" + inChannel + \", sourceLocG\" + inChannel + \",\\n          sourceLocB\" + inChannel + \", sourceLocA\" + inChannel + \") * \" + windowSize + \";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \" + fetchValue + \";\\n\\n        for (int i = 0; i < \" + windowSize + \"; i++) {\\n          inIdx = srcIdx;\\n          \" + fetchCandidateIdx + \"\\n          vec4 candidate = \" + fetchValue + \";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\" + compOp + \"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/argminmax_packed_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}