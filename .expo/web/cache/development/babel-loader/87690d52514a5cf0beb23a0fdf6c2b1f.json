{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { dispose as _dispose, tidy } from \"../globals\";\nimport { abs } from \"../ops/abs\";\nimport { add } from \"../ops/add\";\nimport { div } from \"../ops/div\";\nimport { maximum } from \"../ops/maximum\";\nimport { mul } from \"../ops/mul\";\nimport { scalar } from \"../ops/scalar\";\nimport { sub } from \"../ops/sub\";\nimport { zerosLike } from \"../ops/zeros_like\";\nimport { registerClass } from \"../serialization\";\nimport { Optimizer } from \"./optimizer\";\nexport var AdamaxOptimizer = function (_Optimizer) {\n  _inherits(AdamaxOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdamaxOptimizer);\n\n  function AdamaxOptimizer(learningRate, beta1, beta2) {\n    var _this;\n\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var decay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.0;\n\n    _classCallCheck(this, AdamaxOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.beta1 = beta1;\n    _this.beta2 = beta2;\n    _this.epsilon = epsilon;\n    _this.decay = decay;\n    _this.accumulatedFirstMoment = [];\n    _this.accumulatedWeightedInfNorm = [];\n    tidy(function () {\n      _this.iteration = scalar(0).variable();\n      _this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    return _this;\n  }\n\n  _createClass(AdamaxOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      tidy(function () {\n        var oneMinusAccBeta1 = sub(1, _this2.accBeta1);\n        var lr = div(-_this2.learningRate, add(mul(_this2.iteration, _this2.decay), 1));\n        variableNames.forEach(function (name, i) {\n          var value = ENGINE.registeredVariables[name];\n          var trainable = false;\n\n          if (_this2.accumulatedFirstMoment[i] == null) {\n            _this2.accumulatedFirstMoment[i] = {\n              originalName: name + \"/m\",\n              variable: zerosLike(value).variable(trainable)\n            };\n          }\n\n          if (_this2.accumulatedWeightedInfNorm[i] == null) {\n            _this2.accumulatedWeightedInfNorm[i] = {\n              originalName: name + \"/v\",\n              variable: zerosLike(value).variable(trainable)\n            };\n          }\n\n          var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n          if (gradient == null) {\n            return;\n          }\n\n          var firstMoment = _this2.accumulatedFirstMoment[i].variable;\n          var weightedInfNorm = _this2.accumulatedWeightedInfNorm[i].variable;\n          var newFirstMoment = add(mul(firstMoment, _this2.beta1), mul(gradient, 1 - _this2.beta1));\n          var ut0 = mul(weightedInfNorm, _this2.beta2);\n          var ut1 = abs(gradient);\n          var newWeightedInfNorm = maximum(ut0, ut1);\n          firstMoment.assign(newFirstMoment);\n          weightedInfNorm.assign(newWeightedInfNorm);\n          var newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, _this2.epsilon))), value);\n          value.assign(newValue);\n        });\n\n        _this2.iteration.assign(add(_this2.iteration, 1));\n\n        _this2.accBeta1.assign(mul(_this2.accBeta1, _this2.beta1));\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.accBeta1.dispose();\n      this.iteration.dispose();\n\n      if (this.accumulatedFirstMoment != null) {\n        _dispose(this.accumulatedFirstMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedWeightedInfNorm != null) {\n        _dispose(this.accumulatedWeightedInfNorm.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function getWeights() {\n      return _regeneratorRuntime.async(function getWeights$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error('getWeights() is not implemented for Adamax yet.');\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"setWeights\",\n    value: function setWeights(weightValues) {\n      return _regeneratorRuntime.async(function setWeights$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new Error('setWeights() is not implemented for Adamax yet.');\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'beta1': this.beta1,\n        'beta2': this.beta2,\n        'epsilon': this.epsilon,\n        'decay': this.decay\n      };\n    }\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n  }]);\n\n  return AdamaxOptimizer;\n}(Optimizer);\nAdamaxOptimizer.className = 'Adamax';\nregisterClass(AdamaxOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adamax_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.decay = decay;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedWeightedInfNorm = [];\n        tidy(() => {\n            this.iteration = scalar(0).variable();\n            this.accBeta1 = scalar(beta1).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const lr = div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n            variableNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                if (this.accumulatedWeightedInfNorm[i] == null) {\n                    this.accumulatedWeightedInfNorm[i] = {\n                        originalName: `${name}/v`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const ut0 = mul(weightedInfNorm, this.beta2);\n                const ut1 = abs(gradient);\n                const newWeightedInfNorm = maximum(ut0, ut1);\n                firstMoment.assign(newFirstMoment);\n                weightedInfNorm.assign(newWeightedInfNorm);\n                const newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))), value);\n                value.assign(newValue);\n            });\n            this.iteration.assign(add(this.iteration, 1));\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.iteration.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        throw new Error('getWeights() is not implemented for Adamax yet.');\n    }\n    async setWeights(weightValues) {\n        throw new Error('setWeights() is not implemented for Adamax yet.');\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n            'decay': this.decay\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n}\n/** @nocollapse */\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\nregisterClass(AdamaxOptimizer);\n//# sourceMappingURL=adamax_optimizer.js.map"]},"metadata":{},"sourceType":"module"}