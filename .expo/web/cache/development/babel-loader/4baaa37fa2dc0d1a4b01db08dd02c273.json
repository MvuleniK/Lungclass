{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from \"./environment\";\nimport { getGlobal } from \"./global_util\";\nvar kernelRegistry = getGlobal('kernelRegistry', function () {\n  return new Map();\n});\nvar gradRegistry = getGlobal('gradRegistry', function () {\n  return new Map();\n});\nexport function getKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  var it = kernelRegistry.entries();\n  var result = [];\n\n  while (true) {\n    var _it$next = it.next(),\n        done = _it$next.done,\n        value = _it$next.value;\n\n    if (done) {\n      break;\n    }\n\n    var _value = _slicedToArray(value, 2),\n        key = _value[0],\n        config = _value[1];\n\n    var _key$split = key.split('_'),\n        _key$split2 = _slicedToArray(_key$split, 1),\n        backend = _key$split2[0];\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\nexport function registerKernel(config) {\n  var kernelName = config.kernelName,\n      backendName = config.backendName;\n  var key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    console.warn(\"The kernel '\" + kernelName + \"' for backend \" + (\"'\" + backendName + \"' is already registered\"));\n  }\n\n  kernelRegistry.set(key, config);\n}\nexport function registerGradient(config) {\n  var kernelName = config.kernelName;\n\n  if (gradRegistry.has(kernelName)) {\n    if (env().getBool('DEBUG')) {\n      console.warn(\"Overriding the gradient for '\" + kernelName + \"'\");\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\nexport function unregisterKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\" + kernelName + \"' for backend \" + (\"'\" + backendName + \"' is not registered\"));\n  }\n\n  kernelRegistry.delete(key);\n}\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\"The gradient '\" + kernelName + \"' for backend is not registered\");\n  }\n\n  gradRegistry.delete(kernelName);\n}\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  var kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(function (kernelConfig) {\n    var newKernelConfig = _extends({}, kernelConfig, {\n      backendName: newBackendName\n    });\n\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return backendName + \"_\" + kernelName;\n}","map":{"version":3,"sources":["../src/kernel_registry.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR;AAEA,SAAQ,SAAR;AAKA,IAAM,cAAc,GAChB,SAAS,CAAC,gBAAD,EAAmB;EAAA,OAAM,IAAI,GAAJ,EAAN;AAAA,CAAnB,CADb;AAEA,IAAM,YAAY,GACd,SAAS,CAAC,cAAD,EAAiB;EAAA,OAAM,IAAI,GAAJ,EAAN;AAAA,CAAjB,CADb;AAqEA,OAAM,SAAU,SAAV,CACF,UADE,EACkB,WADlB,EACqC;EACzC,IAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;EACA,OAAO,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAP;AACD;AAMD,OAAM,SAAU,WAAV,CAAsB,UAAtB,EAAwC;EAC5C,OAAO,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,WAA/B,EAAkD;EACtD,IAAM,EAAE,GAAG,cAAc,CAAC,OAAf,EAAX;EACA,IAAM,MAAM,GAAmB,EAA/B;;EAEA,OAAO,IAAP,EAAa;IACX,eAAsB,EAAE,CAAC,IAAH,EAAtB;IAAA,IAAO,IAAP,YAAO,IAAP;IAAA,IAAa,KAAb,YAAa,KAAb;;IACA,IAAI,IAAJ,EAAU;MACR;IACD;;IACD,4BAAsB,KAAtB;IAAA,IAAO,GAAP;IAAA,IAAY,MAAZ;;IACA,iBAAoB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAApB;IAAA;IAAA,IAAO,OAAP;;IACA,IAAI,OAAO,KAAK,WAAhB,EAA6B;MAC3B,MAAM,CAAC,IAAP,CAAY,MAAZ;IACD;EACF;;EACD,OAAO,MAAP;AACD;AAaD,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAA6C;EACjD,IAAO,UAAP,GAAkC,MAAlC,CAAO,UAAP;EAAA,IAAmB,WAAnB,GAAkC,MAAlC,CAAmB,WAAnB;EACA,IAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;EACA,IAAI,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAJ,EAA6B;IAC3B,OAAO,CAAC,IAAR,CACI,iBAAe,UAAf,6BACI,WADJ,6BADJ;EAGD;;EACD,cAAc,CAAC,GAAf,CAAmB,GAAnB,EAAwB,MAAxB;AACD;AAUD,OAAM,SAAU,gBAAV,CAA2B,MAA3B,EAA6C;EACjD,IAAO,UAAP,GAAqB,MAArB,CAAO,UAAP;;EAEA,IAAI,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAJ,EAAkC;IAGhC,IAAI,GAAG,GAAG,OAAN,CAAc,OAAd,CAAJ,EAA4B;MAC1B,OAAO,CAAC,IAAR,mCAA6C,UAA7C;IACD;EACF;;EACD,YAAY,CAAC,GAAb,CAAiB,UAAjB,EAA6B,MAA7B;AACD;AASD,OAAM,SAAU,gBAAV,CACF,UADE,EACkB,WADlB,EACqC;EACzC,IAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;EACA,IAAI,CAAC,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAL,EAA8B;IAC5B,MAAM,IAAI,KAAJ,CACF,iBAAe,UAAf,6BACI,WADJ,yBADE,CAAN;EAGD;;EACD,cAAc,CAAC,MAAf,CAAsB,GAAtB;AACD;AAGD,OAAM,SAAU,kBAAV,CAA6B,UAA7B,EAA+C;EACnD,IAAI,CAAC,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAL,EAAmC;IACjC,MAAM,IAAI,KAAJ,oBACe,UADf,qCAAN;EAED;;EACD,YAAY,CAAC,MAAb,CAAoB,UAApB;AACD;AAQD,OAAM,SAAU,qBAAV,CACF,qBADE,EAC6B,cAD7B,EACmD;EACvD,IAAM,OAAO,GAAG,oBAAoB,CAAC,qBAAD,CAApC;EACA,OAAO,CAAC,OAAR,CAAgB,UAAA,YAAY,EAAG;IAC7B,IAAM,eAAe,GACjB,SAAc,EAAd,EAAkB,YAAlB,EAAgC;MAAC,WAAW,EAAE;IAAd,CAAhC,CADJ;;IAEA,cAAc,CAAC,eAAD,CAAd;EACD,CAJD;AAKD;;AAED,SAAS,OAAT,CAAiB,UAAjB,EAAqC,WAArC,EAAwD;EACtD,OAAU,WAAV,SAAyB,UAAzB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        console.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            console.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n    const kernels = getKernelsForBackend(registeredBackendName);\n    kernels.forEach(kernelConfig => {\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n        registerKernel(newKernelConfig);\n    });\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n//# sourceMappingURL=kernel_registry.js.map"]},"metadata":{},"sourceType":"module"}