{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from \"./Complex\";\nimport { fill } from \"./Fill\";\nimport { imag } from \"./Imag\";\nimport { real } from \"./Real\";\nimport { zerosLike } from \"./ZerosLike\";\nexport function onesLike(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    var realPart = real({\n      inputs: {\n        input: x\n      },\n      backend: backend\n    });\n    var r = onesLike({\n      inputs: {\n        x: realPart\n      },\n      backend: backend\n    });\n    var imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend: backend\n    });\n    var i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend: backend\n    });\n    var result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill({\n      backend: backend,\n      attrs: {\n        shape: x.shape,\n        value: 1,\n        dtype: x.dtype\n      }\n    });\n  }\n}\nexport var onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike\n};","map":{"version":3,"sources":["../../src/kernels/OnesLike.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,QAAlC,QAA6E,uBAA7E;AAGA,SAAQ,OAAR;AACA,SAAQ,IAAR;AACA,SAAQ,IAAR;AACA,SAAQ,IAAR;AACA,SAAQ,SAAR;AAEA,OAAM,SAAU,QAAV,CACF,IADE,EACqD;EACzD,IAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;EAAA,IAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;;EAEA,IAAI,CAAC,CAAC,KAAF,KAAY,QAAhB,EAA0B;IACxB,MAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;EACD,CAFD,MAEO,IAAI,CAAC,CAAC,KAAF,KAAY,WAAhB,EAA6B;IAClC,IAAM,QAAQ,GAAG,IAAI,CAAC;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE;MAAR,CAAT;MAAqB,OAAO,EAAP;IAArB,CAAD,CAArB;IACA,IAAM,CAAC,GAAG,QAAQ,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAwB,OAAO,EAAP;IAAxB,CAAD,CAAlB;IACA,IAAM,QAAQ,GAAG,IAAI,CAAC;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE;MAAR,CAAT;MAAqB,OAAO,EAAP;IAArB,CAAD,CAArB;IACA,IAAM,CAAC,GAAG,SAAS,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAwB,OAAO,EAAP;IAAxB,CAAD,CAAnB;IAEA,IAAM,MAAM,GAAG,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,IAAI,EAAE,CAAP;QAAU,IAAI,EAAE;MAAhB,CAAT;MAA6B,OAAO,EAAP;IAA7B,CAAD,CAAtB;IAEA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;IACA,OAAO,CAAC,6BAAR,CAAsC,CAAtC;IACA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;IACA,OAAO,CAAC,6BAAR,CAAsC,CAAtC;IAEA,OAAO,MAAP;EACD,CAdM,MAcA;IACL,OAAO,IAAI,CAAC;MAAC,OAAO,EAAP,OAAD;MAAU,KAAK,EAAE;QAAC,KAAK,EAAE,CAAC,CAAC,KAAV;QAAiB,KAAK,EAAE,CAAxB;QAA2B,KAAK,EAAE,CAAC,CAAC;MAApC;IAAjB,CAAD,CAAX;EACD;AACF;AAED,OAAO,IAAM,cAAc,GAAiB;EAC1C,UAAU,EAAE,QAD8B;EAE1C,WAAW,EAAE,KAF6B;EAG1C,UAAU,EAAE;AAH8B,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 1, dtype: x.dtype } });\n    }\n}\nexport const onesLikeConfig = {\n    kernelName: OnesLike,\n    backendName: 'cpu',\n    kernelFunc: onesLike\n};\n//# sourceMappingURL=OnesLike.js.map"]},"metadata":{},"sourceType":"module"}