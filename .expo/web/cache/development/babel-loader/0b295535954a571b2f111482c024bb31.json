{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var DepthwiseConv2DProgram = _createClass(function DepthwiseConv2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  _classCallCheck(this, DepthwiseConv2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.outputShape = convInfo.outShape;\n  var xNumRows = convInfo.inHeight;\n  var xNumCols = convInfo.inWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  var activationSnippet = '',\n      applyActivationSnippet = '';\n\n  if (activation) {\n    if (hasPreluActivation) {\n      activationSnippet = \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \" + activation + \"\\n        }\";\n    } else if (hasLeakyReluAlpha) {\n      activationSnippet = \"float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          \" + activation + \"\\n        }\";\n    } else {\n      activationSnippet = \"\\n          float activation(float x) {\\n            \" + activation + \"\\n          }\\n        \";\n    }\n\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n\n  if (hasPreluActivation) {\n    this.variableNames.push('preluActivationWeights');\n  }\n\n  if (hasLeakyReluAlpha) {\n    this.variableNames.push('leakyreluAlpha');\n  }\n\n  this.userCode = \"\\n      \" + activationSnippet + \"\\n\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \" + channelMul + \";\\n        int q = d2 - d1 * \" + channelMul + \";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          int xR = xRCorner + wR * \" + dilationHeight + \";\\n\\n          if (xR < 0 || xR >= \" + xNumRows + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            int xC = xCCorner + wC * \" + dilationWidth + \";\\n\\n            if (xC < 0 || xC >= \" + xNumCols + \") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \" + addBiasSnippet + \"\\n        \" + applyActivationSnippet + \"\\n        setOutput(result);\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/conv_gpu_depthwise.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,sBAAb,gBAKE,gCACI,QADJ,EAG6B;EAAA,IAFU,OAEV,uEAFoB,KAEpB;EAAA,IADzB,UACyB,uEADJ,IACI;EAAA,IADE,kBACF,uEADuB,KACvB;EAAA,IAAzB,iBAAyB,uEAAL,KAAK;;EAAA;;EAP7B,KAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;EAQE,KAAK,WAAL,GAAmB,QAAQ,CAAC,QAA5B;EAEA,IAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1B;EACA,IAAM,QAAQ,GAAG,QAAQ,CAAC,OAA1B;EACA,IAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAhC;EACA,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjC;EACA,IAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;EACA,IAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;EACA,IAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;EACA,IAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;EACA,IAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;EACA,IAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;EACA,IAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAnD;EAEA,IAAI,iBAAiB,GAAG,EAAxB;EAAA,IAA4B,sBAAsB,GAAG,EAArD;;EACA,IAAI,UAAJ,EAAgB;IACd,IAAI,kBAAJ,EAAwB;MACtB,iBAAiB,4GAEb,UAFa,gBAAjB;IAID,CALD,MAKO,IAAI,iBAAJ,EAAuB;MAC5B,iBAAiB,oGAEb,UAFa,gBAAjB;IAID,CALM,MAKA;MACL,iBAAiB,6DAEX,UAFW,4BAAjB;IAKD;;IAED,sBAAsB,iCAAtB;EACD;;EAED,IAAM,cAAc,GAAG,OAAO,GAAG,iCAAH,GAAuC,EAArE;;EACA,IAAI,OAAJ,EAAa;IACX,KAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;EACD;;EAED,IAAI,kBAAJ,EAAwB;IACtB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,wBAAxB;EACD;;EACD,IAAI,iBAAJ,EAAuB;IACrB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,gBAAxB;EACD;;EAED,KAAK,QAAL,gBACI,iBADJ,8CAGgC,YAHhC,UAGiD,WAHjD,2CAI6B,MAJ7B,UAIwC,OAJxC,sNAWoB,UAXpB,qCAYwB,UAZxB,sXAqB4B,YArB5B,sDAsBiC,cAtBjC,2CAwB4B,QAxB5B,mFA4B8B,WA5B9B,wDA6BmC,aA7BnC,6CA+B8B,QA/B9B,iQA0CM,cA1CN,kBA2CM,sBA3CN;AA+CD,CAzGH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu_depthwise.js.map"]},"metadata":{},"sourceType":"module"}