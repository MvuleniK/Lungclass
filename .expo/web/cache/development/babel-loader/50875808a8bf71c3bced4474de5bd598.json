{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from \"../tensor\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\n\nfunction setdiff1dAsync_(x, y) {\n  var $x, $y, xVals, yVals, ySet, outputSize, i, buffer, indices, _i, p;\n\n  return _regeneratorRuntime.async(function setdiff1dAsync_$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          $x = convertToTensor(x, 'x', 'setdiff1d');\n          $y = convertToTensor(y, 'y', 'setdiff1d');\n          util.assert($x.dtype === $y.dtype, function () {\n            return \"x and y should have the same dtype, but got x (\" + $x.dtype + \") and y (\" + $y.dtype + \").\";\n          });\n          util.assert($x.rank === 1, function () {\n            return \"x should be 1D tensor, but got x (\" + $x.shape + \").\";\n          });\n          util.assert($y.rank === 1, function () {\n            return \"y should be 1D tensor, but got y (\" + $y.shape + \").\";\n          });\n          _context.next = 7;\n          return _regeneratorRuntime.awrap($x.data());\n\n        case 7:\n          xVals = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap($y.data());\n\n        case 10:\n          yVals = _context.sent;\n          ySet = new Set(yVals);\n          outputSize = 0;\n\n          for (i = 0; i < xVals.length; i++) {\n            if (!ySet.has(xVals[i])) {\n              outputSize++;\n            }\n          }\n\n          buffer = new TensorBuffer([outputSize], $x.dtype);\n          indices = new TensorBuffer([outputSize], 'int32');\n\n          for (_i = 0, p = 0; _i < xVals.length; _i++) {\n            if (!ySet.has(xVals[_i])) {\n              buffer.values[p] = xVals[_i];\n              indices.values[p] = _i;\n              p++;\n            }\n          }\n\n          return _context.abrupt(\"return\", [buffer.toTensor(), indices.toTensor()]);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport var setdiff1dAsync = setdiff1dAsync_;","map":{"version":3,"sources":["../../src/ops/setdiff1d_async.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAgB,YAAhB;AACA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;;AA+BA,SAAe,eAAf,CACI,CADJ,EAC0B,CAD1B;EAAA;;EAAA;IAAA;MAAA;QAAA;UAEQ,EAFR,GAEa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAF5B;UAGQ,EAHR,GAGa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAH5B;UAKE,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,KAAa,EAAE,CAAC,KADpB,EAEI;YAAA,2DACI,EAAE,CAAC,KADP,iBACwB,EAAE,CAAC,KAD3B;UAAA,CAFJ;UAKA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB;YAAA,8CAA2C,EAAE,CAAC,KAA9C;UAAA,CADnB;UAGA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB;YAAA,8CAA2C,EAAE,CAAC,KAA9C;UAAA,CADnB;UAbF;UAAA,iCAgBsB,EAAE,CAAC,IAAH,EAhBtB;;QAAA;UAgBQ,KAhBR;UAAA;UAAA,iCAiBsB,EAAE,CAAC,IAAH,EAjBtB;;QAAA;UAiBQ,KAjBR;UAkBQ,IAlBR,GAkBe,IAAI,GAAJ,CAAQ,KAAR,CAlBf;UAoBM,UApBN,GAoBmB,CApBnB;;UAqBE,KAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;YACrC,IAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAD,CAAd,CAAL,EAAyB;cACvB,UAAU;YACX;UACF;;UAEK,MA3BR,GA2BiB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,EAAE,CAAC,KAAlC,CA3BjB;UA4BQ,OA5BR,GA4BkB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,OAA/B,CA5BlB;;UA6BE,KAAS,EAAT,GAAa,CAAb,EAAgB,CAAhB,GAAoB,CAApB,EAAuB,EAAC,GAAG,KAAK,CAAC,MAAjC,EAAyC,EAAC,EAA1C,EAA8C;YAC5C,IAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,EAAD,CAAd,CAAL,EAAyB;cACvB,MAAM,CAAC,MAAP,CAAc,CAAd,IAAmB,KAAK,CAAC,EAAD,CAAxB;cACA,OAAO,CAAC,MAAR,CAAe,CAAf,IAAoB,EAApB;cACA,CAAC;YACF;UACF;;UAnCH,iCAoCS,CAAC,MAAM,CAAC,QAAP,EAAD,EAAoB,OAAO,CAAC,QAAR,EAApB,CApCT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAsCA,OAAO,IAAM,cAAc,GAAG,eAAvB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(x, y) {\n    const $x = convertToTensor(x, 'x', 'setdiff1d');\n    const $y = convertToTensor(y, 'y', 'setdiff1d');\n    util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n    util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n    util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n    const xVals = await $x.data();\n    const yVals = await $y.data();\n    const ySet = new Set(yVals);\n    let outputSize = 0;\n    for (let i = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            outputSize++;\n        }\n    }\n    const buffer = new TensorBuffer([outputSize], $x.dtype);\n    const indices = new TensorBuffer([outputSize], 'int32');\n    for (let i = 0, p = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            buffer.values[p] = xVals[i];\n            indices.values[p] = i;\n            p++;\n        }\n    }\n    return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n//# sourceMappingURL=setdiff1d_async.js.map"]},"metadata":{},"sourceType":"module"}