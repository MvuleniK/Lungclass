{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { FromPixels } from \"../kernel_names\";\nimport { getKernel } from \"../kernel_registry\";\nimport { Tensor } from \"../tensor\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { cast } from \"./cast\";\nimport { op } from \"./operation\";\nimport { tensor3d } from \"./tensor3d\";\nvar fromPixels2DContext;\n\nfunction fromPixels_(pixels) {\n  var numChannels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  var isPixelData = false;\n  var isImageData = false;\n  var isVideo = false;\n  var isImage = false;\n  var isCanvasLike = false;\n  var isImageBitmap = false;\n\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true;\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + \"HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData \" + \"in browser, or OffscreenCanvas, ImageData in webworker\" + \" or {data: Uint32Array, width: number, height: number}, \" + (\"but was \" + pixels.constructor.name));\n  }\n\n  if (isVideo) {\n    var HAVE_CURRENT_DATA_READY_STATE = 2;\n\n    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');\n    }\n  }\n\n  var kernel = getKernel(FromPixels, ENGINE.backendName);\n\n  if (kernel != null) {\n    var inputs = {\n      pixels: pixels\n    };\n    var attrs = {\n      numChannels: numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n\n  var _ref = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height],\n      _ref2 = _slicedToArray(_ref, 2),\n      width = _ref2[0],\n      height = _ref2[1];\n\n  var vals;\n\n  if (isCanvasLike) {\n    vals = pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n\n  var values;\n\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    var numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n\n    for (var i = 0; i < numPixels; i++) {\n      for (var channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n\n  var outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\nexport function toPixels(img, canvas) {\n  var $img, originalImgTensor, _$img$shape$slice, _$img$shape$slice2, height, width, depth, data, multiplier, bytes, i, rgba, d, value, j, ctx, imageData;\n\n  return _regeneratorRuntime.async(function toPixels$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          $img = convertToTensor(img, 'img', 'toPixels');\n\n          if (!(img instanceof Tensor)) {\n            originalImgTensor = $img;\n            $img = cast(originalImgTensor, 'int32');\n            originalImgTensor.dispose();\n          }\n\n          if (!($img.rank !== 2 && $img.rank !== 3)) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \" + $img.rank + \".\");\n\n        case 4:\n          _$img$shape$slice = $img.shape.slice(0, 2), _$img$shape$slice2 = _slicedToArray(_$img$shape$slice, 2), height = _$img$shape$slice2[0], width = _$img$shape$slice2[1];\n          depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n          if (!(depth > 4 || depth === 2)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"toPixels only supports depth of size \" + (\"1, 3 or 4 but got \" + depth));\n\n        case 8:\n          if (!($img.dtype !== 'float32' && $img.dtype !== 'int32')) {\n            _context.next = 10;\n            break;\n          }\n\n          throw new Error(\"Unsupported type for toPixels: \" + $img.dtype + \".\" + \" Please use float32 or int32 tensors.\");\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap($img.data());\n\n        case 12:\n          data = _context.sent;\n          multiplier = $img.dtype === 'float32' ? 255 : 1;\n          bytes = new Uint8ClampedArray(width * height * 4);\n          i = 0;\n\n        case 16:\n          if (!(i < height * width)) {\n            _context.next = 41;\n            break;\n          }\n\n          rgba = [0, 0, 0, 255];\n          d = 0;\n\n        case 19:\n          if (!(d < depth)) {\n            _context.next = 33;\n            break;\n          }\n\n          value = data[i * depth + d];\n\n          if (!($img.dtype === 'float32')) {\n            _context.next = 26;\n            break;\n          }\n\n          if (!(value < 0 || value > 1)) {\n            _context.next = 24;\n            break;\n          }\n\n          throw new Error(\"Tensor values for a float32 Tensor must be in the \" + (\"range [0 - 1] but encountered \" + value + \".\"));\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          if (!($img.dtype === 'int32')) {\n            _context.next = 29;\n            break;\n          }\n\n          if (!(value < 0 || value > 255)) {\n            _context.next = 29;\n            break;\n          }\n\n          throw new Error(\"Tensor values for a int32 Tensor must be in the \" + (\"range [0 - 255] but encountered \" + value + \".\"));\n\n        case 29:\n          if (depth === 1) {\n            rgba[0] = value * multiplier;\n            rgba[1] = value * multiplier;\n            rgba[2] = value * multiplier;\n          } else {\n            rgba[d] = value * multiplier;\n          }\n\n        case 30:\n          d++;\n          _context.next = 19;\n          break;\n\n        case 33:\n          j = i * 4;\n          bytes[j + 0] = Math.round(rgba[0]);\n          bytes[j + 1] = Math.round(rgba[1]);\n          bytes[j + 2] = Math.round(rgba[2]);\n          bytes[j + 3] = Math.round(rgba[3]);\n\n        case 38:\n          ++i;\n          _context.next = 16;\n          break;\n\n        case 41:\n          if (canvas != null) {\n            canvas.width = width;\n            canvas.height = height;\n            ctx = canvas.getContext('2d');\n            imageData = new ImageData(bytes, width, height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n\n          if ($img !== img) {\n            $img.dispose();\n          }\n\n          return _context.abrupt(\"return\", bytes);\n\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var fromPixels = op({\n  fromPixels_: fromPixels_\n});","map":{"version":3,"sources":["../../src/ops/browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(pixels, numChannels = 3) {\n    // Sanity checks.\n    if (numChannels > 4) {\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n    }\n    if (pixels == null) {\n        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n    }\n    let isPixelData = false;\n    let isImageData = false;\n    let isVideo = false;\n    let isImage = false;\n    let isCanvasLike = false;\n    let isImageBitmap = false;\n    if (pixels.data instanceof Uint8Array) {\n        isPixelData = true;\n    }\n    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n        isImageData = true;\n    }\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement) {\n        isVideo = true;\n    }\n    else if (typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement) {\n        isImage = true;\n        // tslint:disable-next-line: no-any\n    }\n    else if (pixels.getContext != null) {\n        isCanvasLike = true;\n    }\n    else if (typeof (ImageBitmap) !== 'undefined' &&\n        pixels instanceof ImageBitmap) {\n        isImageBitmap = true;\n    }\n    else {\n        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +\n            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n            `in browser, or OffscreenCanvas, ImageData in webworker` +\n            ` or {data: Uint32Array, width: number, height: number}, ` +\n            `but was ${pixels.constructor.name}`);\n    }\n    if (isVideo) {\n        const HAVE_CURRENT_DATA_READY_STATE = 2;\n        if (isVideo &&\n            pixels.readyState <\n                HAVE_CURRENT_DATA_READY_STATE) {\n            throw new Error('The video element has not loaded data yet. Please wait for ' +\n                '`loadeddata` event on the <video> element.');\n        }\n    }\n    // If the current backend has 'FromPixels' registered, it has a more\n    // efficient way of handling pixel uploads, so we call that.\n    const kernel = getKernel(FromPixels, ENGINE.backendName);\n    if (kernel != null) {\n        const inputs = { pixels };\n        const attrs = { numChannels };\n        return ENGINE.runKernel(FromPixels, inputs, attrs);\n    }\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    let vals;\n    if (isCanvasLike) {\n        vals =\n            // tslint:disable-next-line:no-any\n            pixels.getContext('2d').getImageData(0, 0, width, height).data;\n    }\n    else if (isImageData || isPixelData) {\n        vals = pixels.data;\n    }\n    else if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n    }\n    let values;\n    if (numChannels === 4) {\n        values = new Int32Array(vals);\n    }\n    else {\n        const numPixels = width * height;\n        values = new Int32Array(numPixels * numChannels);\n        for (let i = 0; i < numPixels; i++) {\n            for (let channel = 0; channel < numChannels; ++channel) {\n                values[i * numChannels + channel] = vals[i * 4 + channel];\n            }\n        }\n    }\n    const outShape = [height, width, numChannels];\n    return tensor3d(values, outShape, 'int32');\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(img, canvas) {\n    let $img = convertToTensor(img, 'img', 'toPixels');\n    if (!(img instanceof Tensor)) {\n        // Assume int32 if user passed a native array.\n        const originalImgTensor = $img;\n        $img = cast(originalImgTensor, 'int32');\n        originalImgTensor.dispose();\n    }\n    if ($img.rank !== 2 && $img.rank !== 3) {\n        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n    }\n    const [height, width] = $img.shape.slice(0, 2);\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\n    if (depth > 4 || depth === 2) {\n        throw new Error(`toPixels only supports depth of size ` +\n            `1, 3 or 4 but got ${depth}`);\n    }\n    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +\n            ` Please use float32 or int32 tensors.`);\n    }\n    const data = await $img.data();\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\n    const bytes = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < height * width; ++i) {\n        const rgba = [0, 0, 0, 255];\n        for (let d = 0; d < depth; d++) {\n            const value = data[i * depth + d];\n            if ($img.dtype === 'float32') {\n                if (value < 0 || value > 1) {\n                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +\n                        `range [0 - 1] but encountered ${value}.`);\n                }\n            }\n            else if ($img.dtype === 'int32') {\n                if (value < 0 || value > 255) {\n                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +\n                        `range [0 - 255] but encountered ${value}.`);\n                }\n            }\n            if (depth === 1) {\n                rgba[0] = value * multiplier;\n                rgba[1] = value * multiplier;\n                rgba[2] = value * multiplier;\n            }\n            else {\n                rgba[d] = value * multiplier;\n            }\n        }\n        const j = i * 4;\n        bytes[j + 0] = Math.round(rgba[0]);\n        bytes[j + 1] = Math.round(rgba[1]);\n        bytes[j + 2] = Math.round(rgba[2]);\n        bytes[j + 3] = Math.round(rgba[3]);\n    }\n    if (canvas != null) {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        const imageData = new ImageData(bytes, width, height);\n        ctx.putImageData(imageData, 0, 0);\n    }\n    if ($img !== img) {\n        $img.dispose();\n    }\n    return bytes;\n}\nexport const fromPixels = op({ fromPixels_ });\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"module"}