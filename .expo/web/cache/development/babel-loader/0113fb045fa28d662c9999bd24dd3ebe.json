{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from \"./utils\";\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'Fill':\n      {\n        var shape = getParamValue('shape', node, tensorMap, context);\n        var dtype = getParamValue('dtype', node, tensorMap, context);\n        var value = getParamValue('value', node, tensorMap, context);\n        return [tfOps.fill(shape, value, dtype)];\n      }\n\n    case 'LinSpace':\n      {\n        var start = getParamValue('start', node, tensorMap, context);\n        var stop = getParamValue('stop', node, tensorMap, context);\n        var num = getParamValue('num', node, tensorMap, context);\n        return [tfOps.linspace(start, stop, num)];\n      }\n\n    case 'Multinomial':\n      {\n        var logits = getParamValue('logits', node, tensorMap, context);\n        var numSamples = getParamValue('numSamples', node, tensorMap, context);\n        var seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.multinomial(logits, numSamples, seed)];\n      }\n\n    case 'OneHot':\n      {\n        var indices = getParamValue('indices', node, tensorMap, context);\n        var depth = getParamValue('depth', node, tensorMap, context);\n        var onValue = getParamValue('onValue', node, tensorMap, context);\n        var offValue = getParamValue('offValue', node, tensorMap, context);\n        return [tfOps.oneHot(indices, depth, onValue, offValue)];\n      }\n\n    case 'Ones':\n      {\n        return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'OnesLike':\n      {\n        return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'RandomUniform':\n      {\n        return [tfOps.randomUniform(getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'Range':\n      {\n        var _start = getParamValue('start', node, tensorMap, context);\n\n        var _stop = getParamValue('stop', node, tensorMap, context);\n\n        var step = getParamValue('step', node, tensorMap, context);\n        return [tfOps.range(_start, _stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'TruncatedNormal':\n      {\n        var _shape = getParamValue('shape', node, tensorMap, context);\n\n        var mean = getParamValue('mean', node, tensorMap, context);\n        var stdDev = getParamValue('stdDev', node, tensorMap, context);\n\n        var _seed = getParamValue('seed', node, tensorMap, context);\n\n        return [tfOps.truncatedNormal(_shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), _seed)];\n      }\n\n    case 'Zeros':\n      {\n        return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ZerosLike':\n      {\n        return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n  }\n};\nexport var CATEGORY = 'creation';","map":{"version":3,"sources":["../../../src/operations/executors/creation_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Fill': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const value = getParamValue('value', node, tensorMap, context);\n            return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const num = getParamValue('num', node, tensorMap, context);\n            return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n            const logits = getParamValue('logits', node, tensorMap, context);\n            const numSamples = getParamValue('numSamples', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const depth = getParamValue('depth', node, tensorMap, context);\n            const onValue = getParamValue('onValue', node, tensorMap, context);\n            const offValue = getParamValue('offValue', node, tensorMap, context);\n            return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n            return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'OnesLike': {\n            return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RandomUniform': {\n            return [tfOps.randomUniform(\n                // tslint:disable-next-line:no-any\n                getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'Range': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const step = getParamValue('step', node, tensorMap, context);\n            return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'TruncatedNormal': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const mean = getParamValue('mean', node, tensorMap, context);\n            const stdDev = getParamValue('stdDev', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n        }\n        case 'Zeros': {\n            return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ZerosLike': {\n            return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'creation';\n//# sourceMappingURL=creation_executor.js.map"]},"metadata":{},"sourceType":"module"}