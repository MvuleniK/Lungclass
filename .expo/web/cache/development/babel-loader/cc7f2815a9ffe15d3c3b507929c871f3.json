{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from \"./Mean_impl\";\nimport { transposeImpl, transposeImplCPU } from \"./Transpose_impl\";\nexport var meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var keepDims = attrs.keepDims,\n        axis = attrs.axis;\n    var webglBackend = backend;\n    var xRank = x.shape.length;\n    var origAxes = util.parseAxisParam(axis, x.shape);\n    var axes = origAxes;\n    var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    var meanInputIsTransposed = permutedAxes != null;\n    var shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    var intermediates = [];\n    var meanInput = x;\n\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        var xTexData = webglBackend.texData.get(meanInput.dataId);\n        var values = xTexData.values;\n        var newShape = new Array(xRank);\n\n        for (var i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        var meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        var meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(meanInput.shape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        meanOutShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var outShape = meanOutShape;\n\n    if (keepDims) {\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    var out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n\n    for (var _i = 0, _intermediates = intermediates; _i < _intermediates.length; _i++) {\n      var i = _intermediates[_i];\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Mean.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { keepDims, axis } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        const meanInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        const intermediates = [];\n        let meanInput = x;\n        if (meanInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(meanInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n                meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const meanInputData = webglBackend.texData.get(meanInput.dataId);\n                meanInputData.values = meanInputValues;\n            }\n            else {\n                meanInput = transposeImpl(x, permutedAxes, webglBackend);\n            }\n            intermediates.push(meanInput);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n        const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n        let outShape = meanOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n        }\n        const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n        for (const i of intermediates) {\n            webglBackend.disposeIntermediateTensorInfo(i);\n        }\n        return out;\n    }\n};\n//# sourceMappingURL=Mean.js.map"]},"metadata":{},"sourceType":"module"}