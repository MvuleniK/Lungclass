{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { reshape } from \"./Reshape\";\nimport { slice } from \"./Slice\";\nimport { transpose } from \"./Transpose\";\nexport function batchToSpaceND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      crops = attrs.crops;\n  assertNotComplex([x], 'batchToSpaceND');\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  var xReshaped = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  var xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend: backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  var xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend: backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  var result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend: backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nexport var batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"sources":["../../src/kernels/BatchToSpaceND.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,cAAtB,QAA4H,uBAA5H;AAGA,SAAQ,gBAAR;AACA,SAAQ,OAAR;AACA,SAAQ,KAAR;AACA,SAAQ,SAAR;AAEA,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,UAAP,GAA4B,KAA5B,CAAO,UAAP;EAAA,IAAmB,KAAnB,GAA4B,KAA5B,CAAmB,KAAnB;EAEA,gBAAgB,CAAC,CAAC,CAAD,CAAD,EAAM,gBAAN,CAAhB;EAEA,IAAM,IAAI,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAC,CAAD,EAAI,CAAJ;IAAA,OAAU,CAAC,GAAG,CAAd;EAAA,CAAlB,CAAb;EAEA,IAAM,QAAQ,GAAG,YAAY,CAAC,WAAb,CAAyB,CAAC,CAAC,KAA3B,EAAkC,UAAlC,EAA8C,IAA9C,CAAjB;EACA,IAAM,QAAQ,GAAG,YAAY,CAAC,WAAb,CAAyB,QAAQ,CAAC,MAAlC,EAA0C,UAAU,CAAC,MAArD,CAAjB;EACA,IAAM,gBAAgB,GAClB,YAAY,CAAC,mBAAb,CAAiC,CAAC,CAAC,KAAnC,EAA0C,UAA1C,EAAsD,IAAtD,CADJ;EAEA,IAAM,gBAAgB,GAClB,YAAY,CAAC,mBAAb,CAAiC,KAAjC,EAAwC,UAAU,CAAC,MAAnD,CADJ;EAEA,IAAM,SAAS,GACX,YAAY,CAAC,YAAb,CAA0B,gBAA1B,EAA4C,KAA5C,EAAmD,UAAU,CAAC,MAA9D,CADJ;EAGA,IAAM,SAAS,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAD;IAAD,CAAT;IAAc,OAAO,EAAP,OAAd;IAAuB,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAA9B,CAAD,CAAzB;EACA,IAAM,WAAW,GACb,SAAS,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAyB,OAAO,EAAP,OAAzB;IAAkC,KAAK,EAAE;MAAC,IAAI,EAAE;IAAP;EAAzC,CAAD,CADb;EAEA,IAAM,mBAAmB,GAAG,OAAO,CAC/B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAA2B,OAAO,EAAP,OAA3B;IAAoC,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAA3C,CAD+B,CAAnC;EAEA,IAAM,MAAM,GAAG,KAAK,CAAC;IACnB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CADW;IAEnB,OAAO,EAAP,OAFmB;IAGnB,KAAK,EAAE;MAAC,KAAK,EAAE,gBAAR;MAA0B,IAAI,EAAE;IAAhC;EAHY,CAAD,CAApB;EAMA,OAAO,CAAC,6BAAR,CAAsC,SAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,WAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,mBAAtC;EAEA,OAAO,MAAP;AACD;AAED,OAAO,IAAM,oBAAoB,GAAiB;EAChD,UAAU,EAAE,cADoC;EAEhD,WAAW,EAAE,KAFmC;EAGhD,UAAU,EAAE;AAHoC,CAA3C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    assertNotComplex([x], 'batchToSpaceND');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const xReshaped = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const xTransposed = transpose({ inputs: { x: xReshaped }, backend, attrs: { perm: permuted } });\n    const xTransposedReshaped = reshape({ inputs: { x: xTransposed }, backend, attrs: { shape: reshapedPermuted } });\n    const result = slice({\n        inputs: { x: xTransposedReshaped },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    backend.disposeIntermediateTensorInfo(xReshaped);\n    backend.disposeIntermediateTensorInfo(xTransposed);\n    backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n    return result;\n}\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'cpu',\n    kernelFunc: batchToSpaceND\n};\n//# sourceMappingURL=BatchToSpaceND.js.map"]},"metadata":{},"sourceType":"module"}