{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from \"../kernel_names\";\nimport { sum } from \"../ops/sum\";\nexport var broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var broadCastToAttrs = attrs;\n    var inputShape = broadCastToAttrs.inputShape;\n    var outputShape = broadCastToAttrs.shape;\n    var reps = Array.from(outputShape);\n\n    for (var i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(\"broadcastTo(): [\" + inputShape + \"] cannot be broadcast to [\" + outputShape + \"].\");\n      }\n    }\n\n    var axes = [];\n\n    for (var _i = 0; _i < reps.length; _i++) {\n      if (reps[_i] > 1) {\n        axes.push(_i);\n      }\n    }\n\n    return {\n      x: function x() {\n        return sum(dy, axes, true);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/BroadcastTo_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAR;AAEA,SAAQ,GAAR;AAGA,OAAO,IAAM,qBAAqB,GAAe;EAC/C,UAAU,EAAE,WADmC;EAE/C,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,EAAqD;IAC7D,IAAM,gBAAgB,GAClB,KADJ;IAGA,IAAM,UAAU,GAAG,gBAAgB,CAAC,UAApC;IACA,IAAM,WAAW,GAAG,gBAAgB,CAAC,KAArC;IAEA,IAAM,IAAI,GAAa,KAAK,CAAC,IAAN,CAAW,WAAX,CAAvB;;IACA,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAX,GAAoB,CAAjC,EAAoC,CAAC,IAAI,CAAzC,EAA4C,CAAC,EAA7C,EAAiD;MAC/C,IAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,WAAW,CAAC,CAAD,CAAjC,EAAsC;QACpC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;MACD,CAFD,MAEO,IAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,CAAtB,EAAyB;QAC9B,MAAM,IAAI,KAAJ,sBACF,UADE,kCACqC,WADrC,QAAN;MAED;IACF;;IACD,IAAM,IAAI,GAAa,EAAvB;;IACA,KAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAC,EAAlC,EAAsC;MACpC,IAAI,IAAI,CAAC,EAAD,CAAJ,GAAU,CAAd,EAAiB;QACf,IAAI,CAAC,IAAL,CAAU,EAAV;MACD;IACF;;IAED,OAAO;MAAC,CAAC,EAAE;QAAA,OAAM,GAAG,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX,CAAT;MAAA;IAAJ,CAAP;EACD;AA1B8C,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport const broadcastToGradConfig = {\n    kernelName: BroadcastTo,\n    gradFunc: (dy, saved, attrs) => {\n        const broadCastToAttrs = attrs;\n        const inputShape = broadCastToAttrs.inputShape;\n        const outputShape = broadCastToAttrs.shape;\n        const reps = Array.from(outputShape);\n        for (let i = inputShape.length - 1; i >= 0; i--) {\n            if (inputShape[i] === outputShape[i]) {\n                reps[i] = 1;\n            }\n            else if (inputShape[i] !== 1) {\n                throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n            }\n        }\n        const axes = [];\n        for (let i = 0; i < reps.length; i++) {\n            if (reps[i] > 1) {\n                axes.push(i);\n            }\n        }\n        return { x: () => sum(dy, axes, true /* keepDims */) };\n    }\n};\n//# sourceMappingURL=BroadcastTo_grad.js.map"]},"metadata":{},"sourceType":"module"}