{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var LRNProgram = _createClass(function LRNProgram(xShape, radius, bias, alpha, beta) {\n  _classCallCheck(this, LRNProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = [];\n  var rad = radius;\n  var maxD = xShape[3] - 1;\n  this.outputShape = xShape;\n  var powOperator;\n  var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n\n  if (beta === 0.5) {\n    powOperator = \"inversesqrt(\" + basis + \")\";\n  } else if (beta === 1.0) {\n    powOperator = \"1.0/(\" + basis + \")\";\n  } else {\n    powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + maxD + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + powOperator + \";\\n        setOutput(val);\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/lrn_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,UAAb,gBAKE,oBACI,MADJ,EACsB,MADtB,EACsC,IADtC,EACoD,KADpD,EAEI,IAFJ,EAEgB;EAAA;;EANhB,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EACA,KAAA,WAAA,GAAwB,EAAxB;EAME,IAAM,GAAG,GAAG,MAAZ;EACA,IAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,CAAzB;EACA,KAAK,WAAL,GAAmB,MAAnB;EAMA,IAAI,WAAJ;EACA,IAAM,KAAK,cAAY,IAAZ,kBAA6B,KAA7B,YAAX;;EACA,IAAI,IAAI,KAAK,GAAb,EAAkB;IAChB,WAAW,oBAAkB,KAAlB,MAAX;EACD,CAFD,MAEO,IAAI,IAAI,KAAK,GAAb,EAAkB;IACvB,WAAW,aAAW,KAAX,MAAX;EACD,CAFM,MAEA;IACL,WAAW,gBAAc,KAAd,mBAAiC,IAAjC,QAAX;EACD;;EAED,KAAK,QAAL,+QASoB,GATpB,eASiC,GATjC,gFAWgC,IAXhC,mIAgBsB,WAhBtB;AAoBD,CA9CH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_gpu.js.map"]},"metadata":{},"sourceType":"module"}