{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { MaxPool3DGrad } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport * as conv_util from \"./conv_util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction maxPool3dGrad_(dy, input, output, filterSize, strides) {\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1, 1];\n  var pad = arguments.length > 6 ? arguments[6] : undefined;\n  var dimRoundingMode = arguments.length > 7 ? arguments[7] : undefined;\n  var $dy = convertToTensor(dy, 'dy', 'maxPool3dGrad');\n  var $input = convertToTensor(input, 'input', 'maxPool3dGrad');\n  var $output = convertToTensor(output, 'output', 'maxPool3dGrad');\n  var dy5D = $dy;\n  var input5D = $input;\n  var output5D = $output;\n  var reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);\n    output5D = reshape($output, [1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]]);\n  }\n\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in maxPool3dGrad: dy must be rank 5 but got rank \" + (dy5D.rank + \".\");\n  });\n  util.assert(input5D.rank === 5, function () {\n    return \"Error in maxPool3dGrad: input must be rank 5 but got rank \" + (input5D.rank + \".\");\n  });\n  util.assert(output5D.rank === 5, function () {\n    return \"Error in maxPool3dGrad: output must be rank 5 but got rank \" + (output5D.rank + \".\");\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in maxPool3dGrad: Either strides or dilations ' + (\"must be 1. Got strides \" + strides + \" and dilations '\" + dilations + \"'\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPool3dGrad: pad must be an integer when \" + (\"using, dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n    });\n  }\n\n  var inputs = {\n    dy: dy5D,\n    input: input5D,\n    output: output5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    dilations: dilations,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernel(MaxPool3DGrad, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var maxPool3dGrad = op({\n  maxPool3dGrad_: maxPool3dGrad_\n});","map":{"version":3,"sources":["../../src/ops/max_pool_3d_grad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPool3DGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPool3dGrad_(dy, input, output, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'maxPool3dGrad');\n    const $input = convertToTensor(input, 'input', 'maxPool3dGrad');\n    const $output = convertToTensor(output, 'output', 'maxPool3dGrad');\n    let dy5D = $dy;\n    let input5D = $input;\n    let output5D = $output;\n    let reshapedTo5D = false;\n    if ($input.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n        input5D = reshape($input, [\n            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n        ]);\n        output5D = reshape($output, [\n            1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]\n        ]);\n    }\n    util.assert(dy5D.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ` +\n        `${dy5D.rank}.`);\n    util.assert(input5D.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ` +\n        `${input5D.rank}.`);\n    util.assert(output5D.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ` +\n        `${output5D.rank}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3dGrad: Either strides or dilations ' +\n        `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPool3dGrad: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inputs = { dy: dy5D, input: input5D, output: output5D };\n    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(MaxPool3DGrad, inputs, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const maxPool3dGrad = op({ maxPool3dGrad_ });\n//# sourceMappingURL=max_pool_3d_grad.js.map"]},"metadata":{},"sourceType":"module"}