{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from \"../dilation_gpu\";\nimport { reshape } from \"./Reshape\";\nexport function dilation2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations;\n  var convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC', dilations);\n  var out;\n  var program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  var outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend: backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport var dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D\n};","map":{"version":3,"sources":["../../src/kernels/Dilation2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,UAAtB,QAAgH,uBAAhH;AAGA,SAAQ,iBAAR;AACA,SAAQ,OAAR;AAEA,OAAM,SAAU,UAAV,CAAqB,IAArB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAoB,MAApB,CAAO,CAAP;EAAA,IAAU,MAAV,GAAoB,MAApB,CAAU,MAAV;EACA,IAAO,OAAP,GAAkC,KAAlC,CAAO,OAAP;EAAA,IAAgB,GAAhB,GAAkC,KAAlC,CAAgB,GAAhB;EAAA,IAAqB,SAArB,GAAkC,KAAlC,CAAqB,SAArB;EAEA,IAAM,QAAQ,GAAG,YAAY,CAAC,qBAAb,CACb,CAAC,CAAC,KADW,EAEb,MAAM,CAAC,KAFM,EAE6B,OAF7B,EAEsC,GAFtC,EAGb,MAHa,EAGY,SAHZ,CAAjB;EAIA,IAAI,GAAJ;EAEA,IAAM,OAAO,GAAG,IAAI,iBAAJ,CAAsB,QAAtB,CAAhB;EACA,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,EAA8C,SAA9C,CAAN;EAEA,IAAM,WAAW,GACb,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAmB,OAAO,EAAP,OAAnB;IAA4B,KAAK,EAAE;MAAC,KAAK,EAAE,QAAQ,CAAC;IAAjB;EAAnC,CAAD,CADX;EAEA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;EAEA,OAAO,WAAP;AACD;AAED,OAAO,IAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UADgC;EAE5C,WAAW,EAAE,OAF+B;EAG5C,UAAU,EAAE;AAHgC,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_gpu';\nimport { reshape } from './Reshape';\nexport function dilation2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n    let out;\n    const program = new Dilation2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const dilation2DConfig = {\n    kernelName: Dilation2D,\n    backendName: 'webgl',\n    kernelFunc: dilation2D,\n};\n//# sourceMappingURL=Dilation2D.js.map"]},"metadata":{},"sourceType":"module"}