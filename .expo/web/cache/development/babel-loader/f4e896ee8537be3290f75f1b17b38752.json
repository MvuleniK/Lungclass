{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from \"../complex_abs_gpu\";\n\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x;\n  var xData = backend.texData.get(x.dataId);\n  var program = new ComplexAbsProgram(x.shape);\n  var programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];\n  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport var complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs\n};","map":{"version":3,"sources":["../../src/kernels/ComplexAbs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAR,QAAiF,uBAAjF;AAGA,SAAQ,iBAAR;;AAKA,SAAS,8BAAT,CACI,aADJ,EAC+B,WAD/B,EACsD;EACpD,OAAO;IACL,MAAM,EAAE,WAAW,CAAC,MADf;IAEL,KAAK,EAAE,WAAW,CAAC,KAFd;IAGL,KAAK,EAAE,aAAa,CAAC;EAHhB,CAAP;AAKD;;AAED,OAAM,SAAU,UAAV,CACF,IADE,EACyD;EAC7D,IAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;EAAA,IAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EAEA,IAAM,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAAd;EAEA,IAAM,OAAO,GAAG,IAAI,iBAAJ,CAAsB,CAAC,CAAC,KAAxB,CAAhB;EACA,IAAM,aAAa,GAAG,CACpB,8BAA8B,CAAC,CAAD,EAAI,KAAK,CAAC,kBAAN,CAAyB,IAA7B,CADV,EAEpB,8BAA8B,CAAC,CAAD,EAAI,KAAK,CAAC,kBAAN,CAAyB,IAA7B,CAFV,CAAtB;EAKA,OAAO,OAAO,CAAC,eAAR,CACH,OADG,EACM,aADN,EACqB,aAAa,CAAC,CAAD,CAAb,CAAiB,KADtC,CAAP;AAED;AAED,OAAO,IAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UADgC;EAE5C,WAAW,EAAE,OAF+B;EAG5C,UAAU,EAAE;AAHgC,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n    };\n}\nexport function complexAbs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xData = backend.texData.get(x.dataId);\n    const program = new ComplexAbsProgram(x.shape);\n    const programInputs = [\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n    ];\n    return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'webgl',\n    kernelFunc: complexAbs\n};\n//# sourceMappingURL=ComplexAbs.js.map"]},"metadata":{},"sourceType":"module"}