{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from \"./PadV2\";\nimport { reshape } from \"./Reshape\";\nimport { transpose } from \"./Transpose\";\nexport var spaceToBatchND = function spaceToBatchND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      paddings = attrs.paddings;\n  util.assert(x.shape.length <= 4, function () {\n    return 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet';\n  });\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  var completePaddings = [[0, 0]];\n  completePaddings.push.apply(completePaddings, _toConsumableArray(paddings));\n\n  for (var i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  var toDispose = [];\n  var paddedX = padV2({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  var reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  var permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  var flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  var reshapedPaddedX = reshape({\n    inputs: {\n      x: paddedX\n    },\n    backend: backend,\n    attrs: {\n      shape: reshapedPaddedShape\n    }\n  });\n  var paddedXT = transpose({\n    inputs: {\n      x: reshapedPaddedX\n    },\n    backend: backend,\n    attrs: {\n      perm: permutedReshapedPaddedPermutation\n    }\n  });\n  var result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend: backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n};\nexport var spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"sources":["../../src/kernels/SpaceToBatchND.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const toDispose = [];\n    const paddedX = padV2({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapedPaddedX = reshape({ inputs: { x: paddedX }, backend, attrs: { shape: reshapedPaddedShape } });\n    const paddedXT = transpose({\n        inputs: { x: reshapedPaddedX },\n        backend,\n        attrs: { perm: permutedReshapedPaddedPermutation }\n    });\n    const result = reshape({ inputs: { x: paddedXT }, backend, attrs: { shape: flattenShape } });\n    toDispose.push(paddedX);\n    toDispose.push(reshapedPaddedX);\n    toDispose.push(paddedXT);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n};\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'webgl',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map"]},"metadata":{},"sourceType":"module"}