{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { notEqual, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from \"../backend/tfjs_backend\";\nimport { getConstraint, serializeConstraint } from \"../constraints\";\nimport { Layer } from \"../engine/topology\";\nimport { ValueError } from \"../errors\";\nimport { getInitializer, serializeInitializer } from \"../initializers\";\nimport { getRegularizer, serializeRegularizer } from \"../regularizers\";\nimport * as generic_utils from \"../utils/generic_utils\";\nimport { getExactlyOneShape, getExactlyOneTensor } from \"../utils/types_utils\";\nexport var Embedding = function (_Layer) {\n  _inherits(Embedding, _Layer);\n\n  var _super = _createSuper(Embedding);\n\n  function Embedding(args) {\n    var _this;\n\n    _classCallCheck(this, Embedding);\n\n    _this = _super.call(this, args);\n    _this.embeddings = null;\n    _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n\n    if (args.batchInputShape == null && args.inputShape == null) {\n      var batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      if (args.inputLength == null) {\n        _this.batchInputShape = [batchSize, null];\n      } else {\n        _this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n\n    _this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(_this.inputDim, 'inputDim');\n    _this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(_this.outputDim, 'outputDim');\n    _this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    _this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    _this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    _this.maskZero = args.maskZero;\n    _this.supportsMasking = args.maskZero;\n    _this.inputLength = args.inputLength;\n    return _this;\n  }\n\n  _createClass(Embedding, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n      this.built = true;\n    }\n  }, {\n    key: \"warnOnIncompatibleInputShape\",\n    value: function warnOnIncompatibleInputShape(inputShape) {}\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var _this2 = this;\n\n      return tidy(function () {\n        if (!_this2.maskZero) {\n          return null;\n        } else {\n          inputs = getExactlyOneTensor(inputs);\n          return notEqual(inputs, zerosLike(inputs));\n        }\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      if (this.inputLength == null) {\n        return [].concat(_toConsumableArray(inputShape), [this.outputDim]);\n      }\n\n      var inLens = generic_utils.toList(this.inputLength);\n\n      if (inLens.length !== inputShape.length - 1) {\n        throw new ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n      } else {\n        var i = 0;\n\n        for (var k = 0; k < inLens.length; ++k) {\n          var s1 = inLens[k];\n          var s2 = inputShape[k + 1];\n\n          if (s1 != null && s2 != null && s1 !== s2) {\n            throw new ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n          } else if (s1 == null) {\n            inLens[i] = s2;\n          }\n\n          i++;\n        }\n      }\n\n      return [inputShape[0]].concat(_toConsumableArray(inLens), [this.outputDim]);\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this3 = this;\n\n      return tidy(function () {\n        _this3.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (input.dtype !== 'int32') {\n          input = K.cast(input, 'int32');\n        }\n\n        var output = K.gather(_this3.embeddings.read(), input.as1D());\n        return output.reshape(getExactlyOneShape(_this3.computeOutputShape(input.shape)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        inputDim: this.inputDim,\n        outputDim: this.outputDim,\n        embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n        embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n        maskZero: this.maskZero,\n        inputLength: this.inputLength\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Embedding.prototype), \"getConfig\", this).call(this);\n\n      _extends(config, baseConfig);\n\n      return config;\n    }\n  }]);\n\n  return Embedding;\n}(Layer);\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);","map":{"version":3,"sources":["../../src/layers/embeddings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), input.as1D());\n            return output.reshape(getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);\n//# sourceMappingURL=embeddings.js.map"]},"metadata":{},"sourceType":"module"}