{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from \"../gather_gpu\";\nimport { gatherV2ImplCPU } from \"../kernel_utils/shared\";\nimport { reshape } from \"./Reshape\";\nexport function gatherV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      indices = inputs.indices;\n  var axis = attrs.axis,\n      batchDims = attrs.batchDims;\n  var parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  var shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  var indicesSize = util.sizeFromShape(indices.shape);\n  var toDispose = [];\n  var flattenX = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  var flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  var flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    var indicesBuf = backend.bufferSync(flattenIndex);\n    var xBuf = backend.bufferSync(flattenX);\n    var outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  var program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return reshaped;\n}\nexport var gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};","map":{"version":3,"sources":["../../src/kernels/GatherV2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const toDispose = [];\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    toDispose.push(flattenX);\n    toDispose.push(flattenIndex);\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(flattenIndex);\n        const xBuf = backend.bufferSync(flattenX);\n        const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n    toDispose.push(res);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'webgl',\n    kernelFunc: gatherV2\n};\n//# sourceMappingURL=GatherV2.js.map"]},"metadata":{},"sourceType":"module"}