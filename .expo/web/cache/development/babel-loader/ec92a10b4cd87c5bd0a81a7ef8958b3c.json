{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport function countParamsInWeights(weights) {\n  var count = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(weights), _step; !(_step = _iterator()).done;) {\n    var weight = _step.value;\n\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce(function (a, b) {\n        return a * b;\n      });\n    }\n  }\n\n  return count;\n}","map":{"version":3,"sources":["../../src/utils/variable_utils.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAQG;AAWH,OAAM,SAAU,oBAAV,CAA+B,OAA/B,EAAuD;EAC3D,IAAI,KAAK,GAAG,CAAZ;;EACA,qDAAqB,OAArB,wCAA8B;IAAA,IAAnB,MAAmB;;IAC5B,IAAI,MAAM,CAAC,KAAP,CAAa,MAAb,KAAwB,CAA5B,EAA+B;MAC7B,KAAK,IAAI,CAAT;IACD,CAFD,MAEO;MACL,KAAK,IAAI,MAAM,CAAC,KAAP,CAAa,MAAb,CAAoB,UAAC,CAAD,EAAI,CAAJ;QAAA,OAAU,CAAC,GAAG,CAAd;MAAA,CAApB,CAAT;IACD;EACF;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights) {\n    let count = 0;\n    for (const weight of weights) {\n        if (weight.shape.length === 0) {\n            count += 1;\n        }\n        else {\n            count += weight.shape.reduce((a, b) => a * b);\n        }\n    }\n    return count;\n}\n//# sourceMappingURL=variable_utils.js.map"]},"metadata":{},"sourceType":"module"}