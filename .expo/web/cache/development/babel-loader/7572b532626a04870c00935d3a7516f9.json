{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from \"./Complex\";\nimport { identity } from \"./Identity\";\nimport { notEqual } from \"./NotEqual\";\nimport { real } from \"./Real\";\nimport { int } from \"../kernel_utils/int\";\nexport function cast(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var dtype = attrs.dtype;\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x: x\n        },\n        backend: backend\n      });\n    }\n\n    var zerosTensor = tf.zeros(x.shape);\n    var floatX = cast({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    var result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend: backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n\n  if (x.dtype === 'complex64') {\n    var realPart = real({\n      inputs: {\n        input: x\n      },\n      backend: backend\n    });\n\n    var _result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend: backend,\n      attrs: {\n        dtype: dtype\n      }\n    });\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    return _result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    var _result2 = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n\n    return {\n      dataId: _result2.dataId,\n      shape: _result2.shape,\n      dtype: dtype\n    };\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    var zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    var binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n\n    var _result3 = notEqual({\n      inputs: binaryInputs,\n      backend: backend\n    });\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return _result3;\n  }\n\n  throw new Error(\"Error in Cast: failed to cast \" + x.dtype + \" to \" + dtype);\n}\nexport var castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":{"version":3,"sources":["../../src/kernels/Cast.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        // TODO(annxingyuan): Import kernel function once zeros is modularized.\n        const zerosTensor = tf.zeros(x.shape);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensor }, backend });\n        zerosTensor.dispose();\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        return int(x, backend);\n    }\n    if (dtype === 'bool') {\n        const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n        const binaryInputs = { a: x, b: zerosTensorInfo };\n        const result = notEqual({ inputs: binaryInputs, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        return result;\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'webgl',\n    kernelFunc: cast\n};\n//# sourceMappingURL=Cast.js.map"]},"metadata":{},"sourceType":"module"}