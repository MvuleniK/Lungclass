{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { whereImpl } from \"../backends/where_impl\";\nimport { convertToTensor } from \"../tensor_util_env\";\n\nfunction whereAsync_(condition) {\n  var $condition, vals, res;\n  return _regeneratorRuntime.async(function whereAsync_$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n          _context.next = 3;\n          return _regeneratorRuntime.awrap($condition.data());\n\n        case 3:\n          vals = _context.sent;\n          res = whereImpl($condition.shape, vals);\n\n          if (condition !== $condition) {\n            $condition.dispose();\n          }\n\n          return _context.abrupt(\"return\", res);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport var whereAsync = whereAsync_;","map":{"version":3,"sources":["../../src/ops/where_async.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,SAAR;AAEA,SAAQ,eAAR;;AAuBA,SAAe,WAAf,CAA2B,SAA3B;EAAA;EAAA;IAAA;MAAA;QAAA;UACQ,UADR,GAEM,eAAe,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,EAAuC,MAAvC,CAFrB;UAAA;UAAA,iCAGqB,UAAU,CAAC,IAAX,EAHrB;;QAAA;UAGQ,IAHR;UAIQ,GAJR,GAIc,SAAS,CAAC,UAAU,CAAC,KAAZ,EAAmB,IAAnB,CAJvB;;UAKE,IAAI,SAAS,KAAK,UAAlB,EAA8B;YAC5B,UAAU,CAAC,OAAX;UACD;;UAPH,iCAQS,GART;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAWA,OAAO,IAAM,UAAU,GAAG,WAAnB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { whereImpl } from '../backends/where_impl';\nimport { convertToTensor } from '../tensor_util_env';\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nasync function whereAsync_(condition) {\n    const $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n    const vals = await $condition.data();\n    const res = whereImpl($condition.shape, vals);\n    if (condition !== $condition) {\n        $condition.dispose();\n    }\n    return res;\n}\nexport const whereAsync = whereAsync_;\n//# sourceMappingURL=where_async.js.map"]},"metadata":{},"sourceType":"module"}