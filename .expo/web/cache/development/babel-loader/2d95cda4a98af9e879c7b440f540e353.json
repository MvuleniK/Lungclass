{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from \"../environment\";\nimport * as util from \"../util\";\nimport { decodeWeights } from \"./io_utils\";\nimport { monitorPromisesProgress } from \"./progress\";\nimport { DTYPE_VALUE_SIZE_MAP } from \"./types\";\nexport function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n  var fetchFunc, requests, fetchStartFraction, fetchEndFraction, responses, bufferPromises, bufferStartFraction, bufferEndFraction, buffers;\n  return _regeneratorRuntime.async(function loadWeightsAsArrayBuffer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (loadOptions == null) {\n            loadOptions = {};\n          }\n\n          fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc;\n          requests = fetchURLs.map(function (fetchURL) {\n            return fetchFunc(fetchURL, loadOptions.requestInit, {\n              isBinary: true\n            });\n          });\n          fetchStartFraction = 0;\n          fetchEndFraction = 0.5;\n\n          if (!(loadOptions.onProgress == null)) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Promise.all(requests));\n\n        case 8:\n          _context.t0 = _context.sent;\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction));\n\n        case 13:\n          _context.t0 = _context.sent;\n\n        case 14:\n          responses = _context.t0;\n          bufferPromises = responses.map(function (response) {\n            return response.arrayBuffer();\n          });\n          bufferStartFraction = 0.5;\n          bufferEndFraction = 1;\n\n          if (!(loadOptions.onProgress == null)) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(Promise.all(bufferPromises));\n\n        case 21:\n          _context.t1 = _context.sent;\n          _context.next = 27;\n          break;\n\n        case 24:\n          _context.next = 26;\n          return _regeneratorRuntime.awrap(monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction));\n\n        case 26:\n          _context.t1 = _context.sent;\n\n        case 27:\n          buffers = _context.t1;\n          return _context.abrupt(\"return\", buffers);\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function loadWeights(manifest) {\n  var filePathPrefix,\n      weightNames,\n      requestInit,\n      fetchWeights,\n      loadWeights,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function loadWeights$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          filePathPrefix = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : '';\n          weightNames = _args2.length > 2 ? _args2[2] : undefined;\n          requestInit = _args2.length > 3 ? _args2[3] : undefined;\n\n          fetchWeights = function fetchWeights(fetchUrls) {\n            return loadWeightsAsArrayBuffer(fetchUrls, {\n              requestInit: requestInit\n            });\n          };\n\n          loadWeights = weightsLoaderFactory(fetchWeights);\n          return _context2.abrupt(\"return\", loadWeights(manifest, filePathPrefix, weightNames));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return function _callee(manifest) {\n    var filePathPrefix,\n        weightNames,\n        groupIndicesToFetchMap,\n        groupWeightsToFetch,\n        weightsFound,\n        allManifestWeightNames,\n        weightsNotFound,\n        groupIndicesToFetch,\n        fetchUrls,\n        buffers,\n        weightsTensorMap,\n        bufferIndexOffset,\n        _args3 = arguments;\n    return _regeneratorRuntime.async(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            filePathPrefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : '';\n            weightNames = _args3.length > 2 ? _args3[2] : undefined;\n            groupIndicesToFetchMap = manifest.map(function () {\n              return false;\n            });\n            groupWeightsToFetch = {};\n            weightsFound = weightNames != null ? weightNames.map(function () {\n              return false;\n            }) : [];\n            allManifestWeightNames = [];\n            manifest.forEach(function (manifestGroupConfig, groupIndex) {\n              var groupOffset = 0;\n              manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                var rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n                var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n\n                var enqueueWeightsForFetchingFn = function enqueueWeightsForFetchingFn() {\n                  groupIndicesToFetchMap[groupIndex] = true;\n\n                  if (groupWeightsToFetch[groupIndex] == null) {\n                    groupWeightsToFetch[groupIndex] = [];\n                  }\n\n                  groupWeightsToFetch[groupIndex].push({\n                    manifestEntry: weightsEntry,\n                    groupOffset: groupOffset,\n                    sizeBytes: weightsBytes\n                  });\n                };\n\n                if (weightNames != null) {\n                  weightNames.forEach(function (weightName, weightIndex) {\n                    if (weightName === weightsEntry.name) {\n                      enqueueWeightsForFetchingFn();\n                      weightsFound[weightIndex] = true;\n                    }\n                  });\n                } else {\n                  enqueueWeightsForFetchingFn();\n                }\n\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n              });\n            });\n\n            if (weightsFound.every(function (found) {\n              return found;\n            })) {\n              _context3.next = 10;\n              break;\n            }\n\n            weightsNotFound = weightNames.filter(function (_, i) {\n              return !weightsFound[i];\n            });\n            throw new Error(\"Could not find weights in manifest with names: \" + (weightsNotFound.join(', ') + \". \\n\") + \"Manifest JSON has weights with names: \" + (allManifestWeightNames.join(', ') + \".\"));\n\n          case 10:\n            groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n              if (shouldFetch) {\n                accumulator.push(i);\n              }\n\n              return accumulator;\n            }, []);\n            fetchUrls = [];\n            groupIndicesToFetch.forEach(function (i) {\n              manifest[i].paths.forEach(function (filepath) {\n                var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n              });\n            });\n            _context3.next = 15;\n            return _regeneratorRuntime.awrap(fetchWeightsFunction(fetchUrls));\n\n          case 15:\n            buffers = _context3.sent;\n            weightsTensorMap = {};\n            bufferIndexOffset = 0;\n            groupIndicesToFetch.forEach(function (i) {\n              var numBuffers = manifest[i].paths.length;\n              var groupBytes = 0;\n\n              for (var _i = 0; _i < numBuffers; _i++) {\n                groupBytes += buffers[bufferIndexOffset + _i].byteLength;\n              }\n\n              var groupBuffer = new ArrayBuffer(groupBytes);\n              var groupByteBuffer = new Uint8Array(groupBuffer);\n              var groupBufferOffset = 0;\n\n              for (var _i2 = 0; _i2 < numBuffers; _i2++) {\n                var buffer = new Uint8Array(buffers[bufferIndexOffset + _i2]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n              }\n\n              var weightsEntries = groupWeightsToFetch[i];\n              weightsEntries.forEach(function (weightsEntry) {\n                var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                var nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n\n                for (var name in nameToTensorMap) {\n                  weightsTensorMap[name] = nameToTensorMap[name];\n                }\n              });\n              bufferIndexOffset += numBuffers;\n            });\n            return _context3.abrupt(\"return\", weightsTensorMap);\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}","map":{"version":3,"sources":["../../src/io/weights_loader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n//# sourceMappingURL=weights_loader.js.map"]},"metadata":{},"sourceType":"module"}