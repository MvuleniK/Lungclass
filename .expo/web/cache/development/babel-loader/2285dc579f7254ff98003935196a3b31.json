{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from \"./Concat\";\nimport { expandDims } from \"./ExpandDims\";\nexport function pack(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var axis = attrs.axis;\n\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend: backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n\n  var shape = inputs[0].shape;\n  var dtype = inputs[0].dtype;\n  inputs.forEach(function (t) {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, function () {\n      return 'All tensors passed to stack must have matching dtypes';\n    });\n  });\n  var intermediateTensorInfos = [];\n  var expandedTensors = inputs.map(function (t) {\n    var expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend: backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  var result = concat({\n    inputs: expandedTensors,\n    backend: backend,\n    attrs: {\n      axis: axis\n    }\n  });\n  intermediateTensorInfos.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var packConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack\n};","map":{"version":3,"sources":["../../src/kernels/Pack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,IAAlC,EAA2E,IAA3E,QAAsF,uBAAtF;AAGA,SAAQ,MAAR;AACA,SAAQ,UAAR;AAEA,OAAM,SAAU,IAAV,CACF,IADE,EACqE;EAEzE,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;;EAEA,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;IACvB,OAAO,UAAU,CACb;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE,MAAM,CAAC,CAAD;MAAd,CAAT;MAA6B,OAAO,EAAP,OAA7B;MAAsC,KAAK,EAAE;QAAC,GAAG,EAAE;MAAN;IAA7C,CADa,CAAjB;EAED;;EAED,IAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,KAAxB;EACA,IAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,KAAxB;EAEA,MAAM,CAAC,OAAP,CAAe,UAAA,CAAC,EAAG;IACjB,IAAI,CAAC,iBAAL,CACI,KADJ,EACW,CAAC,CAAC,KADb,EAEI,uDAFJ;IAGA,IAAI,CAAC,MAAL,CACI,KAAK,KAAK,CAAC,CAAC,KADhB,EAEI;MAAA,OAAM,uDAAN;IAAA,CAFJ;EAGD,CAPD;EASA,IAAM,uBAAuB,GAAiB,EAA9C;EACA,IAAM,eAAe,GAAG,MAAM,CAAC,GAAP,CAAW,UAAA,CAAC,EAAG;IACrC,IAAM,SAAS,GACX,UAAU,CAAC;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE;MAAR,CAAT;MAAqB,OAAO,EAAP,OAArB;MAA8B,KAAK,EAAE;QAAC,GAAG,EAAE;MAAN;IAArC,CAAD,CADd;IAEA,uBAAuB,CAAC,IAAxB,CAA6B,SAA7B;IACA,OAAO,SAAP;EACD,CALuB,CAAxB;EAOA,IAAM,MAAM,GAAG,MAAM,CAAC;IAAC,MAAM,EAAE,eAAT;IAA0B,OAAO,EAAP,OAA1B;IAAmC,KAAK,EAAE;MAAC,IAAI,EAAJ;IAAD;EAA1C,CAAD,CAArB;EAEA,uBAAuB,CAAC,OAAxB,CACI,UAAA,CAAC;IAAA,OAAI,OAAO,CAAC,6BAAR,CAAsC,CAAtC,CAAJ;EAAA,CADL;EAGA,OAAO,MAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,OAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'webgl',\n    kernelFunc: pack\n};\n//# sourceMappingURL=Pack.js.map"]},"metadata":{},"sourceType":"module"}