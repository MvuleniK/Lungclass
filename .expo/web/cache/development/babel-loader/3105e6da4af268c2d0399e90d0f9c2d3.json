{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Less } from \"../kernel_names\";\nimport { makeTypesMatch } from \"../tensor_util\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { assertAndGetBroadcastShape } from \"./broadcast_util\";\nimport { op } from \"./operation\";\n\nfunction less_(a, b) {\n  var $a = convertToTensor(a, 'a', 'less');\n  var $b = convertToTensor(b, 'b', 'less');\n\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(Less, inputs);\n}\n\nexport var less = op({\n  less_: less_\n});","map":{"version":3,"sources":["../../src/ops/less.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR;AACA,SAAQ,IAAR;AAGA,SAAQ,cAAR;AACA,SAAQ,eAAR;AAGA,SAAQ,0BAAR;AACA,SAAQ,EAAR;;AAgBA,SAAS,KAAT,CACI,CADJ,EAC0B,CAD1B,EAC8C;EAC5C,IAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,MAAT,CAAxB;EACA,IAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,MAAT,CAAxB;;EAF4C,sBAGjC,cAAc,CAAC,EAAD,EAAK,EAAL,CAHmB;;EAAA;;EAG3C,EAH2C;EAGvC,EAHuC;EAK5C,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAA1B;EAEA,IAAM,MAAM,GAAe;IAAC,CAAC,EAAE,EAAJ;IAAQ,CAAC,EAAE;EAAX,CAA3B;EAEA,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,MAAvB,CAAP;AACD;;AAED,OAAO,IAAM,IAAI,GAAG,EAAE,CAAC;EAAC,KAAK,EAAL;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Less } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction less_(a, b) {\n    let $a = convertToTensor(a, 'a', 'less');\n    let $b = convertToTensor(b, 'b', 'less');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Less, inputs);\n}\nexport const less = op({ less_ });\n//# sourceMappingURL=less.js.map"]},"metadata":{},"sourceType":"module"}