{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from \"../util\";\nimport { IORouterRegistry } from \"./router_registry\";\nvar URL_SCHEME_SUFFIX = '://';\nexport var ModelStoreManagerRegistry = function () {\n  function ModelStoreManagerRegistry() {\n    _classCallCheck(this, ModelStoreManagerRegistry);\n\n    this.managers = {};\n  }\n\n  _createClass(ModelStoreManagerRegistry, null, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (ModelStoreManagerRegistry.instance == null) {\n        ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n      }\n\n      return ModelStoreManagerRegistry.instance;\n    }\n  }, {\n    key: \"registerManager\",\n    value: function registerManager(scheme, manager) {\n      assert(scheme != null, function () {\n        return 'scheme must not be undefined or null.';\n      });\n\n      if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n        scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n      }\n\n      assert(scheme.length > 0, function () {\n        return 'scheme must not be an empty string.';\n      });\n      var registry = ModelStoreManagerRegistry.getInstance();\n      assert(registry.managers[scheme] == null, function () {\n        return \"A model store manager is already registered for scheme '\" + scheme + \"'.\";\n      });\n      registry.managers[scheme] = manager;\n    }\n  }, {\n    key: \"getManager\",\n    value: function getManager(scheme) {\n      var manager = this.getInstance().managers[scheme];\n\n      if (manager == null) {\n        throw new Error(\"Cannot find model manager for scheme '\" + scheme + \"'\");\n      }\n\n      return manager;\n    }\n  }, {\n    key: \"getSchemes\",\n    value: function getSchemes() {\n      return Object.keys(this.getInstance().managers);\n    }\n  }]);\n\n  return ModelStoreManagerRegistry;\n}();\n\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\"The url string provided does not contain a scheme. \" + \"Supported schemes are: \" + (\"\" + ModelStoreManagerRegistry.getSchemes().join(',')));\n  }\n\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\n\nfunction cloneModelInternal(sourceURL, destURL) {\n  var deleteSource,\n      loadHandlers,\n      loadHandler,\n      saveHandlers,\n      saveHandler,\n      sourceScheme,\n      sourcePath,\n      sameMedium,\n      modelArtifacts,\n      saveResult,\n      _args = arguments;\n  return _regeneratorRuntime.async(function cloneModelInternal$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          deleteSource = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n          assert(sourceURL !== destURL, function () {\n            return \"Old path and new path are the same: '\" + sourceURL + \"'\";\n          });\n          loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n          assert(loadHandlers.length > 0, function () {\n            return \"Copying failed because no load handler is found for source URL \" + sourceURL + \".\";\n          });\n          assert(loadHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\" + loadHandlers.length + \") \" + (\"load handlers for source URL \" + sourceURL + \".\");\n          });\n          loadHandler = loadHandlers[0];\n          saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n          assert(saveHandlers.length > 0, function () {\n            return \"Copying failed because no save handler is found for destination \" + (\"URL \" + destURL + \".\");\n          });\n          assert(saveHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\" + loadHandlers.length + \") \" + (\"save handlers for destination URL \" + destURL + \".\");\n          });\n          saveHandler = saveHandlers[0];\n          sourceScheme = parseURL(sourceURL).scheme;\n          sourcePath = parseURL(sourceURL).path;\n          sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(loadHandler.load());\n\n        case 15:\n          modelArtifacts = _context.sent;\n\n          if (!(deleteSource && sameMedium)) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath));\n\n        case 19:\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(saveHandler.save(modelArtifacts));\n\n        case 21:\n          saveResult = _context.sent;\n\n          if (!(deleteSource && !sameMedium)) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 25;\n          return _regeneratorRuntime.awrap(ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath));\n\n        case 25:\n          return _context.abrupt(\"return\", saveResult.modelArtifactsInfo);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction listModels() {\n  var schemes, out, _iterator, _step, scheme, schemeOut, path, url;\n\n  return _regeneratorRuntime.async(function listModels$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          schemes = ModelStoreManagerRegistry.getSchemes();\n          out = {};\n          _iterator = _createForOfIteratorHelperLoose(schemes);\n\n        case 3:\n          if ((_step = _iterator()).done) {\n            _context2.next = 11;\n            break;\n          }\n\n          scheme = _step.value;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(ModelStoreManagerRegistry.getManager(scheme).listModels());\n\n        case 7:\n          schemeOut = _context2.sent;\n\n          for (path in schemeOut) {\n            url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n          }\n\n        case 9:\n          _context2.next = 3;\n          break;\n\n        case 11:\n          return _context2.abrupt(\"return\", out);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction removeModel(url) {\n  var schemeAndPath, manager;\n  return _regeneratorRuntime.async(function removeModel$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          schemeAndPath = parseURL(url);\n          manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n          return _context3.abrupt(\"return\", manager.removeModel(schemeAndPath.path));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction copyModel(sourceURL, destURL) {\n  var deleteSource;\n  return _regeneratorRuntime.async(function copyModel$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          deleteSource = false;\n          return _context4.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction moveModel(sourceURL, destURL) {\n  var deleteSource;\n  return _regeneratorRuntime.async(function moveModel$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          deleteSource = true;\n          return _context5.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { moveModel, copyModel, removeModel, listModels };","map":{"version":3,"sources":["../../src/io/model_management.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n    constructor() {\n        this.managers = {};\n    }\n    static getInstance() {\n        if (ModelStoreManagerRegistry.instance == null) {\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n        }\n        return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerManager(scheme, manager) {\n        assert(scheme != null, () => 'scheme must not be undefined or null.');\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n        }\n        assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n        const registry = ModelStoreManagerRegistry.getInstance();\n        assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n        registry.managers[scheme] = manager;\n    }\n    static getManager(scheme) {\n        const manager = this.getInstance().managers[scheme];\n        if (manager == null) {\n            throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n        }\n        return manager;\n    }\n    static getSchemes() {\n        return Object.keys(this.getInstance().managers);\n    }\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n        throw new Error(`The url string provided does not contain a scheme. ` +\n            `Supported schemes are: ` +\n            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n    }\n    return {\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\n        path: url.split(URL_SCHEME_SUFFIX)[1],\n    };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n    assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n    const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n    assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n    assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `load handlers for source URL ${sourceURL}.`);\n    const loadHandler = loadHandlers[0];\n    const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n    assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +\n        `URL ${destURL}.`);\n    assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `save handlers for destination URL ${destURL}.`);\n    const saveHandler = saveHandlers[0];\n    const sourceScheme = parseURL(sourceURL).scheme;\n    const sourcePath = parseURL(sourceURL).path;\n    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n    const modelArtifacts = await loadHandler.load();\n    // If moving within the same storage medium, remove the old model as soon as\n    // the loading is done. Without doing this, it is possible that the combined\n    // size of the two models will cause the cloning to fail.\n    if (deleteSource && sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    const saveResult = await saveHandler.save(modelArtifacts);\n    // If moving between mediums, the deletion is done after the save succeeds.\n    // This guards against the case in which saving to the destination medium\n    // fails.\n    if (deleteSource && !sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels() {\n    const schemes = ModelStoreManagerRegistry.getSchemes();\n    const out = {};\n    for (const scheme of schemes) {\n        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n        for (const path in schemeOut) {\n            const url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n        }\n    }\n    return out;\n}\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url) {\n    const schemeAndPath = parseURL(url);\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n    return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(sourceURL, destURL) {\n    const deleteSource = false;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(sourceURL, destURL) {\n    const deleteSource = true;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };\n//# sourceMappingURL=model_management.js.map"]},"metadata":{},"sourceType":"module"}