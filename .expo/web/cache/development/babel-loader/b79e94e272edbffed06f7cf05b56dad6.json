{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport \"../flags\";\nimport { env } from \"../environment\";\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from \"./io_utils\";\nimport { IORouterRegistry } from \"./router_registry\";\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve);\n  }).then(f);\n}\n\nexport var BrowserDownloads = function () {\n  function BrowserDownloads(fileNamePrefix) {\n    _classCallCheck(this, BrowserDownloads);\n\n    if (!env().getBool('IS_BROWSER')) {\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  _createClass(BrowserDownloads, [{\n    key: \"save\",\n    value: function save(modelArtifacts) {\n      var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor, weightDataAnchor;\n      return _regeneratorRuntime.async(function save$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof document === 'undefined')) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n\n            case 2:\n              weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n                type: 'application/octet-stream'\n              }));\n\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n\n            case 7:\n              weightsManifest = [{\n                paths: ['./' + this.weightDataFileName],\n                weights: modelArtifacts.weightSpecs\n              }];\n              modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest: weightsManifest\n              };\n\n              if (modelArtifacts.signature != null) {\n                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n              }\n\n              if (modelArtifacts.userDefinedMetadata != null) {\n                modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n              }\n\n              if (modelArtifacts.modelInitializer != null) {\n                modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n              }\n\n              modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n                type: 'application/json'\n              }));\n              jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n              jsonAnchor.download = this.modelTopologyFileName;\n              jsonAnchor.href = modelTopologyAndWeightManifestURL;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(defer(function () {\n                return jsonAnchor.dispatchEvent(new MouseEvent('click'));\n              }));\n\n            case 18:\n              if (!(modelArtifacts.weightData != null)) {\n                _context.next = 24;\n                break;\n              }\n\n              weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n              weightDataAnchor.download = this.weightDataFileName;\n              weightDataAnchor.href = weightsURL;\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(defer(function () {\n                return weightDataAnchor.dispatchEvent(new MouseEvent('click'));\n              }));\n\n            case 24:\n              return _context.abrupt(\"return\", {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n              });\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return BrowserDownloads;\n}();\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nvar BrowserFiles = function () {\n  function BrowserFiles(files) {\n    _classCallCheck(this, BrowserFiles);\n\n    if (files == null || files.length < 1) {\n      throw new Error(\"When calling browserFiles, at least 1 file is required, \" + (\"but received \" + files));\n    }\n\n    this.files = files;\n  }\n\n  _createClass(BrowserFiles, [{\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n\n      var jsonFile, weightFiles;\n      return _regeneratorRuntime.async(function load$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              jsonFile = this.files[0];\n              weightFiles = this.files.slice(1);\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var jsonReader = new FileReader();\n\n                jsonReader.onload = function (event) {\n                  var modelJSON = JSON.parse(event.target.result);\n                  var modelTopology = modelJSON.modelTopology;\n\n                  if (modelTopology == null) {\n                    reject(new Error(\"modelTopology field is missing from file \" + jsonFile.name));\n                    return;\n                  }\n\n                  if (weightFiles.length === 0) {\n                    resolve({\n                      modelTopology: modelTopology\n                    });\n                  }\n\n                  var weightsManifest = modelJSON.weightsManifest;\n\n                  if (weightsManifest == null) {\n                    reject(new Error(\"weightManifest field is missing from file \" + jsonFile.name));\n                    return;\n                  }\n\n                  var pathToFile;\n\n                  try {\n                    pathToFile = _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                  } catch (err) {\n                    reject(err);\n                    return;\n                  }\n\n                  var weightSpecs = [];\n                  var paths = [];\n                  var perFileBuffers = [];\n                  weightsManifest.forEach(function (weightsGroup) {\n                    weightsGroup.paths.forEach(function (path) {\n                      paths.push(path);\n                      perFileBuffers.push(null);\n                    });\n                    weightSpecs.push.apply(weightSpecs, _toConsumableArray(weightsGroup.weights));\n                  });\n                  weightsManifest.forEach(function (weightsGroup) {\n                    weightsGroup.paths.forEach(function (path) {\n                      var weightFileReader = new FileReader();\n\n                      weightFileReader.onload = function (event) {\n                        var weightData = event.target.result;\n                        var index = paths.indexOf(path);\n                        perFileBuffers[index] = weightData;\n\n                        if (perFileBuffers.indexOf(null) === -1) {\n                          var result = {\n                            modelTopology: modelTopology,\n                            weightSpecs: weightSpecs,\n                            weightData: concatenateArrayBuffers(perFileBuffers),\n                            format: modelJSON.format,\n                            generatedBy: modelJSON.generatedBy,\n                            convertedBy: modelJSON.convertedBy\n                          };\n\n                          if (modelJSON.signature != null) {\n                            result.signature = modelJSON.signature;\n                          }\n\n                          if (modelJSON.userDefinedMetadata != null) {\n                            result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                          }\n\n                          if (modelJSON.modelInitializer != null) {\n                            result.modelInitializer = modelJSON.modelInitializer;\n                          }\n\n                          resolve(result);\n                        }\n                      };\n\n                      weightFileReader.onerror = function (error) {\n                        return reject(\"Failed to weights data from file of path '\" + path + \"'.\");\n                      };\n\n                      weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                  });\n                };\n\n                jsonReader.onerror = function (error) {\n                  return reject(\"Failed to read model topology and weights manifest JSON \" + (\"from file '\" + jsonFile.name + \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n                };\n\n                jsonReader.readAsText(jsonFile);\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"checkManifestAndWeightFiles\",\n    value: function checkManifestAndWeightFiles(manifest, files) {\n      var basenames = [];\n      var fileNames = files.map(function (file) {\n        return basename(file.name);\n      });\n      var pathToFile = {};\n\n      for (var _iterator = _createForOfIteratorHelperLoose(manifest), _step; !(_step = _iterator()).done;) {\n        var group = _step.value;\n        group.paths.forEach(function (path) {\n          var pathBasename = basename(path);\n\n          if (basenames.indexOf(pathBasename) !== -1) {\n            throw new Error(\"Duplicate file basename found in weights manifest: \" + (\"'\" + pathBasename + \"'\"));\n          }\n\n          basenames.push(pathBasename);\n\n          if (fileNames.indexOf(pathBasename) === -1) {\n            throw new Error(\"Weight file with basename '\" + pathBasename + \"' is not provided.\");\n          } else {\n            pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n          }\n        });\n      }\n\n      if (basenames.length !== files.length) {\n        throw new Error(\"Mismatch in the number of files in weights manifest \" + (\"(\" + basenames.length + \") and the number of weight files provided \") + (\"(\" + files.length + \").\"));\n      }\n\n      return pathToFile;\n    }\n  }]);\n\n  return BrowserFiles;\n}();\n\nexport var browserDownloadsRouter = function browserDownloadsRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\nexport function browserDownloads() {\n  var fileNamePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model';\n  return new BrowserDownloads(fileNamePrefix);\n}\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["../../src/io/browser_files.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest\n            };\n            if (modelArtifacts.signature != null) {\n                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n            }\n            if (modelArtifacts.userDefinedMetadata != null) {\n                modelTopologyAndWeightManifest.userDefinedMetadata =\n                    modelArtifacts.userDefinedMetadata;\n            }\n            if (modelArtifacts.modelInitializer != null) {\n                modelTopologyAndWeightManifest.modelInitializer =\n                    modelArtifacts.modelInitializer;\n            }\n            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                this.jsonAnchor;\n            jsonAnchor.download = this.modelTopologyFileName;\n            jsonAnchor.href = modelTopologyAndWeightManifestURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.files = files;\n    }\n    async load() {\n        const jsonFile = this.files[0];\n        const weightFiles = this.files.slice(1);\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                if (weightFiles.length === 0) {\n                    resolve({ modelTopology });\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                let pathToFile;\n                try {\n                    pathToFile =\n                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                }\n                catch (err) {\n                    reject(err);\n                    return;\n                }\n                const weightSpecs = [];\n                const paths = [];\n                const perFileBuffers = [];\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                    });\n                    weightSpecs.push(...weightsGroup.weights);\n                });\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        const weightFileReader = new FileReader();\n                        weightFileReader.onload = (event) => {\n                            // tslint:disable-next-line:no-any\n                            const weightData = event.target.result;\n                            const index = paths.indexOf(path);\n                            perFileBuffers[index] = weightData;\n                            if (perFileBuffers.indexOf(null) === -1) {\n                                const result = {\n                                    modelTopology,\n                                    weightSpecs,\n                                    weightData: concatenateArrayBuffers(perFileBuffers),\n                                    format: modelJSON.format,\n                                    generatedBy: modelJSON.generatedBy,\n                                    convertedBy: modelJSON.convertedBy\n                                };\n                                if (modelJSON.signature != null) {\n                                    result.signature = modelJSON.signature;\n                                }\n                                if (modelJSON.userDefinedMetadata != null) {\n                                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                                }\n                                if (modelJSON.modelInitializer != null) {\n                                    result.modelInitializer = modelJSON.modelInitializer;\n                                }\n                                resolve(result);\n                            }\n                        };\n                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                });\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(jsonFile);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest, files) {\n        const basenames = [];\n        const fileNames = files.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${files.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=browser_files.js.map"]},"metadata":{},"sourceType":"module"}