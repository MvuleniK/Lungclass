{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from \"../../backends/non_max_suppression_impl\";\nimport { convertToTensor } from \"../../tensor_util_env\";\nimport { nonMaxSuppSanityCheck } from \"../nonmax_util\";\n\nfunction nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize) {\n  var iouThreshold,\n      scoreThreshold,\n      softNmsSigma,\n      $boxes,\n      $scores,\n      params,\n      boxesAndScores,\n      boxesVals,\n      scoresVals,\n      res,\n      _args = arguments;\n  return _regeneratorRuntime.async(function nonMaxSuppressionWithScoreAsync_$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n          scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n          softNmsSigma = _args.length > 5 && _args[5] !== undefined ? _args[5] : 0.0;\n          $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n          $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n          params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n          maxOutputSize = params.maxOutputSize;\n          iouThreshold = params.iouThreshold;\n          scoreThreshold = params.scoreThreshold;\n          softNmsSigma = params.softNmsSigma;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(Promise.all([$boxes.data(), $scores.data()]));\n\n        case 12:\n          boxesAndScores = _context.sent;\n          boxesVals = boxesAndScores[0];\n          scoresVals = boxesAndScores[1];\n          res = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n\n          if ($boxes !== boxes) {\n            $boxes.dispose();\n          }\n\n          if ($scores !== scores) {\n            $scores.dispose();\n          }\n\n          return _context.abrupt(\"return\", res);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport var nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_with_score_async.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,uBAAR;AAGA,SAAQ,eAAR;AAEA,SAAQ,qBAAR;;AA+BA,SAAe,gCAAf,CACI,KADJ,EACgC,MADhC,EAEI,aAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE2B,UAAA,YAF3B,2DAE0C,GAF1C;AAGI,UAAA,cAHJ,2DAGqB,MAAM,CAAC,iBAH5B;AAII,UAAA,YAJJ,2DAImB,GAJnB;AAKQ,UAAA,MALR,GAKiB,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CALhC;AAMQ,UAAA,OANR,GAMkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CANjC;AAQQ,UAAA,MARR,GAQiB,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,EAEhC,YAFgC,CARtC;AAWE,UAAA,aAAa,GAAG,MAAM,CAAC,aAAvB;AACA,UAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AACA,UAAA,cAAc,GAAG,MAAM,CAAC,cAAxB;AACA,UAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AAdF;AAAA,2CAgB+B,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,OAAO,CAAC,IAAR,EAAhB,CAAZ,CAhB/B;;AAAA;AAgBQ,UAAA,cAhBR;AAiBQ,UAAA,SAjBR,GAiBoB,cAAc,CAAC,CAAD,CAjBlC;AAkBQ,UAAA,UAlBR,GAkBqB,cAAc,CAAC,CAAD,CAlBnC;AAuBQ,UAAA,GAvBR,GAuBc,uBAAuB,CAC/B,SAD+B,EACpB,UADoB,EACR,aADQ,EACO,YADP,EACqB,cADrB,EAE/B,YAF+B,CAvBrC;;AA2BE,cAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,YAAA,MAAM,CAAC,OAAP;AACD;;AACD,cAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,YAAA,OAAO,CAAC,OAAR;AACD;;AAhCH,2CAiCS,GAjCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoCA,OAAO,IAAM,+BAA+B,GAAG,gCAAxC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const res = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return res;\n}\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n//# sourceMappingURL=non_max_suppression_with_score_async.js.map"]},"metadata":{},"sourceType":"module"}