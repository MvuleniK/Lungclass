{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nexport function depthwiseConv2dNative(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + (\"1. Got strides \" + strides + \" and dilations '\" + $dilations + \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);\n  var filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      dilationHeight = convInfo.dilationHeight,\n      dilationWidth = convInfo.dilationWidth,\n      padInfo = convInfo.padInfo;\n  var padLeft = padInfo.left;\n  var padTop = padInfo.top;\n  var chMul = convInfo.outChannels / convInfo.inChannels;\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xStrides[0];\n    var yOffset1 = b * y.strides[0];\n\n    for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n      var yOffset2 = yOffset1 + yR * y.strides[1];\n      var xRCorner = yR * convInfo.strideHeight - padLeft;\n\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var xR = xRCorner + wR * dilationHeight;\n\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n\n        var wOffset1 = wR * filterStrides[0];\n        var xOffset2 = xOffset1 + xR * xStrides[1];\n\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var yOffset3 = yOffset2 + yC * y.strides[2];\n          var xCCorner = yC * convInfo.strideWidth - padTop;\n\n          for (var wC = 0; wC < filterWidth; ++wC) {\n            var xC = xCCorner + wC * dilationWidth;\n\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n\n            var wOffset2 = wOffset1 + wC * filterStrides[1];\n            var xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            var yOffset4 = yOffset3;\n            var wOffset3 = wOffset2;\n\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              var xVal = xVals[xOffset3 + d1];\n\n              for (var q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport var depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNative.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'depthwiseConv2DNative');\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * y.strides[1];\n            const xRCorner = yR * convInfo.strideHeight - padLeft;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xStrides[1];\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * y.strides[2];\n                    const xCCorner = yC * convInfo.strideWidth - padTop;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                        let yOffset4 = yOffset3;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1];\n                            for (let q = 0; q < chMul; ++q) {\n                                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                            }\n                            yOffset4 += chMul;\n                            wOffset3 += chMul;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNative\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map"]},"metadata":{},"sourceType":"module"}