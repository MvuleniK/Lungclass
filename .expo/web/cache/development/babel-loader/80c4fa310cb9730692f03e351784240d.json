{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from \"./shader_compiler\";\nexport var PadProgram = _createClass(function PadProgram(xShape, paddings, constantValue) {\n  _classCallCheck(this, PadProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0] + xShape[i] + p[1];\n  });\n  var rank = xShape.length;\n  var type = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n  if (rank === 1) {\n    this.userCode = \"\\n        int start = \" + start + \";\\n        int end = \" + end + \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\" + constantValue + \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \";\n    return;\n  }\n\n  this.userCode = \"\\n      \" + type + \" start = \" + type + \"(\" + start + \");\\n      \" + type + \" end = \" + type + \"(\" + end + \");\\n\\n      void main() {\\n        \" + type + \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\" + constantValue + \"));\\n        } else {\\n          \" + type + \" coords = outC - start;\\n          setOutput(getX(\" + unpackedCoords + \"));\\n        }\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/pad_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR;AAEA,WAAa,UAAb,gBAKE,oBACI,MADJ,EACsB,QADtB,EAEI,aAFJ,EAEyB;EAAA;;EANzB,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EAOE,KAAK,WAAL,GAAmB,QAAQ,CAAC,GAAT,CACf,UAAC,CAAD,EAAI,CAAJ;IAAA,OAAU,CAAC,CAAC,CAAD,CAAD,GAAuB,MAAM,CAAC,CAAD,CAA7B,GAAmC,CAAC,CAAC,CAAD,CAA9C;EAAA,CADe,CAAnB;EAEA,IAAM,IAAI,GAAG,MAAM,CAAC,MAApB;EACA,IAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;EAEA,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;IAAA,OAAI,CAAC,CAAC,CAAD,CAAL;EAAA,CAAd,EAAwB,IAAxB,CAA6B,GAA7B,CAAd;EACA,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ;IAAA,OAAU,CAAC,CAAC,CAAD,CAAD,GAAO,MAAM,CAAC,CAAD,CAAvB;EAAA,CAAb,EAAyC,IAAzC,CAA8C,GAA9C,CAAZ;EACA,IAAM,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,IAA9D,CADJ;;EAGA,IAAI,IAAI,KAAK,CAAb,EAAgB;IACd,KAAK,QAAL,8BACgB,KADhB,6BAEc,GAFd,uJAOwB,aAPxB;IAaA;EACD;;EACD,KAAK,QAAL,gBACI,IADJ,iBACoB,IADpB,SAC4B,KAD5B,kBAEI,IAFJ,eAEkB,IAFlB,SAE0B,GAF1B,2CAKM,IALN,6IAOwB,aAPxB,yCASQ,IATR,0DAUuB,cAVvB;AAcD,CAhDH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_gpu.js.map"]},"metadata":{},"sourceType":"module"}