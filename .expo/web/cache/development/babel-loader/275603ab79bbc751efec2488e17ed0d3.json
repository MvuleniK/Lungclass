{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from \"../kernel_names\";\nimport * as broadcast_util from \"../ops/broadcast_util\";\nimport { cast } from \"../ops/cast\";\nimport { div } from \"../ops/div\";\nimport { mul } from \"../ops/mul\";\nimport { neg } from \"../ops/neg\";\nimport { reshape } from \"../ops/reshape\";\nimport { square } from \"../ops/square\";\nimport { sum } from \"../ops/sum\";\nexport var divGradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 2),\n        a = _saved[0],\n        b = _saved[1];\n\n    var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    var derA = function derA() {\n      var res = div(dy, cast(b, 'float32'));\n      var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    var derB = function derB() {\n      var res = mul(dy, cast(a, 'float32'));\n      var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      var tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/RealDiv_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR;AAEA,OAAO,KAAK,cAAZ;AACA,SAAQ,IAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,OAAR;AACA,SAAQ,MAAR;AACA,SAAQ,GAAR;AAGA,OAAO,IAAM,aAAa,GAAe;EACvC,UAAU,EAAE,OAD2B;EAEvC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;EAGvC,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;IACxC,4BAAe,KAAf;IAAA,IAAO,CAAP;IAAA,IAAU,CAAV;;IACA,IAAM,QAAQ,GACV,cAAc,CAAC,0BAAf,CAA0C,CAAC,CAAC,KAA5C,EAAmD,CAAC,CAAC,KAArD,CADJ;;IAEA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;MAChB,IAAM,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAf;MACA,IAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,CAAC,CAAC,KAAlC,EAAyC,QAAzC,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAd;MACD;;MACD,OAAO,GAAP;IACD,CAPD;;IAQA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;MAChB,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAb;MACA,IAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,CAAC,CAAC,KAAlC,EAAyC,QAAzC,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAb;MACD;;MACD,IAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;MACA,OAAO,GAAG,CAAC,GAAG,CAAC,GAAD,EAAM,IAAI,CAAC,GAAD,EAAM,SAAN,CAAV,CAAJ,CAAV;IACD,CARD;;IASA,OAAO;MAAC,CAAC,EAAE,IAAJ;MAAU,CAAC,EAAE;IAAb,CAAP;EACD;AAzBsC,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n    kernelName: RealDiv,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = div(dy, cast(b, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            let res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = reshape(sum(res, reduceAxes), b.shape);\n            }\n            const tmp = square(b);\n            return neg(div(res, cast(tmp, 'float32')));\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=RealDiv_grad.js.map"]},"metadata":{},"sourceType":"module"}