{"ast":null,"code":"import { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { conv2d } from \"./conv2d\";\nimport * as conv_util from \"./conv_util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction conv1d_(x, filter, stride, pad) {\n  var dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NWC';\n  var dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var $x = convertToTensor(x, 'x', 'conv1d');\n  var $filter = convertToTensor(filter, 'filter', 'conv1d');\n  var x3D = $x;\n  var reshapedTo3D = false;\n\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(x3D.rank === 3, function () {\n    return \"Error in conv1d: input must be rank 3, but got rank \" + x3D.rank + \".\";\n  });\n  util.assert($filter.rank === 3, function () {\n    return \"Error in conv1d: filter must be rank 3, but got rank \" + ($filter.rank + \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in conv1d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n    });\n  }\n\n  util.assert(x3D.shape[2] === $filter.shape[1], function () {\n    return \"Error in conv1d: depth of input (\" + x3D.shape[2] + \") must match \" + (\"input depth for filter \" + $filter.shape[1] + \".\");\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), function () {\n    return 'Error in conv1D: Either stride or dilation must be 1. ' + (\"Got stride \" + stride + \" and dilation '\" + dilation + \"'\");\n  });\n  util.assert(dataFormat === 'NWC', function () {\n    return \"Error in conv1d: got dataFormat of \" + dataFormat + \" but only NWC is currently supported.\";\n  });\n  var filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  var input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  var strides = [1, stride];\n  var dilations = [1, dilation];\n  var conv2dDataFormat = 'NHWC';\n  var res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]);\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\n\nexport var conv1d = op({\n  conv1d_: conv1d_\n});","map":{"version":3,"sources":["../../src/ops/conv1d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'conv1d');\n    const $filter = convertToTensor(filter, 'filter', 'conv1d');\n    let x3D = $x;\n    let reshapedTo3D = false;\n    if ($x.rank === 2) {\n        reshapedTo3D = true;\n        x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n    }\n    util.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n    util.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` +\n        `${$filter.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv1d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    util.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n        `input depth for filter ${$filter.shape[1]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n        `Got stride ${stride} and dilation '${dilation}'`);\n    util.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);\n    const filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n    const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n    const strides = [1, stride];\n    const dilations = [1, dilation];\n    const conv2dDataFormat = 'NHWC';\n    const res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n    if (reshapedTo3D) {\n        return reshape(res, [res.shape[2], res.shape[3]]);\n    }\n    return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\nexport const conv1d = op({ conv1d_ });\n//# sourceMappingURL=conv1d.js.map"]},"metadata":{},"sourceType":"module"}