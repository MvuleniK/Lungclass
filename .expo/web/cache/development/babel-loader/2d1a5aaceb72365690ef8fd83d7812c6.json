{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getChannels } from \"./packing_util\";\nimport { getCoordsDataType } from \"./shader_compiler\";\nexport var CHECK_NAN_SNIPPET = \"\\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\";\nexport var ELU_DER = \"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\";\nexport var NOT_EQUAL = \"\\n  return vec4(notEqual(a, b));\\n\";\nexport var BinaryOpPackedProgram = _createClass(function BinaryOpPackedProgram(op, aShape, bShape) {\n  var checkOutOfBounds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  _classCallCheck(this, BinaryOpPackedProgram);\n\n  this.variableNames = ['A', 'B'];\n  this.supportsBroadcasting = true;\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n  var rank = this.outputShape.length;\n  var checkOutOfBoundsString = '';\n\n  if (checkOutOfBounds) {\n    if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n      checkOutOfBoundsString = \"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";\n    } else {\n      var dtype = getCoordsDataType(rank);\n      checkOutOfBoundsString = \"\\n          \" + dtype + \" coords = getOutputCoords();\\n        \";\n\n      if (rank === 1) {\n        checkOutOfBoundsString += \"\\n            result.y = (coords + 1) >= \" + this.outputShape[0] + \" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";\n      } else {\n        var channels = getChannels('coords', rank);\n        checkOutOfBoundsString += \"\\n            bool nextRowOutOfBounds =\\n              (\" + channels[rank - 2] + \" + 1) >= \" + this.outputShape[rank - 2] + \";\\n            bool nextColOutOfBounds =\\n              (\" + channels[rank - 1] + \" + 1) >= \" + this.outputShape[rank - 1] + \";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \";\n      }\n    }\n  }\n\n  this.userCode = \"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \" + op + \"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \" + checkOutOfBoundsString + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/binaryop_packed_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,IAAtB,QAAiC,uBAAjC;AAGA,SAAQ,WAAR;AACA,SAAQ,iBAAR;AAEA,OAAO,IAAM,iBAAiB,2LAAvB;AAOP,OAAO,IAAM,OAAO,4IAAb;AAKP,OAAO,IAAM,SAAS,uCAAf;AAIP,WAAa,qBAAb,gBAQE,+BACI,EADJ,EACgB,MADhB,EACkC,MADlC,EAE4B;EAAA,IAAxB,gBAAwB,uEAAL,KAAK;;EAAA;;EAT5B,KAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;EAGA,KAAA,oBAAA,GAAuB,IAAvB;EACA,KAAA,YAAA,GAAe,IAAf;EACA,KAAA,YAAA,GAAe,IAAf;EAKE,KAAK,WAAL,GAAmB,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,MAAhD,CAAnB;EACA,IAAM,IAAI,GAAG,KAAK,WAAL,CAAiB,MAA9B;EACA,IAAI,sBAAsB,GAAG,EAA7B;;EACA,IAAI,gBAAJ,EAAsB;IACpB,IAAI,IAAI,KAAK,CAAT,IAAc,IAAI,CAAC,aAAL,CAAmB,KAAK,WAAxB,MAAyC,CAA3D,EAA8D;MAC5D,sBAAsB,6FAAtB;IAKD,CAND,MAMO;MACL,IAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,CAA/B;MACA,sBAAsB,oBAClB,KADkB,2CAAtB;;MAGA,IAAI,IAAI,KAAK,CAAb,EAAgB;QACd,sBAAsB,kDACS,KAAK,WAAL,CAAiB,CAAjB,CADT,0FAAtB;MAKD,CAND,MAMO;QACL,IAAM,QAAQ,GAAG,WAAW,CAAC,QAAD,EAAW,IAAX,CAA5B;QACA,sBAAsB,iEAEf,QAAQ,CAAC,IAAI,GAAG,CAAR,CAFO,iBAEe,KAAK,WAAL,CAAiB,IAAI,GAAG,CAAxB,CAFf,iEAIf,QAAQ,CAAC,IAAI,GAAG,CAAR,CAJO,iBAIe,KAAK,WAAL,CAAiB,IAAI,GAAG,CAAxB,CAJf,4NAAtB;MASD;IACF;EACF;;EAED,KAAK,QAAL,gEAEM,EAFN,4KAUM,sBAVN;AAeD,CA9DH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = getCoordsDataType(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                }\n                else {\n                    const channels = getChannels('coords', rank);\n                    checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}