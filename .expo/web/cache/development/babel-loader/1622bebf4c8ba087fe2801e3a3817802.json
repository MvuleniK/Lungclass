{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport \"./flags_webgl\";\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from \"./canvas_util\";\nimport { DecodeMatrixProgram } from \"./decode_matrix_gpu\";\nimport { DecodeMatrixPackedProgram } from \"./decode_matrix_packed_gpu\";\nimport { EncodeFloatProgram } from \"./encode_float_gpu\";\nimport { EncodeFloatPackedProgram } from \"./encode_float_packed_gpu\";\nimport { EncodeMatrixProgram } from \"./encode_matrix_gpu\";\nimport { EncodeMatrixPackedProgram } from \"./encode_matrix_packed_gpu\";\nimport { GPGPUContext } from \"./gpgpu_context\";\nimport * as gpgpu_math from \"./gpgpu_math\";\nimport { simpleAbsImplCPU } from \"./kernel_utils/shared\";\nimport { PackProgram } from \"./pack_gpu\";\nimport { ReshapePackedProgram } from \"./reshape_packed_gpu\";\nimport * as tex_util from \"./tex_util\";\nimport { TextureUsage } from \"./tex_util\";\nimport { TextureManager } from \"./texture_manager\";\nimport * as unary_op from \"./unaryop_gpu\";\nimport { UnaryOpProgram } from \"./unaryop_gpu\";\nimport { UnaryOpPackedProgram } from \"./unaryop_packed_gpu\";\nimport { UnpackProgram } from \"./unpack_gpu\";\nimport * as webgl_util from \"./webgl_util\";\nvar whereImpl = kernel_impls.whereImpl;\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\nvar binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\nvar CPU_HANDOFF_SIZE_THRESHOLD = 128;\nvar BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024;\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport var MathBackendWebGL = function (_KernelBackend) {\n  _inherits(MathBackendWebGL, _KernelBackend);\n\n  var _super = _createSuper(MathBackendWebGL);\n\n  function MathBackendWebGL(gpgpu) {\n    var _this;\n\n    _classCallCheck(this, MathBackendWebGL);\n\n    _this = _super.call(this);\n    _this.pendingRead = new WeakMap();\n    _this.pendingDisposal = new WeakSet();\n    _this.dataRefCount = new WeakMap();\n    _this.numBytesInGPU = 0;\n    _this.uploadWaitMs = 0;\n    _this.downloadWaitMs = 0;\n    _this.warnedAboutMemory = false;\n    _this.warnedAboutCPUBackend = false;\n    _this.pendingDeletes = 0;\n    _this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      var gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      _this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      _this.gpgpu = new GPGPUContext(gl);\n      _this.canvas = gl.canvas;\n      _this.gpgpuCreatedLocally = true;\n    } else {\n      _this.gpgpu = gpgpu;\n      _this.binaryCache = {};\n      _this.gpgpuCreatedLocally = false;\n      _this.canvas = gpgpu.gl.canvas;\n    }\n\n    _this.textureManager = new TextureManager(_this.gpgpu);\n    _this.numMBBeforeWarning = numMBBeforeWarning();\n    _this.texData = new DataStorage(_assertThisInitialized(_this), engine());\n    return _this;\n  }\n\n  _createClass(MathBackendWebGL, [{\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64' && values != null) {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      var dataId = {};\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD,\n        refCount: 1,\n        complexParentRefCount: 0\n      });\n      return dataId;\n    }\n  }, {\n    key: \"incRef\",\n    value: function incRef(dataId) {\n      var texData = this.texData.get(dataId);\n      texData.refCount++;\n    }\n  }, {\n    key: \"decRef\",\n    value: function decRef(dataId) {\n      if (this.texData.has(dataId)) {\n        var texData = this.texData.get(dataId);\n        texData.refCount--;\n      }\n    }\n  }, {\n    key: \"decComplexRef\",\n    value: function decComplexRef(dataId) {\n      if (this.texData.has(dataId)) {\n        var texData = this.texData.get(dataId);\n\n        if (texData.complexParentRefCount > 0) {\n          texData.refCount--;\n        }\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      if (env().getBool('DEBUG')) {\n        this.checkNumericalProblems(values);\n      }\n\n      if (dtype === 'complex64') {\n        throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n      }\n\n      this.texData.set(dataId, {\n        shape: shape,\n        dtype: dtype,\n        values: values,\n        usage: TextureUsage.UPLOAD,\n        refCount: 1,\n        complexParentRefCount: 0\n      });\n    }\n  }, {\n    key: \"disposeIntermediateTensorInfo\",\n    value: function disposeIntermediateTensorInfo(tensorInfo) {\n      var dataId = tensorInfo.dataId;\n\n      if (this.texData.has(dataId)) {\n        var textureData = this.texData.get(dataId);\n        textureData.refCount--;\n\n        if (textureData.refCount < 1) {\n          this.disposeData(dataId);\n        }\n      }\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      var texData = this.texData.get(dataId);\n      var values = texData.values,\n          dtype = texData.dtype,\n          complexTensorInfos = texData.complexTensorInfos,\n          slice = texData.slice,\n          shape = texData.shape,\n          isPacked = texData.isPacked;\n\n      if (slice != null) {\n        var program;\n\n        if (isPacked) {\n          program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n        } else {\n          program = new UnaryOpProgram(shape, unary_op.CLONE);\n        }\n\n        var res = this.runWebGLProgram(program, [{\n          dataId: dataId,\n          shape: shape,\n          dtype: dtype\n        }], dtype);\n        var data = this.readSync(res.dataId);\n        this.disposeIntermediateTensorInfo(res);\n        return data;\n      }\n\n      if (values != null) {\n        return this.convertAndCacheOnCPU(dataId);\n      }\n\n      if (dtype === 'string') {\n        return values;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var result;\n\n      if (dtype === 'complex64') {\n        var realValues = this.readSync(complexTensorInfos.real.dataId);\n        var imagValues = this.readSync(complexTensorInfos.imag.dataId);\n        result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      } else {\n        result = this.getValuesFromTexture(dataId);\n      }\n\n      if (shouldTimeProgram) {\n        this.downloadWaitMs += util.now() - start;\n      }\n\n      return this.convertAndCacheOnCPU(dataId, result);\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      var _subscribers, texData, values, shape, slice, dtype, complexTensorInfos, isPacked, program, res, data, buffer, tmpDownloadTarget, _this$gpgpu, tmpData, vals, ps, realValues, imagValues, size, dTypeVals, subscribers;\n\n      return _regeneratorRuntime.async(function read$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.pendingRead.has(dataId)) {\n                _context.next = 3;\n                break;\n              }\n\n              _subscribers = this.pendingRead.get(dataId);\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                return _subscribers.push(resolve);\n              }));\n\n            case 3:\n              texData = this.texData.get(dataId);\n              values = texData.values, shape = texData.shape, slice = texData.slice, dtype = texData.dtype, complexTensorInfos = texData.complexTensorInfos, isPacked = texData.isPacked;\n\n              if (!(slice != null)) {\n                _context.next = 11;\n                break;\n              }\n\n              if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n              } else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n              }\n\n              res = this.runWebGLProgram(program, [{\n                dataId: dataId,\n                shape: shape,\n                dtype: dtype\n              }], dtype);\n              data = this.read(res.dataId);\n              this.disposeIntermediateTensorInfo(res);\n              return _context.abrupt(\"return\", data);\n\n            case 11:\n              if (!(values != null)) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.convertAndCacheOnCPU(dataId));\n\n            case 13:\n              if (!(!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2)) {\n                _context.next = 15;\n                break;\n              }\n\n              throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \" + \"WEBGL_VERSION=2 not yet supported.\");\n\n            case 15:\n              buffer = null;\n\n              if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n                tmpDownloadTarget = this.decode(dataId);\n                tmpData = this.texData.get(tmpDownloadTarget.dataId);\n                buffer = (_this$gpgpu = this.gpgpu).createBufferFromTexture.apply(_this$gpgpu, [tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape))));\n              }\n\n              this.pendingRead.set(dataId, []);\n\n              if (!(dtype !== 'complex64')) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(this.gpgpu.createAndWaitForFence());\n\n            case 21:\n              if (!(dtype === 'complex64')) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]));\n\n            case 24:\n              ps = _context.sent;\n              realValues = ps[0];\n              imagValues = ps[1];\n              vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n              _context.next = 31;\n              break;\n\n            case 30:\n              if (buffer == null) {\n                vals = this.getValuesFromTexture(dataId);\n              } else {\n                size = util.sizeFromShape(shape);\n                vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n              }\n\n            case 31:\n              if (tmpDownloadTarget != null) {\n                this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n              }\n\n              dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n              subscribers = this.pendingRead.get(dataId);\n              this.pendingRead.delete(dataId);\n              subscribers.forEach(function (resolve) {\n                return resolve(dTypeVals);\n              });\n\n              if (this.pendingDisposal.has(dataId)) {\n                this.pendingDisposal.delete(dataId);\n                this.disposeData(dataId);\n                this.pendingDeletes--;\n              }\n\n              return _context.abrupt(\"return\", dTypeVals);\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync(t) {\n      var data = this.readSync(t.dataId);\n      var decodedData = data;\n\n      if (t.dtype === 'string') {\n        try {\n          decodedData = data.map(function (d) {\n            return util.decodeString(d);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode encoded string bytes into utf-8');\n        }\n      }\n\n      return buffer(t.shape, t.dtype, decodedData);\n    }\n  }, {\n    key: \"checkNumericalProblems\",\n    value: function checkNumericalProblems(values) {\n      if (values == null) {\n        return;\n      }\n\n      for (var i = 0; i < values.length; i++) {\n        var num = values[i];\n\n        if (!webgl_util.canBeRepresented(num)) {\n          if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n            throw Error(\"The value \" + num + \" cannot be represented with your \" + \"current settings. Consider enabling float32 rendering: \" + \"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n          }\n\n          throw Error(\"The value \" + num + \" cannot be represented on this device.\");\n        }\n      }\n    }\n  }, {\n    key: \"getValuesFromTexture\",\n    value: function getValuesFromTexture(dataId) {\n      var _this$texData$get = this.texData.get(dataId),\n          shape = _this$texData$get.shape,\n          dtype = _this$texData$get.dtype,\n          isPacked = _this$texData$get.isPacked;\n\n      var size = util.sizeFromShape(shape);\n\n      if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n        var _this$gpgpu2;\n\n        var tmpTarget = this.decode(dataId);\n\n        var _tmpData = this.texData.get(tmpTarget.dataId);\n\n        var _vals = (_this$gpgpu2 = this.gpgpu).downloadMatrixFromPackedTexture.apply(_this$gpgpu2, [_tmpData.texture].concat(_toConsumableArray(tex_util.getDenseTexShape(shape)))).subarray(0, size);\n\n        this.disposeIntermediateTensorInfo(tmpTarget);\n        return _vals;\n      }\n\n      var shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n      var outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n      var program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n      var output = this.runWebGLProgram(program, [{\n        shape: outputShape,\n        dtype: dtype,\n        dataId: dataId\n      }], 'float32');\n      var tmpData = this.texData.get(output.dataId);\n      var vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n      this.disposeIntermediateTensorInfo(output);\n      return vals;\n    }\n  }, {\n    key: \"time\",\n    value: function time(f) {\n      var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimerQueries, flattenedActiveTimerNames, res, kernelMs;\n      return _regeneratorRuntime.async(function time$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              oldActiveTimers = this.activeTimers;\n              newActiveTimers = [];\n              outerMostTime = false;\n\n              if (this.programTimersStack == null) {\n                this.programTimersStack = newActiveTimers;\n                outerMostTime = true;\n              } else {\n                this.activeTimers.push(newActiveTimers);\n              }\n\n              this.activeTimers = newActiveTimers;\n              f();\n              flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(function (d) {\n                return d.query;\n              })).filter(function (d) {\n                return d != null;\n              });\n              flattenedActiveTimerNames = util.flatten(this.activeTimers.map(function (d) {\n                return d.name;\n              })).filter(function (d) {\n                return d != null;\n              });\n              this.activeTimers = oldActiveTimers;\n\n              if (outerMostTime) {\n                this.programTimersStack = null;\n              }\n\n              res = {\n                uploadWaitMs: this.uploadWaitMs,\n                downloadWaitMs: this.downloadWaitMs,\n                kernelMs: null,\n                wallMs: null\n              };\n\n              if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                _context2.next = 19;\n                break;\n              }\n\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(Promise.all(flattenedActiveTimerQueries));\n\n            case 14:\n              kernelMs = _context2.sent;\n              res['kernelMs'] = util.sum(kernelMs);\n\n              res['getExtraProfileInfo'] = function () {\n                return kernelMs.map(function (d, i) {\n                  return {\n                    name: flattenedActiveTimerNames[i],\n                    ms: d\n                  };\n                }).map(function (d) {\n                  return d.name + \": \" + d.ms;\n                }).join(', ');\n              };\n\n              _context2.next = 20;\n              break;\n\n            case 19:\n              res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n              };\n\n            case 20:\n              this.uploadWaitMs = 0;\n              this.downloadWaitMs = 0;\n              return _context2.abrupt(\"return\", res);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return {\n        unreliable: false,\n        numBytesInGPU: this.numBytesInGPU,\n        numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n        numBytesInGPUFree: this.textureManager.numBytesFree\n      };\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        return this.gpgpu.beginQuery();\n      }\n\n      return {\n        startMs: util.now(),\n        endMs: null\n      };\n    }\n  }, {\n    key: \"endTimer\",\n    value: function endTimer(query) {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        this.gpgpu.endQuery();\n        return query;\n      }\n\n      query.endMs = util.now();\n      return query;\n    }\n  }, {\n    key: \"getQueryTime\",\n    value: function getQueryTime(query) {\n      var timerQuery;\n      return _regeneratorRuntime.async(function getQueryTime$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", this.gpgpu.waitForQueryAndGetTime(query));\n\n            case 2:\n              timerQuery = query;\n              return _context3.abrupt(\"return\", timerQuery.endMs - timerQuery.startMs);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      if (this.pendingDisposal.has(dataId)) {\n        return;\n      }\n\n      if (this.pendingRead.has(dataId)) {\n        this.pendingDisposal.add(dataId);\n        this.pendingDeletes++;\n        return;\n      }\n\n      if (!this.texData.has(dataId)) {\n        return;\n      }\n\n      if (this.texData.get(dataId).complexParentRefCount > 0) {\n        this.texData.get(dataId).refCount--;\n        return;\n      }\n\n      this.releaseGPUData(dataId);\n\n      var _this$texData$get2 = this.texData.get(dataId),\n          complexTensorInfos = _this$texData$get2.complexTensorInfos;\n\n      if (complexTensorInfos != null) {\n        this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n        this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n        this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n        this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n      }\n\n      this.texData.delete(dataId);\n    }\n  }, {\n    key: \"releaseGPUData\",\n    value: function releaseGPUData(dataId) {\n      var _this$texData$get3 = this.texData.get(dataId),\n          texture = _this$texData$get3.texture,\n          dtype = _this$texData$get3.dtype,\n          texShape = _this$texData$get3.texShape,\n          usage = _this$texData$get3.usage,\n          isPacked = _this$texData$get3.isPacked,\n          slice = _this$texData$get3.slice;\n\n      var key = slice && slice.origDataId || dataId;\n      var refCount = this.dataRefCount.get(key);\n\n      if (refCount > 1) {\n        this.dataRefCount.set(key, refCount - 1);\n      } else {\n        this.dataRefCount.delete(key);\n\n        if (texture != null) {\n          this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n          this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n        }\n      }\n\n      var texData = this.texData.get(dataId);\n      texData.texture = null;\n      texData.texShape = null;\n      texData.isPacked = false;\n      texData.slice = null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(dataId) {\n      this.uploadToGPU(dataId);\n      return this.texData.get(dataId).texture;\n    }\n  }, {\n    key: \"getDataInfo\",\n    value: function getDataInfo(dataId) {\n      return this.texData.get(dataId);\n    }\n  }, {\n    key: \"getCPUBackend\",\n    value: function getCPUBackend() {\n      if (!env().getBool('WEBGL_CPU_FORWARD')) {\n        return null;\n      }\n\n      if (this.cpuBackend == null) {\n        this.cpuBackend = engine().findBackend('cpu');\n      }\n\n      return this.cpuBackend;\n    }\n  }, {\n    key: \"shouldExecuteOnCPU\",\n    value: function shouldExecuteOnCPU(inputs) {\n      var _this2 = this;\n\n      var sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n      var cpuBackend = this.getCPUBackend();\n\n      if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend && cpuBackend == null) {\n        console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n        this.warnedAboutCPUBackend = true;\n      }\n\n      return cpuBackend != null && inputs.every(function (input) {\n        return _this2.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold;\n      });\n    }\n  }, {\n    key: \"getGPGPUContext\",\n    value: function getGPGPUContext() {\n      return this.gpgpu;\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n      var condVals = condition.dataSync();\n      return whereImpl(condition.shape, condVals);\n    }\n  }, {\n    key: \"packedUnaryOp\",\n    value: function packedUnaryOp(x, op, dtype) {\n      var program = new UnaryOpPackedProgram(x.shape, op);\n      return this.compileAndRun(program, [x], dtype);\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        var outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n        return this.makeOutput(x.shape, x.dtype, outValues);\n      }\n\n      if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n      }\n\n      var program = new UnaryOpProgram(x.shape, unary_op.ABS);\n      return this.compileAndRun(program, [x]);\n    }\n  }, {\n    key: \"makeTensorInfo\",\n    value: function makeTensorInfo(shape, dtype, values) {\n      var dataId;\n\n      if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n        var encodedValues = values.map(function (d) {\n          return util.encodeString(d);\n        });\n        dataId = this.write(encodedValues, shape, dtype);\n      } else {\n        dataId = this.write(values, shape, dtype);\n      }\n\n      this.texData.get(dataId).usage = null;\n      return {\n        dataId: dataId,\n        shape: shape,\n        dtype: dtype\n      };\n    }\n  }, {\n    key: \"makeOutput\",\n    value: function makeOutput(shape, dtype, values) {\n      var _this$makeTensorInfo = this.makeTensorInfo(shape, dtype, values),\n          dataId = _this$makeTensorInfo.dataId;\n\n      return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n  }, {\n    key: \"unpackTensor\",\n    value: function unpackTensor(input) {\n      var program = new UnpackProgram(input.shape);\n      return this.runWebGLProgram(program, [input], input.dtype);\n    }\n  }, {\n    key: \"packTensor\",\n    value: function packTensor(input) {\n      var program = new PackProgram(input.shape);\n      var preventEagerUnpackingOutput = true;\n      return this.runWebGLProgram(program, [input], input.dtype, null, preventEagerUnpackingOutput);\n    }\n  }, {\n    key: \"packedReshape\",\n    value: function packedReshape(input, afterShape) {\n      var input3DShape = [webgl_util.getBatchDim(input.shape)].concat(_toConsumableArray(webgl_util.getRowsCols(input.shape)));\n      var input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n      };\n      var afterShapeAs3D = [webgl_util.getBatchDim(afterShape)].concat(_toConsumableArray(webgl_util.getRowsCols(afterShape)));\n      var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n      var preventEagerUnpackingOfOutput = true;\n      var output = this.runWebGLProgram(program, [input3D], input.dtype, null, preventEagerUnpackingOfOutput);\n      return {\n        dataId: output.dataId,\n        shape: afterShape,\n        dtype: output.dtype\n      };\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(dataId) {\n      var texData = this.texData.get(dataId);\n      var isPacked = texData.isPacked,\n          shape = texData.shape,\n          dtype = texData.dtype;\n      var shapeAs3D = webgl_util.getShapeAs3D(shape);\n      var program;\n\n      if (isPacked) {\n        program = new DecodeMatrixPackedProgram(shapeAs3D);\n      } else {\n        program = new DecodeMatrixProgram(shapeAs3D);\n      }\n\n      var preventEagerUnpackingOfOutput = true;\n      var out = this.runWebGLProgram(program, [{\n        shape: shapeAs3D,\n        dtype: dtype,\n        dataId: dataId\n      }], dtype, null, preventEagerUnpackingOfOutput);\n      return {\n        dtype: dtype,\n        shape: shape,\n        dataId: out.dataId\n      };\n    }\n  }, {\n    key: \"runWebGLProgram\",\n    value: function runWebGLProgram(program, inputs, outputDtype, customSetup) {\n      var _this3 = this;\n\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var output = this.makeTensorInfo(program.outputShape, outputDtype);\n      var outData = this.texData.get(output.dataId);\n\n      if (program.packedOutput) {\n        outData.isPacked = true;\n      }\n\n      if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n        var texelShape = tex_util.getDenseTexShape(program.outputShape);\n        outData.texShape = texelShape.map(function (d) {\n          return d * 2;\n        });\n      }\n\n      if (program.outTexUsage != null) {\n        outData.usage = program.outTexUsage;\n      }\n\n      if (util.sizeFromShape(output.shape) === 0) {\n        outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n        return output;\n      }\n\n      var dataToDispose = [];\n      var inputsData = inputs.map(function (input) {\n        if (input.dtype === 'complex64') {\n          throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \" + \"dtypes, please separate the program into real and imaginary \" + \"parts.\");\n        }\n\n        var texData = _this3.texData.get(input.dataId);\n\n        if (texData.texture == null) {\n          if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n            return {\n              shape: input.shape,\n              texData: null,\n              isUniform: true,\n              uniformValues: texData.values\n            };\n          }\n\n          if (program.packedInputs) {\n            texData.isPacked = true;\n            texData.shape = input.shape;\n          }\n        } else if (!!texData.isPacked !== !!program.packedInputs) {\n          input = texData.isPacked ? _this3.unpackTensor(input) : _this3.packTensor(input);\n          dataToDispose.push(input);\n          texData = _this3.texData.get(input.dataId);\n        } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n          var savedInput = input;\n          var targetShape = input.shape;\n          input.shape = texData.shape;\n          input = _this3.packedReshape(input, targetShape);\n          dataToDispose.push(input);\n          texData = _this3.texData.get(input.dataId);\n          savedInput.shape = targetShape;\n        }\n\n        _this3.uploadToGPU(input.dataId);\n\n        return {\n          shape: input.shape,\n          texData: texData,\n          isUniform: false\n        };\n      });\n      this.uploadToGPU(output.dataId);\n      var outputData = {\n        shape: output.shape,\n        texData: outData,\n        isUniform: false\n      };\n      var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n      var binary = this.getAndSaveBinary(key, function () {\n        return gpgpu_math.compileProgram(_this3.gpgpu, program, inputsData, outputData);\n      });\n      var shouldTimeProgram = this.activeTimers != null;\n      var query;\n\n      if (shouldTimeProgram) {\n        query = this.startTimer();\n      }\n\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n      dataToDispose.forEach(function (info) {\n        return _this3.disposeIntermediateTensorInfo(info);\n      });\n\n      if (shouldTimeProgram) {\n        query = this.endTimer(query);\n        this.activeTimers.push({\n          name: program.constructor.name,\n          query: this.getQueryTime(query)\n        });\n      }\n\n      if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n        var unpacked = this.unpackTensor(output);\n        this.disposeIntermediateTensorInfo(output);\n        return unpacked;\n      }\n\n      return output;\n    }\n  }, {\n    key: \"compileAndRun\",\n    value: function compileAndRun(program, inputs, outputDtype, customSetup) {\n      var preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      outputDtype = outputDtype || inputs[0].dtype;\n      var outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n      return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n  }, {\n    key: \"getAndSaveBinary\",\n    value: function getAndSaveBinary(key, getBinary) {\n      if (!(key in this.binaryCache)) {\n        this.binaryCache[key] = getBinary();\n      }\n\n      return this.binaryCache[key];\n    }\n  }, {\n    key: \"getTextureManager\",\n    value: function getTextureManager() {\n      return this.textureManager;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this4 = this;\n\n      if (this.disposed) {\n        return;\n      }\n\n      if (!env().getBool('IS_TEST')) {\n        var allKeys = Object.keys(this.binaryCache);\n        allKeys.forEach(function (key) {\n          _this4.gpgpu.deleteProgram(_this4.binaryCache[key].webGLProgram);\n\n          delete _this4.binaryCache[key];\n        });\n      }\n\n      this.textureManager.dispose();\n\n      if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n        this.canvas.remove();\n      } else {\n        this.canvas = null;\n      }\n\n      if (this.gpgpuCreatedLocally) {\n        this.gpgpu.program = null;\n        this.gpgpu.dispose();\n      }\n\n      this.disposed = true;\n    }\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      var _this5 = this;\n\n      if (this.floatPrecisionValue == null) {\n        this.floatPrecisionValue = tidy(function () {\n          if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n            var debugFlag = env().getBool('DEBUG');\n            env().set('DEBUG', false);\n\n            var underflowCheckValue = _this5.abs(scalar(1e-8)).dataSync()[0];\n\n            env().set('DEBUG', debugFlag);\n\n            if (underflowCheckValue > 0) {\n              return 32;\n            }\n          }\n\n          return 16;\n        });\n      }\n\n      return this.floatPrecisionValue;\n    }\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"uploadToGPU\",\n    value: function uploadToGPU(dataId) {\n      var texData = this.texData.get(dataId);\n      var shape = texData.shape,\n          dtype = texData.dtype,\n          values = texData.values,\n          texture = texData.texture,\n          usage = texData.usage,\n          isPacked = texData.isPacked;\n\n      if (texture != null) {\n        return;\n      }\n\n      var shouldTimeProgram = this.activeTimers != null;\n      var start;\n\n      if (shouldTimeProgram) {\n        start = util.now();\n      }\n\n      var texShape = texData.texShape;\n\n      if (texShape == null) {\n        texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n        texData.texShape = texShape;\n      }\n\n      if (values != null) {\n        var shapeAs3D = webgl_util.getShapeAs3D(shape);\n        var program;\n        var width = texShape[1],\n            height = texShape[0];\n        var isByteArray = values instanceof Uint8Array;\n\n        if (isPacked) {\n          var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n\n          var _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2);\n\n          width = _tex_util$getPackedMa2[0];\n          height = _tex_util$getPackedMa2[1];\n          program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n        } else {\n          program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n        }\n\n        var tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n        if (isByteArray) {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n        } else {\n          this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n        }\n\n        this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n        var preventEagerUnpacking = true;\n        var encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n        var outputTexData = this.texData.get(encodedOutputTarget.dataId);\n        texData.texture = outputTexData.texture;\n        texData.texShape = outputTexData.texShape;\n        texData.isPacked = outputTexData.isPacked;\n        texData.usage = outputTexData.usage;\n        this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n        this.texData.delete(encodedOutputTarget.dataId);\n        texData.values = null;\n\n        if (shouldTimeProgram) {\n          this.uploadWaitMs += util.now() - start;\n        }\n      } else {\n        var newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n        texData.texture = newTexture;\n      }\n    }\n  }, {\n    key: \"convertAndCacheOnCPU\",\n    value: function convertAndCacheOnCPU(dataId, float32Values) {\n      var texData = this.texData.get(dataId);\n      var dtype = texData.dtype;\n      this.releaseGPUData(dataId);\n\n      if (float32Values != null) {\n        texData.values = float32ToTypedArray(float32Values, dtype);\n      }\n\n      return texData.values;\n    }\n  }, {\n    key: \"acquireTexture\",\n    value: function acquireTexture(texShape, texType, dtype, isPacked) {\n      this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n      if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n        var mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n        this.warnedAboutMemory = true;\n        console.warn(\"High memory usage in GPU: \" + mb + \" MB, \" + \"most likely due to a memory leak\");\n      }\n\n      return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n  }, {\n    key: \"computeBytes\",\n    value: function computeBytes(shape, dtype) {\n      return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n  }]);\n\n  return MathBackendWebGL;\n}(KernelBackend);\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(\"Unknown dtype \" + dtype);\n  }\n}","map":{"version":3,"sources":["../src/backend_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n        return dataId;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    /**\n     * Decrease refCount of a `TextureData` if it is a component of complex\n     * tensor.\n     */\n    decComplexRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            if (texData.complexParentRefCount > 0) {\n                texData.refCount--;\n            }\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.texData.has(dataId)) {\n            const textureData = this.texData.get(dataId);\n            textureData.refCount--;\n            if (textureData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        // Trying to dispose a textureData that has a 'kept' refCount, e.g. trying\n        // to dispose a tensor whose data bucket is shared with a complex tensor. In\n        // this case we are removing a reference to the textureData, but we\n        // shouldn't actually dispose the texture.\n        if (this.texData.get(dataId).complexParentRefCount > 0) {\n            this.texData.get(dataId).refCount--;\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n            this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map"]},"metadata":{},"sourceType":"module"}