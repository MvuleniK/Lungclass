{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport var complexAbs = function complexAbs(args) {\n  var x = args.inputs.x;\n  var cpuBackend = args.backend;\n  var resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  var complexVals = cpuBackend.data.get(x.dataId);\n  var real = complexVals.complexTensorInfos.real;\n  var imag = complexVals.complexTensorInfos.imag;\n  var realVals = cpuBackend.data.get(real.dataId).values;\n  var imagVals = cpuBackend.data.get(imag.dataId).values;\n\n  for (var i = 0; i < realVals.length; i++) {\n    var _real = realVals[i];\n    var _imag = imagVals[i];\n    resultValues[i] = Math.hypot(_real, _imag);\n  }\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport var complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs\n};","map":{"version":3,"sources":["../../src/kernels/ComplexAbs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAR,EAAgE,IAAhE,QAA2E,uBAA3E;AAIA,OAAO,IAAM,UAAU,GACnB,SADS,UACT,CAAC,IAAD,EAA8D;EAC5D,IAAO,CAAP,GAAY,IAAI,CAAC,MAAjB,CAAO,CAAP;EACA,IAAM,UAAU,GAAG,IAAI,CAAC,OAAxB;EACA,IAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAjB,CAArB;EACA,IAAM,WAAW,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAApB;EACA,IAAM,IAAI,GAAG,WAAW,CAAC,kBAAZ,CAA+B,IAA5C;EACA,IAAM,IAAI,GAAG,WAAW,CAAC,kBAAZ,CAA+B,IAA5C;EACA,IAAM,QAAQ,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,IAAI,CAAC,MAAzB,EAAiC,MAAlD;EACA,IAAM,QAAQ,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,IAAI,CAAC,MAAzB,EAAiC,MAAlD;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,IAAM,KAAI,GAAG,QAAQ,CAAC,CAAD,CAArB;IACA,IAAM,KAAI,GAAG,QAAQ,CAAC,CAAD,CAArB;IACA,YAAY,CAAC,CAAD,CAAZ,GAAkB,IAAI,CAAC,KAAL,CAAW,KAAX,EAAiB,KAAjB,CAAlB;EACD;;EAED,OAAO,UAAU,CAAC,UAAX,CAAsB,YAAtB,EAAoC,CAAC,CAAC,KAAtC,EAA6C,SAA7C,CAAP;AACD,CAjBE;AAmBP,OAAO,IAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UADgC;EAE5C,WAAW,EAAE,KAF+B;EAG5C,UAAU,EAAE;AAHgC,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const complexVals = cpuBackend.data.get(x.dataId);\n    const real = complexVals.complexTensorInfos.real;\n    const imag = complexVals.complexTensorInfos.imag;\n    const realVals = cpuBackend.data.get(real.dataId).values;\n    const imagVals = cpuBackend.data.get(imag.dataId).values;\n    for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'cpu',\n    kernelFunc: complexAbs,\n};\n//# sourceMappingURL=ComplexAbs.js.map"]},"metadata":{},"sourceType":"module"}