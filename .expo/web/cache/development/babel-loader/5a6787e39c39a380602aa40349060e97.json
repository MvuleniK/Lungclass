{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from \"../datasource\";\nimport { FileChunkIterator } from \"../iterators/file_chunk_iterator\";\nimport { isLocalPath } from \"../util/source_util\";\nexport var FileDataSource = function (_DataSource) {\n  _inherits(FileDataSource, _DataSource);\n\n  var _super = _createSuper(FileDataSource);\n\n  function FileDataSource(input) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FileDataSource);\n\n    _this = _super.call(this);\n    _this.input = input;\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(FileDataSource, [{\n    key: \"iterator\",\n    value: function iterator() {\n      var fs;\n      return _regeneratorRuntime.async(function iterator$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isLocalPath(this.input) && env().get('IS_NODE')) {\n                fs = require('fs');\n                this.input = fs.readFileSync(this.input.substr(7));\n              }\n\n              return _context.abrupt(\"return\", new FileChunkIterator(this.input, this.options));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return FileDataSource;\n}(DataSource);","map":{"version":3,"sources":["../../src/sources/file_data_source.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAR,QAAkB,uBAAlB;AACA,SAAQ,UAAR;AAEA,SAAQ,iBAAR;AAEA,SAAQ,WAAR;AAMA,WAAa,cAAb;EAAA;;EAAA;;EASE,wBACc,KADd,EAE6D;IAAA;;IAAA,IAAtC,OAAsC,uEAAF,EAAE;;IAAA;;IAC3D;IAFY,MAAA,KAAA,GAAA,KAAA;IACS,MAAA,OAAA,GAAA,OAAA;IAAsC;EAE5D;;EAbH;IAAA;IAAA,OAeE;MAAA;MAAA;QAAA;UAAA;YAAA;cACE,IAAI,WAAW,CAAC,KAAK,KAAN,CAAX,IAA2B,GAAG,GAAG,GAAN,CAAU,SAAV,CAA/B,EAAqD;gBAE7C,EAF6C,GAExC,OAAO,CAAC,IAAD,CAFiC;gBAGnD,KAAK,KAAL,GAAa,EAAE,CAAC,YAAH,CAAiB,KAAK,KAAL,CAAsB,MAAtB,CAA6B,CAA7B,CAAjB,CAAb;cACD;;cALH,iCAQS,IAAI,iBAAJ,CAAsB,KAAK,KAA3B,EAAiD,KAAK,OAAtD,CART;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAfF;;EAAA;AAAA,EAAoC,UAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.substr(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n//# sourceMappingURL=file_data_source.js.map"]},"metadata":{},"sourceType":"module"}