{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from \"../binaryop_gpu\";\nimport { BinaryOpPackedProgram } from \"../binaryop_packed_gpu\";\nimport { complex } from \"../kernels/Complex\";\nimport { LEAKYRELU, LEAKYRELU_PACKED } from \"../kernels/LeakyRelu\";\nimport { PRELU, PRELU_PACKED } from \"../kernels/Prelu\";\nimport * as unary_op from \"../unaryop_gpu\";\nimport { UnaryOpProgram } from \"../unaryop_gpu\";\nimport * as unary_packed_op from \"../unaryop_packed_gpu\";\nimport { UnaryOpPackedProgram } from \"../unaryop_packed_gpu\";\nexport var CHECK_NAN_SNIPPET_UNARY = \"if (isnan(x)) return x;\";\nexport var CHECK_NAN_SNIPPET_BINARY = \"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\";\nexport var CHECK_NAN_SNIPPET_BINARY_PACKED = \"\\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\";\nexport function unaryKernelFunc(_ref) {\n  var opSnippet = _ref.opSnippet,\n      packedOpSnippet = _ref.packedOpSnippet,\n      cpuKernelImpl = _ref.cpuKernelImpl,\n      dtype = _ref.dtype;\n  return function (_ref2) {\n    var inputs = _ref2.inputs,\n        backend = _ref2.backend;\n    var x = inputs.x;\n    var webglBackend = backend;\n    var $dtype = dtype || x.dtype;\n\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      var xData = webglBackend.texData.get(x.dataId);\n      var outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    var shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    var program;\n\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\nexport function binaryKernelFunc(_ref3) {\n  var opSnippet = _ref3.opSnippet,\n      packedOpSnippet = _ref3.packedOpSnippet,\n      _ref3$checkOutOfBound = _ref3.checkOutOfBounds,\n      checkOutOfBounds = _ref3$checkOutOfBound === void 0 ? false : _ref3$checkOutOfBound,\n      _ref3$supportsComplex = _ref3.supportsComplex,\n      supportsComplex = _ref3$supportsComplex === void 0 ? false : _ref3$supportsComplex,\n      cpuKernelImpl = _ref3.cpuKernelImpl,\n      dtype = _ref3.dtype;\n  return function (_ref4) {\n    var inputs = _ref4.inputs,\n        backend = _ref4.backend;\n    var a = inputs.a,\n        b = inputs.b;\n    var webglBackend = backend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      var aData = webglBackend.texData.get(a.dataId);\n      var bData = webglBackend.texData.get(b.dataId);\n\n      var _map = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(function (complexParts) {\n        var _complexParts = _slicedToArray(complexParts, 2),\n            aPart = _complexParts[0],\n            bPart = _complexParts[1];\n\n        var aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        var bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n        var program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      }),\n          _map2 = _slicedToArray(_map, 2),\n          real = _map2[0],\n          imag = _map2[1];\n\n      var complexOutput = complex({\n        inputs: {\n          real: real,\n          imag: imag\n        },\n        backend: webglBackend\n      });\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n      return complexOutput;\n    }\n\n    var $dtype = dtype || upcastType(a.dtype, b.dtype);\n\n    if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n      var _aData = webglBackend.texData.get(a.dataId);\n\n      var _bData = webglBackend.texData.get(b.dataId);\n\n      var _cpuKernelImpl = cpuKernelImpl(a.shape, b.shape, _aData.values, _bData.values, $dtype),\n          _cpuKernelImpl2 = _slicedToArray(_cpuKernelImpl, 2),\n          outValues = _cpuKernelImpl2[0],\n          outShape = _cpuKernelImpl2[1];\n\n      var out = webglBackend.makeTensorInfo(outShape, $dtype);\n      var outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    var shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;\n    var program;\n\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nexport function mapActivationToShaderProgram(activation) {\n  var packed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n\n    return LEAKYRELU;\n  }\n\n  throw new Error(\"Activation \" + activation + \" has not been implemented for the WebGL backend.\");\n}","map":{"version":3,"sources":["../../src/kernel_utils/kernel_funcs_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, aData.values, bData.values, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n//# sourceMappingURL=kernel_funcs_utils.js.map"]},"metadata":{},"sourceType":"module"}