{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from \"../segment_gpu\";\nimport { range } from \"./Range\";\nimport { reshape } from \"./Reshape\";\nimport { tile } from \"./Tile\";\nimport { transpose } from \"./Transpose\";\nexport function unsortedSegmentSum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      segmentIds = inputs.segmentIds;\n  var numSegments = attrs.numSegments;\n  var xRank = x.shape.length;\n  var toDispose = [];\n  var axis = 0;\n  var permutation = backend_util.getAxesPermutation([axis], xRank);\n  var permutedX = x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  var outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  var inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  var a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend: backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  var outputDType = sumOutType(x.dtype);\n\n  var segOpCompute = function segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n    var batchSize = x.shape[0];\n    var inSize = x.shape[1];\n    var windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    var segOpInfo = {\n      windowSize: windowSize,\n      inSize: inSize,\n      batchSize: batchSize,\n      numSegments: numSegments\n    };\n    var program = new SegmentOpProgram(segOpInfo, segOpType);\n    var output = backend.compileAndRun(program, [x, segmentIds], dtype);\n    toDispose.push(output);\n\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n\n    var rangeInfo = range({\n      backend: backend,\n      attrs: {\n        start: 0,\n        stop: numSegments,\n        step: 1,\n        dtype: 'float32'\n      }\n    });\n    var tileInfo = tile({\n      inputs: {\n        x: rangeInfo\n      },\n      backend: backend,\n      attrs: {\n        reps: [inSize / windowSize]\n      }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    var result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n    return result;\n  };\n\n  var segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n  var reshaped = reshape({\n    inputs: {\n      x: segOpResult\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  var result = reshaped;\n\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    var perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        perm: perm\n      }\n    });\n  }\n\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum\n};","map":{"version":3,"sources":["../../src/kernels/UnsortedSegmentSum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        toDispose.push(permutedX);\n        axis = backend_util.getInnerMostAxes(1, xRank)[0];\n    }\n    const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    toDispose.push(a2D);\n    const outputDType = sumOutType(x.dtype);\n    const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        const rangeInfo = range({\n            backend,\n            attrs: { start: 0, stop: numSegments, step: 1, dtype: 'float32' }\n        });\n        const tileInfo = tile({\n            inputs: { x: rangeInfo },\n            backend,\n            attrs: { reps: [inSize / windowSize] }\n        });\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n        const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n    };\n    const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n    const reshaped = reshape({ inputs: { x: segOpResult }, backend, attrs: { shape: outShape } });\n    let result = reshaped;\n    if (permutation != null) {\n        toDispose.push(reshaped);\n        const perm = backend_util.getUndoAxesPermutation(permutation);\n        result = transpose({ inputs: { x: result }, backend, attrs: { perm } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: unsortedSegmentSum\n};\n//# sourceMappingURL=UnsortedSegmentSum.js.map"]},"metadata":{},"sourceType":"module"}