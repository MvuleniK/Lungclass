{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from \"../conv_gpu_depthwise\";\nimport { DepthwiseConvPacked2DProgram } from \"../conv_packed_gpu_depthwise\";\nexport function depthwiseConv2dNative(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + (\"1. Got strides \" + strides + \" and dilations '\" + $dilations + \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);\n  var program;\n\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport var depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNative.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,qBAAtB,EAAsG,GAAtG,EAAqI,IAArI,QAAgJ,uBAAhJ;AAGA,SAAQ,sBAAR;AACA,SAAQ,4BAAR;AAEA,OAAM,SAAU,qBAAV,CAAgC,IAAhC,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAoB,MAApB,CAAO,CAAP;EAAA,IAAU,MAAV,GAAoB,MAApB,CAAU,MAAV;EACA,IAAO,OAAP,GAAmD,KAAnD,CAAO,OAAP;EAAA,IAAgB,GAAhB,GAAmD,KAAnD,CAAgB,GAAhB;EAAA,IAAqB,SAArB,GAAmD,KAAnD,CAAqB,SAArB;EAAA,IAAgC,eAAhC,GAAmD,KAAnD,CAAgC,eAAhC;EAEA,IAAI,UAAU,GAAG,SAAjB;;EACA,IAAI,UAAU,IAAI,IAAlB,EAAwB;IACtB,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;EACD;;EAED,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,UAArD,CADJ,EAEI;IAAA,OAAM,wFACgB,OADhB,wBAC0C,UAD1C,OAAN;EAAA,CAFJ;EAKA,IAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EAEb,MAAM,CAAC,KAFM,EAEqC,OAFrC,EAE8C,UAF9C,EAGb,GAHa,EAGR,eAHQ,EAGS,IAHT,CAAjB;EAKA,IAAI,OAAJ;;EACA,IAAI,GAAG,GAAG,OAAN,CAAc,0BAAd,KAA6C,QAAQ,CAAC,WAAT,IAAwB,CAArE,IACA,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAhC,KAA+C,CADnD,EACsD;IACpD,OAAO,GAAG,IAAI,4BAAJ,CAAiC,QAAjC,CAAV;EACD,CAHD,MAGO;IACL,OAAO,GAAG,IAAI,sBAAJ,CAA2B,QAA3B,CAAV;EACD;;EAED,OAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,EAA8C,SAA9C,CAAP;AACD;AAED,OAAO,IAAM,2BAA2B,GAAiB;EACvD,UAAU,EAAE,qBAD2C;EAEvD,WAAW,EAAE,OAF0C;EAGvD,UAAU,EAAE;AAH2C,CAAlD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    let program;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new DepthwiseConvPacked2DProgram(convInfo);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo);\n    }\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNative,\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map"]},"metadata":{},"sourceType":"module"}