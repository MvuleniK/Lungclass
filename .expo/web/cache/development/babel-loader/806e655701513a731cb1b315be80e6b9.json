{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from \"../kernel_names\";\nimport * as broadcast_util from \"../ops/broadcast_util\";\nimport { cast } from \"../ops/cast\";\nimport { greater } from \"../ops/greater\";\nimport { log } from \"../ops/log\";\nimport { mul } from \"../ops/mul\";\nimport { pow } from \"../ops/pow\";\nimport { reshape } from \"../ops/reshape\";\nimport { scalar } from \"../ops/scalar\";\nimport { sub } from \"../ops/sub\";\nimport { sum } from \"../ops/sum\";\nimport { where } from \"../ops/where\";\nimport { zerosLike } from \"../ops/zeros_like\";\nexport var powGradConfig = {\n  kernelName: Pow,\n  inputsToSave: ['a', 'b'],\n  outputsToSave: [true],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 3),\n        a = _saved[0],\n        b = _saved[1],\n        y = _saved[2];\n\n    var base = a;\n    var exp = b;\n    var outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n\n    var derBase = function derBase() {\n      var expFloat = cast(exp, 'float32');\n      var res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      var reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, base.shape);\n    };\n\n    var derExp = function derExp() {\n      var condition = greater(base, 0);\n      var logBase = where(condition, log(base), zerosLike(base));\n      var res = mul(dy, mul(y, logBase));\n      var reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, exp.shape);\n    };\n\n    return {\n      a: derBase,\n      b: derExp\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Pow_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR;AAEA,OAAO,KAAK,cAAZ;AACA,SAAQ,IAAR;AACA,SAAQ,OAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,OAAR;AACA,SAAQ,MAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,KAAR;AACA,SAAQ,SAAR;AAGA,OAAO,IAAM,aAAa,GAAe;EACvC,UAAU,EAAE,GAD2B;EAEvC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;EAGvC,aAAa,EAAE,CAAC,IAAD,CAHwB;EAIvC,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;IACxC,4BAAkB,KAAlB;IAAA,IAAO,CAAP;IAAA,IAAU,CAAV;IAAA,IAAa,CAAb;;IACA,IAAM,IAAI,GAAG,CAAb;IACA,IAAM,GAAG,GAAG,CAAZ;IACA,IAAM,QAAQ,GACV,cAAc,CAAC,0BAAf,CAA0C,IAAI,CAAC,KAA/C,EAAsD,GAAG,CAAC,KAA1D,CADJ;;IAGA,IAAM,OAAO,GAAG,SAAV,OAAU,GAAK;MACnB,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAD,EAAM,SAAN,CAArB;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,QAAD,EAAW,GAAG,CAAC,IAAD,EAAO,GAAG,CAAC,QAAD,EAAW,MAAM,CAAC,CAAD,CAAjB,CAAV,CAAd,CAAR,CAAb;MACA,IAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,IAAI,CAAC,KAArC,EAA4C,QAA5C,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,IAAI,CAAC,KAAX,CAAd;IACD,CARD;;IASA,IAAM,MAAM,GAAG,SAAT,MAAS,GAAK;MAClB,IAAM,SAAS,GAAG,OAAO,CAAC,IAAD,EAAO,CAAP,CAAzB;MACA,IAAM,OAAO,GAAG,KAAK,CAAC,SAAD,EAAY,GAAG,CAAC,IAAD,CAAf,EAAuB,SAAS,CAAC,IAAD,CAAhC,CAArB;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,OAAJ,CAAR,CAAb;MACA,IAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,GAAG,CAAC,KAApC,EAA2C,QAA3C,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,GAAG,CAAC,KAAV,CAAd;IACD,CATD;;IAUA,OAAO;MAAC,CAAC,EAAE,OAAJ;MAAa,CAAC,EAAE;IAAhB,CAAP;EACD;AA/BsC,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { greater } from '../ops/greater';\nimport { log } from '../ops/log';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { reshape } from '../ops/reshape';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const powGradConfig = {\n    kernelName: Pow,\n    inputsToSave: ['a', 'b'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [a, b, y] = saved;\n        const base = a;\n        const exp = b;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n        const derBase = () => {\n            const expFloat = cast(exp, 'float32');\n            let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n            const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, base.shape);\n        };\n        const derExp = () => {\n            const condition = greater(base, 0);\n            const logBase = where(condition, log(base), zerosLike(base));\n            let res = mul(dy, mul(y, logBase));\n            const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, exp.shape);\n        };\n        return { a: derBase, b: derExp };\n    }\n};\n//# sourceMappingURL=Pow_grad.js.map"]},"metadata":{},"sourceType":"module"}