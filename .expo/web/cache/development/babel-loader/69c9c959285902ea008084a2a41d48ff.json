{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Select } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { assert, assertShapesMatch } from \"../util\";\nimport { broadcastTo } from \"./broadcast_to\";\nimport { assertAndGetBroadcastShape } from \"./broadcast_util\";\nimport { op } from \"./operation\";\n\nfunction where_(condition, a, b) {\n  var $a = convertToTensor(a, 'a', 'where');\n  var $b = convertToTensor(b, 'b', 'where');\n  var $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n  var broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\n  var $broadcastedA = broadcastTo($a, broadcastShape);\n  var $broadcastedB = broadcastTo($b, broadcastShape);\n\n  if ($condition.rank === 1) {\n    assert($condition.shape[0] === $a.shape[0], function () {\n      return 'The first dimension of `a` must match the size of `condition`.';\n    });\n  }\n\n  if ($condition.rank !== 1) {\n    assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\n  }\n\n  var inputs = {\n    condition: $condition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernel(Select, inputs);\n}\n\nexport var where = op({\n  where_: where_\n});","map":{"version":3,"sources":["../../src/ops/where.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,MAAR;AAGA,SAAQ,eAAR;AAEA,SAAQ,MAAR,EAAgB,iBAAhB;AAEA,SAAQ,WAAR;AACA,SAAQ,0BAAR;AACA,SAAQ,EAAR;;AAyBA,SAAS,MAAT,CACI,SADJ,EACkC,CADlC,EACmD,CADnD,EACkE;EAChE,IAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;EACA,IAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;EACA,IAAM,UAAU,GAAG,eAAe,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,MAAlC,CAAlC;EAIA,IAAM,cAAc,GAAG,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAAjD;EACA,IAAM,aAAa,GAAG,WAAW,CAAC,EAAD,EAAK,cAAL,CAAjC;EACA,IAAM,aAAa,GAAG,WAAW,CAAC,EAAD,EAAK,cAAL,CAAjC;;EACA,IAAI,UAAU,CAAC,IAAX,KAAoB,CAAxB,EAA2B;IAGzB,MAAM,CACF,UAAU,CAAC,KAAX,CAAiB,CAAjB,MAAwB,EAAE,CAAC,KAAH,CAAS,CAAT,CADtB,EAEF;MAAA,OAAM,gEAAN;IAAA,CAFE,CAAN;EAGD;;EAED,IAAI,UAAU,CAAC,IAAX,KAAoB,CAAxB,EAA2B;IAEzB,iBAAiB,CACb,UAAU,CAAC,KADE,EACK,aAAa,CAAC,KADnB,EAC0B,kBAD1B,CAAjB;EAED;;EAED,IAAM,MAAM,GAAiB;IAC3B,SAAS,EAAE,UADgB;IAE3B,CAAC,EAAE,aAFwB;IAG3B,CAAC,EAAE;EAHwB,CAA7B;EAKA,OAAO,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB,MAAzB,CAAP;AACD;;AAED,OAAO,IAAM,KAAK,GAAG,EAAE,CAAC;EAAC,MAAM,EAAN;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Select } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch } from '../util';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_(condition, a, b) {\n    const $a = convertToTensor(a, 'a', 'where');\n    const $b = convertToTensor(b, 'b', 'where');\n    const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n    // TODO: move this logic to forward function when the broadcastTo op is\n    // implemented in WASM.\n    // Find the broadcastable shape for $a and $b.\n    const broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\n    const $broadcastedA = broadcastTo($a, broadcastShape);\n    const $broadcastedB = broadcastTo($b, broadcastShape);\n    if ($condition.rank === 1) {\n        // If condition rank is 1, then the first dimension must match the size of\n        // condition.\n        assert($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');\n    }\n    if ($condition.rank !== 1) {\n        // A must have the same shape as condition.\n        assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\n    }\n    const inputs = {\n        condition: $condition,\n        t: $broadcastedA,\n        e: $broadcastedB\n    };\n    return ENGINE.runKernel(Select, inputs);\n}\nexport const where = op({ where_ });\n//# sourceMappingURL=where.js.map"]},"metadata":{},"sourceType":"module"}