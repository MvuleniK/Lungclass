{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from \"./backend/common\";\nimport { deserializeKerasObject, serializeKerasObject } from \"./utils/generic_utils\";\n\nfunction calcL2Norms(w, axis) {\n  return tidy(function () {\n    return tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true));\n  });\n}\n\nexport var Constraint = function (_serialization$Serial) {\n  _inherits(Constraint, _serialization$Serial);\n\n  var _super = _createSuper(Constraint);\n\n  function Constraint() {\n    _classCallCheck(this, Constraint);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Constraint, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n\n  return Constraint;\n}(serialization.Serializable);\nexport var MaxNorm = function (_Constraint) {\n  _inherits(MaxNorm, _Constraint);\n\n  var _super2 = _createSuper(MaxNorm);\n\n  function MaxNorm(args) {\n    var _this;\n\n    _classCallCheck(this, MaxNorm);\n\n    _this = _super2.call(this);\n    _this.defaultMaxValue = 2;\n    _this.defaultAxis = 0;\n    _this.maxValue = args.maxValue != null ? args.maxValue : _this.defaultMaxValue;\n    _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n    return _this;\n  }\n\n  _createClass(MaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this2 = this;\n\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this2.axis);\n        var desired = tfc.clipByValue(norms, 0, _this2.maxValue);\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        maxValue: this.maxValue,\n        axis: this.axis\n      };\n    }\n  }]);\n\n  return MaxNorm;\n}(Constraint);\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport var UnitNorm = function (_Constraint2) {\n  _inherits(UnitNorm, _Constraint2);\n\n  var _super3 = _createSuper(UnitNorm);\n\n  function UnitNorm(args) {\n    var _this3;\n\n    _classCallCheck(this, UnitNorm);\n\n    _this3 = _super3.call(this);\n    _this3.defaultAxis = 0;\n    _this3.axis = args.axis != null ? args.axis : _this3.defaultAxis;\n    return _this3;\n  }\n\n  _createClass(UnitNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this4 = this;\n\n      return tidy(function () {\n        return tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, _this4.axis)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        axis: this.axis\n      };\n    }\n  }]);\n\n  return UnitNorm;\n}(Constraint);\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport var NonNeg = function (_Constraint3) {\n  _inherits(NonNeg, _Constraint3);\n\n  var _super4 = _createSuper(NonNeg);\n\n  function NonNeg() {\n    _classCallCheck(this, NonNeg);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(NonNeg, [{\n    key: \"apply\",\n    value: function apply(w) {\n      return tfc.relu(w);\n    }\n  }]);\n\n  return NonNeg;\n}(Constraint);\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport var MinMaxNorm = function (_Constraint4) {\n  _inherits(MinMaxNorm, _Constraint4);\n\n  var _super5 = _createSuper(MinMaxNorm);\n\n  function MinMaxNorm(args) {\n    var _this5;\n\n    _classCallCheck(this, MinMaxNorm);\n\n    _this5 = _super5.call(this);\n    _this5.defaultMinValue = 0.0;\n    _this5.defaultMaxValue = 1.0;\n    _this5.defaultRate = 1.0;\n    _this5.defaultAxis = 0;\n    _this5.minValue = args.minValue != null ? args.minValue : _this5.defaultMinValue;\n    _this5.maxValue = args.maxValue != null ? args.maxValue : _this5.defaultMaxValue;\n    _this5.rate = args.rate != null ? args.rate : _this5.defaultRate;\n    _this5.axis = args.axis != null ? args.axis : _this5.defaultAxis;\n    return _this5;\n  }\n\n  _createClass(MinMaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this6 = this;\n\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this6.axis);\n        var desired = tfc.add(tfc.mul(_this6.rate, tfc.clipByValue(norms, _this6.minValue, _this6.maxValue)), tfc.mul(1.0 - _this6.rate, norms));\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minValue: this.minValue,\n        maxValue: this.maxValue,\n        rate: this.rate,\n        axis: this.axis\n      };\n    }\n  }]);\n\n  return MinMaxNorm;\n}(Constraint);\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\nexport var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    var className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"sources":["../src/constraints.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\nexport class MaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMaxValue = 2;\n        this.defaultAxis = 0;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.clipByValue(norms, 0, this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return { maxValue: this.maxValue, axis: this.axis };\n    }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultAxis = 0;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n    }\n    getConfig() {\n        return { axis: this.axis };\n    }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n    apply(w) {\n        return tfc.relu(w);\n    }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMinValue = 0.0;\n        this.defaultMaxValue = 1.0;\n        this.defaultRate = 1.0;\n        this.defaultAxis = 0;\n        this.minValue =\n            args.minValue != null ? args.minValue : this.defaultMinValue;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.rate = args.rate != null ? args.rate : this.defaultRate;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\n//# sourceMappingURL=constraints.js.map"]},"metadata":{},"sourceType":"module"}