{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from \"../multinomial_gpu\";\nimport { softmax } from \"./Softmax\";\nexport function multinomial(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var logits = inputs.logits;\n  var numSamples = attrs.numSamples,\n      seed = attrs.seed,\n      normalized = attrs.normalized;\n  var probs = normalized ? logits : softmax({\n    inputs: {\n      logits: logits\n    },\n    backend: backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  var batchSize = probs.shape[0];\n  var numOutcomes = probs.shape[1];\n  var program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  var customSetup = program.getCustomSetupFunc(seed);\n  var res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n\n  return res;\n}\nexport var multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};","map":{"version":3,"sources":["../../src/kernels/Multinomial.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,WAAlC,QAAqG,uBAArG;AAGA,SAAQ,kBAAR;AAEA,SAAQ,OAAR;AAEA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,MAAP,GAAiB,MAAjB,CAAO,MAAP;EACA,IAAO,UAAP,GAAuC,KAAvC,CAAO,UAAP;EAAA,IAAmB,IAAnB,GAAuC,KAAvC,CAAmB,IAAnB;EAAA,IAAyB,UAAzB,GAAuC,KAAvC,CAAyB,UAAzB;EAEA,IAAM,KAAK,GAAG,UAAU,GACpB,MADoB,GAEpB,OAAO,CACH;IAAC,MAAM,EAAE;MAAC,MAAM,EAAN;IAAD,CAAT;IAAmB,OAAO,EAAP,OAAnB;IAA4B,KAAK,EAAE;MAAC,GAAG,EAAE,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB;IAA5B;EAAnC,CADG,CAFX;EAIA,IAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAlB;EACA,IAAM,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAApB;EACA,IAAM,OAAO,GAAG,IAAI,kBAAJ,CAAuB,SAAvB,EAAkC,WAAlC,EAA+C,UAA/C,CAAhB;EACA,IAAM,WAAW,GAAG,OAAO,CAAC,kBAAR,CAA2B,IAA3B,CAApB;EAEA,IAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,KAAD,CAAjC,EAA0C,OAA1C,EAAmD,WAAnD,CAAZ;;EACA,IAAI,CAAC,UAAL,EAAiB;IACf,OAAO,CAAC,6BAAR,CAAsC,KAAtC;EACD;;EACD,OAAO,GAAP;AACD;AAED,OAAO,IAAM,iBAAiB,GAAiB;EAC7C,UAAU,EAAE,WADiC;EAE7C,WAAW,EAAE,OAFgC;EAG7C,UAAU,EAAE;AAHiC,CAAxC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    const probs = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probs);\n    }\n    return res;\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'webgl',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map"]},"metadata":{},"sourceType":"module"}