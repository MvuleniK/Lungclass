{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from \"../errors\";\nimport { pyListRepeat } from \"./generic_utils\";\nimport { isInteger, max } from \"./math_utils\";\nexport function normalizeArray(value, n, name) {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\"The \" + name + \" argument must be an integer or tuple of \" + n + \" integers.\" + (\" Received: \" + value.length + \" elements.\"));\n    }\n\n    for (var i = 0; i < n; ++i) {\n      var singleValue = value[i];\n\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\"The \" + name + \" argument must be an integer or tuple of \" + n + (\" integers. Received: \" + JSON.stringify(value) + \" including a\") + (\" non-integer number \" + singleValue));\n      }\n    }\n\n    return value;\n  }\n}\nexport function convOutputLength(inputLength, filterSize, padding, stride) {\n  var dilation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (inputLength == null) {\n    return inputLength;\n  }\n\n  var dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  var outputLength;\n\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(\"Unsupport padding mode: \" + padding + \".\");\n  }\n\n  return dimSize;\n}","map":{"version":3,"sources":["../../src/utils/conv_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAQ,UAAR;AAGA,SAAQ,YAAR;AACA,SAAQ,SAAR,EAAmB,GAAnB;AASA,OAAM,SAAU,cAAV,CACF,KADE,EACsB,CADtB,EACiC,IADjC,EAC6C;EACjD,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,YAAY,CAAC,KAAD,EAAQ,CAAR,CAAnB;EACD,CAFD,MAEO;IACL,IAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;MACtB,MAAM,IAAI,UAAJ,CACF,SAAO,IAAP,iDAAuD,CAAvD,mCACc,KAAK,CAAC,MADpB,gBADE,CAAN;IAGD;;IACD,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;MAC1B,IAAM,WAAW,GAAG,KAAK,CAAC,CAAD,CAAzB;;MACA,IAAI,CAAC,SAAS,CAAC,WAAD,CAAd,EAA6B;QAC3B,MAAM,IAAI,UAAJ,CACF,SAAO,IAAP,iDAAuD,CAAvD,8BACwB,IAAI,CAAC,SAAL,CAAe,KAAf,CADxB,+CAEuB,WAFvB,CADE,CAAN;MAID;IACF;;IACD,OAAO,KAAP;EACD;AACF;AAUD,OAAM,SAAU,gBAAV,CACF,WADE,EACmB,UADnB,EACuC,OADvC,EAEF,MAFE,EAE0B;EAAA,IAAZ,QAAY,uEAAD,CAAC;;EAC9B,IAAI,WAAW,IAAI,IAAnB,EAAyB;IACvB,OAAO,WAAP;EACD;;EACD,IAAM,iBAAiB,GAAG,UAAU,GAAG,CAAC,UAAU,GAAG,CAAd,KAAoB,QAAQ,GAAG,CAA/B,CAAvC;EACA,IAAI,YAAJ;;EACA,IAAI,OAAO,KAAK,MAAhB,EAAwB;IACtB,YAAY,GAAG,WAAf;EACD,CAFD,MAEO;IACL,YAAY,GAAG,WAAW,GAAG,iBAAd,GAAkC,CAAjD;EACD;;EACD,OAAO,IAAI,CAAC,KAAL,CAAW,CAAC,YAAY,GAAG,MAAf,GAAwB,CAAzB,IAA8B,MAAzC,CAAP;AACD;AAED,OAAM,SAAU,YAAV,CACF,OADE,EACe,UADf,EACmC,UADnC,EAEF,OAFE,EAEkB;EACtB,IAAI,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,IAAI,OAAO,KAAK,OAAhB,EAAyB;IACvB,OAAO,GAAG,OAAO,GAAG,UAAV,GAAuB,GAAG,CAAC,CAAC,UAAU,GAAG,UAAd,EAA0B,CAA1B,CAAD,CAApC;EACD,CAFD,MAEO,IAAI,OAAO,KAAK,MAAhB,EAAwB;IAC7B,OAAO,GAAG,OAAO,GAAG,UAApB;EACD,CAFM,MAEA;IACL,MAAM,IAAI,UAAJ,8BAA0C,OAA1C,OAAN;EACD;;EACD,OAAO,OAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` +\n                ` Received: ${value.length} elements.`);\n        }\n        for (let i = 0; i < n; ++i) {\n            const singleValue = value[i];\n            if (!isInteger(singleValue)) {\n                throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` +\n                    ` integers. Received: ${JSON.stringify(value)} including a` +\n                    ` non-integer number ${singleValue}`);\n            }\n        }\n        return value;\n    }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n    if (inputLength == null) {\n        return inputLength;\n    }\n    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    let outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else { // VALID\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new ValueError(`Unsupport padding mode: ${padding}.`);\n    }\n    return dimSize;\n}\n//# sourceMappingURL=conv_utils.js.map"]},"metadata":{},"sourceType":"module"}