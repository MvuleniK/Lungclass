{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ReduceProgram = _createClass(function ReduceProgram(reduceInfo, reduceType) {\n  _classCallCheck(this, ReduceProgram);\n\n  this.variableNames = ['x'];\n  var windowSize = reduceInfo.windowSize,\n      batchSize = reduceInfo.batchSize,\n      inSize = reduceInfo.inSize,\n      outSize = reduceInfo.outSize;\n  this.outputShape = [batchSize, outSize];\n  var initializationValue = '0.0';\n  var compareOp = \"\";\n\n  if (reduceType === 'prod') {\n    initializationValue = '1.0';\n  } else if (reduceType === 'min') {\n    initializationValue = '1.0 / 1e-20';\n    compareOp = \"min\";\n  } else if (reduceType === 'max') {\n    initializationValue = '-1.0 / 1e-20';\n    compareOp = \"max\";\n  }\n\n  var returnValue = reduceType + \"(\" + reduceType + \"(\" + reduceType + \"(\" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n  if (reduceType === 'sum') {\n    returnValue = \"sumValue\";\n  } else if (reduceType === 'prod') {\n    returnValue = \"prodValue\";\n  } else if (reduceType === 'all') {\n    returnValue = \"allValue\";\n  } else if (reduceType === 'any') {\n    returnValue = \"anyValue\";\n  }\n\n  var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n  var windowSizeVec4Remainder = windowSize % 4;\n  var updateSnippet = \"\\n      if (\" + (reduceType === 'sum') + \") {\\n        sumValue += dot(values, ones);\\n      } else if (\" + (reduceType === 'prod') + \") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \" + compareOp + \"(values, minMaxValue);\\n      }\\n    \";\n  var vecType = \"vec4\";\n\n  if (reduceType === 'all') {\n    initializationValue = '1.0';\n    updateSnippet = \"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \";\n    vecType = \"bvec4\";\n  } else if (reduceType === 'any') {\n    initializationValue = '0.0';\n    updateSnippet = \"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \";\n    vecType = \"bvec4\";\n  }\n\n  var checkOutOfBounds = '';\n\n  if (inSize % windowSize > 0) {\n    checkOutOfBounds = \"\\n        if (inIdx < 0 || inIdx >= \" + inSize + \") {\\n          return initializationValue;\\n        }\\n      \";\n  }\n\n  this.userCode = \"\\n      const float initializationValue = \" + initializationValue + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + checkOutOfBounds + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + windowSize + \";\\n\\n        vec4 minMaxValue = vec4(\" + initializationValue + \");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \" + windowSizeNearestVec4 + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \" + vecType + \" values = \" + vecType + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \" + updateSnippet + \"\\n        }\\n\\n        int inIdx = inOffset + \" + windowSizeNearestVec4 + \";\\n        if (\" + (windowSizeVec4Remainder === 1) + \") {\\n          \" + vecType + \" values = \" + vecType + \"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + updateSnippet + \"\\n        } else if (\" + (windowSizeVec4Remainder === 2) + \") {\\n          \" + vecType + \" values = \" + vecType + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + updateSnippet + \"\\n        } else if (\" + (windowSizeVec4Remainder === 3) + \") {\\n          \" + vecType + \" values = \" + vecType + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \" + updateSnippet + \"\\n        }\\n        setOutput(\" + returnValue + \");\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/reduce_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,aAAb,gBAKE,uBACI,UADJ,EAEI,UAFJ,EAEoD;EAAA;;EANpD,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EAOE,IAAO,UAAP,GAAiD,UAAjD,CAAO,UAAP;EAAA,IAAmB,SAAnB,GAAiD,UAAjD,CAAmB,SAAnB;EAAA,IAA8B,MAA9B,GAAiD,UAAjD,CAA8B,MAA9B;EAAA,IAAsC,OAAtC,GAAiD,UAAjD,CAAsC,OAAtC;EACA,KAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB;EAEA,IAAI,mBAAmB,GAAG,KAA1B;EACA,IAAI,SAAS,KAAb;;EAEA,IAAI,UAAU,KAAK,MAAnB,EAA2B;IACzB,mBAAmB,GAAG,KAAtB;EACD,CAFD,MAEO,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAE/B,mBAAmB,GAAG,aAAtB;IACA,SAAS,QAAT;EACD,CAJM,MAIA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAE/B,mBAAmB,GAAG,cAAtB;IACA,SAAS,QAAT;EACD;;EAED,IAAI,WAAW,GAAM,UAAH,SAAiB,UAAjB,SAA+B,UAA/B,SACd,mEADJ;;EAGA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IACxB,WAAW,aAAX;EACD,CAFD,MAEO,IAAI,UAAU,KAAK,MAAnB,EAA2B;IAChC,WAAW,cAAX;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAC/B,WAAW,aAAX;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAC/B,WAAW,aAAX;EACD;;EAED,IAAM,qBAAqB,GAAG,IAAI,CAAC,KAAL,CAAW,UAAU,GAAG,CAAxB,IAA6B,CAA3D;EACA,IAAM,uBAAuB,GAAG,UAAU,GAAG,CAA7C;EAEA,IAAI,aAAa,qBACT,UAAU,KAAK,KADN,wEAGF,UAAU,KAAK,MAHb,wKAOG,SAPH,0CAAjB;EAWA,IAAI,OAAO,SAAX;;EAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IACxB,mBAAmB,GAAG,KAAtB;IACA,aAAa,uMAAb;IAKA,OAAO,UAAP;EACD,CARD,MAQO,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAC/B,mBAAmB,GAAG,KAAtB;IACA,aAAa,uMAAb;IAKA,OAAO,UAAP;EACD;;EAED,IAAI,gBAAgB,GAAG,EAAvB;;EACA,IAAI,MAAM,GAAG,UAAT,GAAsB,CAA1B,EAA6B;IAC3B,gBAAgB,4CACc,MADd,kEAAhB;EAKD;;EACD,KAAK,QAAL,kDACsC,mBADtC,sHAKM,gBALN,0NAa8B,UAb9B,6CAe8B,mBAf9B,uKAqB0B,qBArB1B,oEAuBQ,OAvBR,kBAuB4B,OAvB5B,oMA8BQ,aA9BR,sDAiC6B,qBAjC7B,wBAkCU,uBAAuB,KAAK,CAlCtC,wBAmCQ,OAnCR,kBAmC4B,OAnC5B,+KA0CQ,aA1CR,8BA2CiB,uBAAuB,KAAK,CA3C7C,wBA4CQ,OA5CR,kBA4C4B,OA5C5B,sLAmDQ,aAnDR,8BAoDiB,uBAAuB,KAAK,CApD7C,wBAqDQ,OArDR,kBAqD4B,OArD5B,6LA4DQ,aA5DR,uCA8DgB,WA9DhB;AAiED,CAlJH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reduce_gpu.js.map"]},"metadata":{},"sourceType":"module"}