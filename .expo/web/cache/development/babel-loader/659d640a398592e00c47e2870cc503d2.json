{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from \"./utils\";\n\nfunction nmsParams(node, tensorMap, context) {\n  var boxes = getParamValue('boxes', node, tensorMap, context);\n  var scores = getParamValue('scores', node, tensorMap, context);\n  var maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  var iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  var scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  var softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes: boxes,\n    scores: scores,\n    maxOutputSize: maxOutputSize,\n    iouThreshold: iouThreshold,\n    scoreThreshold: scoreThreshold,\n    softNmsSigma: softNmsSigma\n  };\n}\n\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var _nmsParams, boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, result, _nmsParams2, _boxes, _scores, _maxOutputSize, _iouThreshold, _scoreThreshold, padToMaxOutputSize, _result, _nmsParams3, _boxes2, _scores2, _maxOutputSize2, _iouThreshold2, _scoreThreshold2, condition, _result2;\n\n  return _regeneratorRuntime.async(function executeOp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = node.op;\n          _context.next = _context.t0 === 'NonMaxSuppressionV5' ? 3 : _context.t0 === 'NonMaxSuppressionV4' ? 8 : _context.t0 === 'NonMaxSuppressionV3' ? 14 : _context.t0 === 'NonMaxSuppressionV2' ? 14 : _context.t0 === 'Where' ? 19 : _context.t0 === 'ListDiff' ? 26 : 27;\n          break;\n\n        case 3:\n          _nmsParams = nmsParams(node, tensorMap, context), boxes = _nmsParams.boxes, scores = _nmsParams.scores, maxOutputSize = _nmsParams.maxOutputSize, iouThreshold = _nmsParams.iouThreshold, scoreThreshold = _nmsParams.scoreThreshold, softNmsSigma = _nmsParams.softNmsSigma;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma));\n\n        case 6:\n          result = _context.sent;\n          return _context.abrupt(\"return\", [result.selectedIndices, result.selectedScores]);\n\n        case 8:\n          _nmsParams2 = nmsParams(node, tensorMap, context), _boxes = _nmsParams2.boxes, _scores = _nmsParams2.scores, _maxOutputSize = _nmsParams2.maxOutputSize, _iouThreshold = _nmsParams2.iouThreshold, _scoreThreshold = _nmsParams2.scoreThreshold;\n          padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(tfOps.image.nonMaxSuppressionPaddedAsync(_boxes, _scores, _maxOutputSize, _iouThreshold, _scoreThreshold, padToMaxOutputSize));\n\n        case 12:\n          _result = _context.sent;\n          return _context.abrupt(\"return\", [_result.selectedIndices, _result.validOutputs]);\n\n        case 14:\n          _nmsParams3 = nmsParams(node, tensorMap, context), _boxes2 = _nmsParams3.boxes, _scores2 = _nmsParams3.scores, _maxOutputSize2 = _nmsParams3.maxOutputSize, _iouThreshold2 = _nmsParams3.iouThreshold, _scoreThreshold2 = _nmsParams3.scoreThreshold;\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(tfOps.image.nonMaxSuppressionAsync(_boxes2, _scores2, _maxOutputSize2, _iouThreshold2, _scoreThreshold2));\n\n        case 17:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t1]);\n\n        case 19:\n          condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n          _context.next = 22;\n          return _regeneratorRuntime.awrap(tfOps.whereAsync(condition));\n\n        case 22:\n          _context.t2 = _context.sent;\n          _result2 = [_context.t2];\n          condition.dispose();\n          return _context.abrupt(\"return\", _result2);\n\n        case 26:\n          return _context.abrupt(\"return\", tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context)));\n\n        case 27:\n          throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var CATEGORY = 'dynamic';","map":{"version":3,"sources":["../../../src/operations/executors/dynamic_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n            const result = [await tfOps.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=dynamic_executor.js.map"]},"metadata":{},"sourceType":"module"}