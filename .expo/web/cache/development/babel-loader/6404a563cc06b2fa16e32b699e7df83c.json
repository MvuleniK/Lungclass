{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from \"../concat\";\nimport { mul } from \"../mul\";\nimport { op } from \"../operation\";\nimport { enclosingPowerOfTwo } from \"../signal_ops_util\";\nimport { slice } from \"../slice\";\nimport { rfft } from \"../spectral/rfft\";\nimport { frame } from \"./frame\";\nimport { hannWindow } from \"./hann_window\";\n\nfunction stft_(signal, frameLength, frameStep, fftLength) {\n  var windowFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : hannWindow;\n\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n\n  var framedSignal = frame(signal, frameLength, frameStep);\n  var windowedSignal = mul(framedSignal, windowFn(frameLength));\n  var output = [];\n\n  for (var i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n  }\n\n  return concat(output);\n}\n\nexport var stft = op({\n  stft_: stft_\n});","map":{"version":3,"sources":["../../../src/ops/signal/stft.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,MAAR;AACA,SAAQ,GAAR;AACA,SAAQ,EAAR;AACA,SAAQ,mBAAR;AACA,SAAQ,KAAR;AACA,SAAQ,IAAR;AAEA,SAAQ,KAAR;AACA,SAAQ,UAAR;;AAkBA,SAAS,KAAT,CACI,MADJ,EACsB,WADtB,EAC2C,SAD3C,EAEI,SAFJ,EAGuD;EAAA,IAAnD,QAAmD,uEAAV,UAAU;;EACrD,IAAI,SAAS,IAAI,IAAjB,EAAuB;IACrB,SAAS,GAAG,mBAAmB,CAAC,WAAD,CAA/B;EACD;;EACD,IAAM,YAAY,GAAG,KAAK,CAAC,MAAD,EAAS,WAAT,EAAsB,SAAtB,CAA1B;EACA,IAAM,cAAc,GAAG,GAAG,CAAC,YAAD,EAAe,QAAQ,CAAC,WAAD,CAAvB,CAA1B;EACA,IAAM,MAAM,GAAa,EAAzB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAAY,CAAC,KAAb,CAAmB,CAAnB,CAApB,EAA2C,CAAC,EAA5C,EAAgD;IAC9C,MAAM,CAAC,IAAP,CACI,IAAI,CAAC,KAAK,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,WAAJ,CAAzB,CAAN,EAAkD,SAAlD,CADR;EAED;;EACD,OAAO,MAAM,CAAC,MAAD,CAAb;AACD;;AACD,OAAO,IAAM,IAAI,GAAG,EAAE,CAAC;EAAC,KAAK,EAAL;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { slice } from '../slice';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n    if (fftLength == null) {\n        fftLength = enclosingPowerOfTwo(frameLength);\n    }\n    const framedSignal = frame(signal, frameLength, frameStep);\n    const windowedSignal = mul(framedSignal, windowFn(frameLength));\n    const output = [];\n    for (let i = 0; i < framedSignal.shape[0]; i++) {\n        output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n    }\n    return concat(output);\n}\nexport const stft = op({ stft_ });\n//# sourceMappingURL=stft.js.map"]},"metadata":{},"sourceType":"module"}