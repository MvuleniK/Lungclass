{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from \"./Concat_impl\";\nimport { identity } from \"./Identity\";\nexport function concat(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  var $inputs = inputs.filter(function (t) {\n    return util.sizeFromShape(t.shape) > 0;\n  });\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend: backend\n    });\n  }\n\n  var shapes = $inputs.map(function (t) {\n    return t.shape;\n  });\n  backend_util.assertParamsConsistent(shapes, $axis);\n  return concatImpl($inputs, $axis, backend);\n}\nexport var concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};","map":{"version":3,"sources":["../../src/kernels/Concat.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,MAAtB,EAA+F,IAA/F,QAA0G,uBAA1G;AAGA,SAAQ,UAAR;AACA,SAAQ,QAAR;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EAEuE;EAE3E,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;EAEA,IAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,MAAM,CAAC,CAAD,CAAN,CAAU,KAApC,EAA2C,CAA3C,CAAd;EACA,IAAM,QAAQ,GACV,YAAY,CAAC,eAAb,CAA6B,MAAM,CAAC,GAAP,CAAW,UAAA,CAAC;IAAA,OAAI,CAAC,CAAC,KAAN;EAAA,CAAZ,CAA7B,EAAuD,KAAvD,CADJ;;EAGA,IAAI,IAAI,CAAC,aAAL,CAAmB,QAAnB,MAAiC,CAArC,EAAwC;IACtC,OAAO,OAAO,CAAC,cAAR,CAAuB,QAAvB,EAAiC,MAAM,CAAC,CAAD,CAAN,CAAU,KAA3C,EAAkD,EAAlD,CAAP;EACD;;EAGD,IAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,UAAA,CAAC;IAAA,OAAI,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,IAA8B,CAAlC;EAAA,CAAf,CAAhB;;EACA,IAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;IACxB,OAAO,QAAQ,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,OAAO,CAAC,CAAD;MAAX,CAAT;MAA0B,OAAO,EAAP;IAA1B,CAAD,CAAf;EACD;;EAED,IAAM,MAAM,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;IAAA,OAAI,CAAC,CAAC,KAAN;EAAA,CAAb,CAAf;EACA,YAAY,CAAC,sBAAb,CAAoC,MAApC,EAA4C,KAA5C;EAEA,OAAO,UAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,OAAjB,CAAjB;AACD;AAED,OAAO,IAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,OAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'webgl',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map"]},"metadata":{},"sourceType":"module"}