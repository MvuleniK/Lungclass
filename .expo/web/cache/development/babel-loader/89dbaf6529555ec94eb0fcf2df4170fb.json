{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { BatchMatMul } from \"../kernel_names\";\nimport { makeTypesMatch } from \"../tensor_util\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { op } from \"./operation\";\n\nfunction matMul_(a, b) {\n  var transposeA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var transposeB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var $a = convertToTensor(a, 'a', 'matMul');\n  var $b = convertToTensor(b, 'b', 'matMul');\n\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  var attrs = {\n    transposeA: transposeA,\n    transposeB: transposeB\n  };\n  return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\n\nexport var matMul = op({\n  matMul_: matMul_\n});","map":{"version":3,"sources":["../../src/ops/mat_mul.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR;AACA,SAAQ,WAAR;AAIA,SAAQ,cAAR;AACA,SAAQ,eAAR;AAGA,SAAQ,EAAR;;AAkBA,SAAS,OAAT,CACI,CADJ,EAC0B,CAD1B,EAEsB;EAAA,IAD0B,UAC1B,uEADuC,KACvC;EAAA,IAAlB,UAAkB,uEAAL,KAAK;EACpB,IAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAAxB;EACA,IAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAAxB;;EAFoB,sBAGT,cAAc,CAAC,EAAD,EAAK,EAAL,CAHL;;EAAA;;EAGnB,EAHmB;EAGf,EAHe;EAKpB,IAAM,MAAM,GAAsB;IAAC,CAAC,EAAE,EAAJ;IAAQ,CAAC,EAAE;EAAX,CAAlC;EACA,IAAM,KAAK,GAAqB;IAAC,UAAU,EAAV,UAAD;IAAa,UAAU,EAAV;EAAb,CAAhC;EAEA,OAAO,MAAM,CAAC,SAAP,CACH,WADG,EACU,MADV,EAC0C,KAD1C,CAAP;AAED;;AAED,OAAO,IAAM,MAAM,GAAG,EAAE,CAAC;EAAC,OAAO,EAAP;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n    let $a = convertToTensor(a, 'a', 'matMul');\n    let $b = convertToTensor(b, 'b', 'matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    const attrs = { transposeA, transposeB };\n    return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\nexport const matMul = op({ matMul_ });\n//# sourceMappingURL=mat_mul.js.map"]},"metadata":{},"sourceType":"module"}