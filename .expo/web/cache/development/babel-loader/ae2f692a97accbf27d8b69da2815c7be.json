{"ast":null,"code":"import { assert } from \"../util\";\nexport function prepareSplitSize(x, numOrSizeSplits) {\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var splitSizes = [];\n\n  if (typeof numOrSizeSplits === 'number') {\n    assert(x.shape[axis] % numOrSizeSplits === 0, function () {\n      return 'Number of splits must evenly divide the axis.';\n    });\n    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    var numOfNegs = numOrSizeSplits.reduce(function (count, value) {\n      if (value === -1) {\n        count += 1;\n      }\n\n      return count;\n    }, 0);\n    assert(numOfNegs <= 1, function () {\n      return 'There should be only one negative value in split array.';\n    });\n    var negIndex = numOrSizeSplits.indexOf(-1);\n\n    if (negIndex !== -1) {\n      var total = numOrSizeSplits.reduce(function (a, b) {\n        return b > 0 ? a + b : a;\n      });\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n\n    assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) {\n      return a + b;\n    }), function () {\n      return 'The sum of sizes must match the size of the axis dimension.';\n    });\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}","map":{"version":3,"sources":["../../src/ops/split_util.ts"],"names":[],"mappings":"AAkBA,SAAQ,MAAR;AAOA,OAAM,SAAU,gBAAV,CACF,CADE,EACoB,eADpB,EAEM;EAAA,IAAR,IAAQ,uEAAD,CAAC;EACV,IAAI,UAAU,GAAG,EAAjB;;EACA,IAAI,OAAQ,eAAR,KAA6B,QAAjC,EAA2C;IACzC,MAAM,CACF,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,eAAhB,KAAoC,CADlC,EAEF;MAAA,OAAM,+CAAN;IAAA,CAFE,CAAN;IAGA,UAAU,GACN,IAAI,KAAJ,CAAU,eAAV,EAA2B,IAA3B,CAAgC,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,eAAhD,CADJ;EAED,CAND,MAMO;IACL,IAAM,SAAS,GAAG,eAAe,CAAC,MAAhB,CAAuB,UAAC,KAAD,EAAQ,KAAR,EAAiB;MACxD,IAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChB,KAAK,IAAI,CAAT;MACD;;MACD,OAAO,KAAP;IACD,CALiB,EAKf,CALe,CAAlB;IAMA,MAAM,CACF,SAAS,IAAI,CADX,EAEF;MAAA,OAAM,yDAAN;IAAA,CAFE,CAAN;IAGA,IAAM,QAAQ,GAAG,eAAe,CAAC,OAAhB,CAAwB,CAAC,CAAzB,CAAjB;;IAGA,IAAI,QAAQ,KAAK,CAAC,CAAlB,EAAqB;MACnB,IAAM,KAAK,GAAG,eAAe,CAAC,MAAhB,CAAuB,UAAC,CAAD,EAAI,CAAJ;QAAA,OAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAZ,GAAgB,CAA1B;MAAA,CAAvB,CAAd;MACA,eAAe,CAAC,QAAD,CAAf,GAA4B,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,KAA5C;IACD;;IACD,MAAM,CACF,CAAC,CAAC,KAAF,CAAQ,IAAR,MAAkB,eAAe,CAAC,MAAhB,CAAuB,UAAC,CAAD,EAAI,CAAJ;MAAA,OAAU,CAAC,GAAG,CAAd;IAAA,CAAvB,CADhB,EAEF;MAAA,OAAM,6DAAN;IAAA,CAFE,CAAN;IAGA,UAAU,GAAG,eAAb;EACD;;EAED,OAAO,UAAP;AACD","sourceRoot":"","sourcesContent":["import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n    let splitSizes = [];\n    if (typeof (numOrSizeSplits) === 'number') {\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n        splitSizes =\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n    }\n    else {\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n            if (value === -1) {\n                count += 1;\n            }\n            return count;\n        }, 0);\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n        const negIndex = numOrSizeSplits.indexOf(-1);\n        // Allow the number of split array to be -1, which indicates the rest\n        // of dimension is allocated to that split.\n        if (negIndex !== -1) {\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\n        }\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n        splitSizes = numOrSizeSplits;\n    }\n    return splitSizes;\n}\n//# sourceMappingURL=split_util.js.map"]},"metadata":{},"sourceType":"module"}