{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from \"../onehot_gpu\";\nimport { reshape } from \"./Reshape\";\nexport var oneHot = function oneHot(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var indices = inputs.indices;\n  var depth = attrs.depth,\n      onValue = attrs.onValue,\n      offValue = attrs.offValue;\n  var indicesSize = util.sizeFromShape(indices.shape);\n  var program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  var reshaped = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [indicesSize]\n    }\n  });\n  var result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n  var outShape = [].concat(_toConsumableArray(indices.shape), [depth]);\n  var out = reshape({\n    inputs: {\n      x: result\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\nexport var oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot\n};","map":{"version":3,"sources":["../../src/kernels/OneHot.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,EAAiF,IAAjF,QAA4F,uBAA5F;AAGA,SAAQ,aAAR;AACA,SAAQ,OAAR;AAEA,OAAO,IAAM,MAAM,GAAG,SAAT,MAAS,CAAC,IAAD,EAIL;EACf,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,OAAP,GAAkB,MAAlB,CAAO,OAAP;EACA,IAAO,KAAP,GAAmC,KAAnC,CAAO,KAAP;EAAA,IAAc,OAAd,GAAmC,KAAnC,CAAc,OAAd;EAAA,IAAuB,QAAvB,GAAmC,KAAnC,CAAuB,QAAvB;EAEA,IAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,OAAO,CAAC,KAA3B,CAApB;EACA,IAAM,OAAO,GAAG,IAAI,aAAJ,CAAkB,WAAlB,EAA+B,KAA/B,EAAsC,OAAtC,EAA+C,QAA/C,CAAhB;EACA,IAAM,QAAQ,GACV,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAuB,OAAO,EAAP,OAAvB;IAAgC,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,WAAD;IAAR;EAAvC,CAAD,CADX;EAEA,IAAM,MAAM,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,QAAD,CAAjC,EAA6C,OAAO,CAAC,KAArD,CAAf;EACA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;EAEA,IAAM,QAAQ,gCAAO,OAAO,CAAC,KAAf,IAAsB,KAAtB,EAAd;EACA,IAAM,GAAG,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAsB,OAAO,EAAP,OAAtB;IAA+B,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAAtC,CAAD,CAAnB;EACA,OAAO,CAAC,6BAAR,CAAsC,MAAtC;EACA,OAAO,GAAP;AACD,CApBM;AAsBP,OAAO,IAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,OAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_gpu';\nimport { reshape } from './Reshape';\nexport const oneHot = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n    const reshaped = reshape({ inputs: { x: indices }, backend, attrs: { shape: [indicesSize] } });\n    const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n    backend.disposeIntermediateTensorInfo(reshaped);\n    const outShape = [...indices.shape, depth];\n    const out = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return out;\n};\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'webgl',\n    kernelFunc: oneHot\n};\n//# sourceMappingURL=OneHot.js.map"]},"metadata":{},"sourceType":"module"}