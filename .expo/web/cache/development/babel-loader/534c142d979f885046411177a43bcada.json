{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from \"../kernel_names\";\nimport { add } from \"../ops/add\";\nimport { assertAndGetBroadcastShape, getReductionAxes } from \"../ops/broadcast_util\";\nimport { div } from \"../ops/div\";\nimport { mul } from \"../ops/mul\";\nimport { neg } from \"../ops/neg\";\nimport { reshape } from \"../ops/reshape\";\nimport { square } from \"../ops/square\";\nimport { sum } from \"../ops/sum\";\nexport var atan2GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 2),\n        a = _saved[0],\n        b = _saved[1];\n\n    var outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    var derA = function derA() {\n      var d = add(square(a), square(b));\n      var res = mul(dy, div(b, d));\n      var reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, a.shape);\n    };\n\n    var derB = function derB() {\n      var d = add(square(a), square(b));\n      var res = neg(mul(dy, div(a, d)));\n      var reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, b.shape);\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Atan2_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,KAAR;AAEA,SAAQ,GAAR;AACA,SAAQ,0BAAR,EAAoC,gBAApC;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,OAAR;AACA,SAAQ,MAAR;AACA,SAAQ,GAAR;AAGA,OAAO,IAAM,eAAe,GAAe;EACzC,UAAU,EAAE,KAD6B;EAEzC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAF2B;EAGzC,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;IACxC,4BAAe,KAAf;IAAA,IAAO,CAAP;IAAA,IAAU,CAAV;;IACA,IAAM,QAAQ,GAAG,0BAA0B,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAA3C;;IAEA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;MAChB,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAb;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAb;MACA,IAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,KAAR,CAAd;IACD,CARD;;IASA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;MAChB,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAb;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAJ,CAAb;MACA,IAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,KAAR,CAAd;IACD,CARD;;IASA,OAAO;MAAC,CAAC,EAAE,IAAJ;MAAU,CAAC,EAAE;IAAb,CAAP;EACD;AA1BwC,CAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n    kernelName: Atan2,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const d = add(square(a), square(b));\n            let res = mul(dy, div(b, d));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, a.shape);\n        };\n        const derB = () => {\n            const d = add(square(a), square(b));\n            let res = neg(mul(dy, div(a, d)));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, b.shape);\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Atan2_grad.js.map"]},"metadata":{},"sourceType":"module"}