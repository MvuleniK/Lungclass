{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Selu } from \"../kernel_names\";\nimport { cast } from \"../ops/cast\";\nimport { exp } from \"../ops/exp\";\nimport { greater } from \"../ops/greater\";\nimport { mul } from \"../ops/mul\";\nimport { scalar } from \"../ops/scalar\";\nimport { SELU_SCALE, SELU_SCALEALPHA } from \"../ops/selu_util\";\nimport { where } from \"../ops/where\";\nexport var seluGradConfig = {\n  kernelName: Selu,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 1),\n        _x = _saved[0];\n\n    return {\n      x: function x() {\n        var mask = greater(_x, scalar(0));\n        var scaleAlpha = scalar(SELU_SCALEALPHA);\n        var scale = scalar(SELU_SCALE);\n        var greaterThanZeroDer = mul(dy, scale);\n        var lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(_x, 'float32')));\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Selu_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,IAAR;AAEA,SAAQ,IAAR;AACA,SAAQ,GAAR;AACA,SAAQ,OAAR;AACA,SAAQ,GAAR;AACA,SAAQ,MAAR;AACA,SAAQ,UAAR,EAAoB,eAApB;AACA,SAAQ,KAAR;AAGA,OAAO,IAAM,cAAc,GAAe;EACxC,UAAU,EAAE,IAD4B;EAExC,YAAY,EAAE,CAAC,GAAD,CAF0B;EAGxC,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;IACxC,4BAAY,KAAZ;IAAA,IAAO,EAAP;;IACA,OAAO;MACL,CAAC,EAAE,aAAK;QACN,IAAM,IAAI,GAAG,OAAO,CAAC,EAAD,EAAI,MAAM,CAAC,CAAD,CAAV,CAApB;QAEA,IAAM,UAAU,GAAG,MAAM,CAAC,eAAD,CAAzB;QACA,IAAM,KAAK,GAAG,MAAM,CAAC,UAAD,CAApB;QAEA,IAAM,kBAAkB,GAAG,GAAG,CAAC,EAAD,EAAK,KAAL,CAA9B;QACA,IAAM,gBAAgB,GAClB,GAAG,CAAC,GAAG,CAAC,EAAD,EAAK,UAAL,CAAJ,EAAsB,GAAG,CAAC,IAAI,CAAC,EAAD,EAAI,SAAJ,CAAL,CAAzB,CADP;QAGA,OAAO,KAAK,CAAC,IAAD,EAAO,kBAAP,EAA2B,gBAA3B,CAAZ;MACD;IAZI,CAAP;EAcD;AAnBuC,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Selu } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { exp } from '../ops/exp';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { SELU_SCALE, SELU_SCALEALPHA } from '../ops/selu_util';\nimport { where } from '../ops/where';\nexport const seluGradConfig = {\n    kernelName: Selu,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return {\n            x: () => {\n                const mask = greater(x, scalar(0));\n                const scaleAlpha = scalar(SELU_SCALEALPHA);\n                const scale = scalar(SELU_SCALE);\n                const greaterThanZeroDer = mul(dy, scale);\n                const lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(x, 'float32')));\n                return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Selu_grad.js.map"]},"metadata":{},"sourceType":"module"}