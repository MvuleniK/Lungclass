{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { cast } from \"../kernels/Cast\";\nimport { complex } from \"../kernels/Complex\";\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return function (_ref) {\n      var inputs = _ref.inputs,\n          backend = _ref.backend;\n      var a = inputs.a,\n          b = inputs.b;\n      var cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var $dtype = dtype || a.dtype;\n\n      var _simpleImpl = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype),\n          _simpleImpl2 = _slicedToArray(_simpleImpl, 2),\n          resultData = _simpleImpl2[0],\n          resultShape = _simpleImpl2[1];\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return function (_ref2) {\n    var inputs = _ref2.inputs,\n        backend = _ref2.backend;\n    var a = inputs.a,\n        b = inputs.b;\n    var cpuBackend = backend;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      var $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      var aReal = $aComplexVals.complexTensorInfos.real;\n      var aImag = $aComplexVals.complexTensorInfos.imag;\n      var aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      var aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      var $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      var bReal = $bComplexVals.complexTensorInfos.real;\n      var bImag = $bComplexVals.complexTensorInfos.imag;\n      var bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      var bImagVals = cpuBackend.data.get(bImag.dataId).values;\n\n      var _complexImpl = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals),\n          _complexImpl2 = _slicedToArray(_complexImpl, 3),\n          resultRealData = _complexImpl2[0],\n          resultImagData = _complexImpl2[1],\n          resultShape = _complexImpl2[2];\n\n      var resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      var resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      var result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var $dtype = dtype || a.dtype;\n\n      var _simpleImpl3 = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype),\n          _simpleImpl4 = _slicedToArray(_simpleImpl3, 2),\n          resultData = _simpleImpl4[0],\n          _resultShape = _simpleImpl4[1];\n\n      return cpuBackend.makeTensorInfo(_resultShape, $dtype, resultData);\n    }\n  };\n}\nexport function createComplexBinaryKernelImpl(op) {\n  return function (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) {\n    var resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    var resultSize = util.sizeFromShape(resultShape);\n    var resultRank = resultShape.length;\n    var resultStrides = util.computeStrides(resultShape);\n    var resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    var resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    var aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    var bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    var aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    var bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    var aRank = aShape.length;\n    var aStrides = util.computeStrides(aShape);\n    var bRank = bShape.length;\n    var bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (var i = 0; i < resultRealVals.length; i++) {\n        var aIdx = i % aVals.length;\n        var bIdx = i % bVals.length;\n        var result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      var _loop = function _loop(_i) {\n        var loc = util.indexToLoc(_i, resultRank, resultStrides);\n        var aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(function (d) {\n          return aLoc[d] = 0;\n        });\n        var aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        var bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(function (d) {\n          return bLoc[d] = 0;\n        });\n        var bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        var opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[_i] = opResult.real;\n        resultImagVals[_i] = opResult.imag;\n      };\n\n      for (var _i = 0; _i < resultRealVals.length; _i++) {\n        _loop(_i);\n      }\n    }\n\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"sources":["../../src/utils/binary_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = util.computeStrides(resultShape);\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n//# sourceMappingURL=binary_utils.js.map"]},"metadata":{},"sourceType":"module"}