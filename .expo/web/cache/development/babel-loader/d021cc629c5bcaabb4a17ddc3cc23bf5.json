{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from \"./lazy_iterator\";\nimport { StringIterator } from \"./string_iterator\";\nexport var ByteChunkIterator = function (_LazyIterator) {\n  _inherits(ByteChunkIterator, _LazyIterator);\n\n  var _super = _createSuper(ByteChunkIterator);\n\n  function ByteChunkIterator() {\n    _classCallCheck(this, ByteChunkIterator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ByteChunkIterator, [{\n    key: \"decodeUTF8\",\n    value: function decodeUTF8() {\n      return new Utf8Iterator(this);\n    }\n  }]);\n\n  return ByteChunkIterator;\n}(LazyIterator);\n\nvar Utf8Iterator = function (_StringIterator) {\n  _inherits(Utf8Iterator, _StringIterator);\n\n  var _super2 = _createSuper(Utf8Iterator);\n\n  function Utf8Iterator(upstream) {\n    var _this;\n\n    _classCallCheck(this, Utf8Iterator);\n\n    _this = _super2.call(this);\n    _this.upstream = upstream;\n    _this.impl = new Utf8IteratorImpl(upstream);\n    return _this;\n  }\n\n  _createClass(Utf8Iterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.impl.summary();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return _regeneratorRuntime.async(function next$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.impl.next());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Utf8Iterator;\n}(StringIterator);\n\nvar Utf8IteratorImpl = function (_OneToManyIterator) {\n  _inherits(Utf8IteratorImpl, _OneToManyIterator);\n\n  var _super3 = _createSuper(Utf8IteratorImpl);\n\n  function Utf8IteratorImpl(upstream) {\n    var _this2;\n\n    _classCallCheck(this, Utf8IteratorImpl);\n\n    _this2 = _super3.call(this);\n    _this2.upstream = upstream;\n\n    if (env().get('IS_BROWSER')) {\n      _this2.decoder = new TextDecoder('utf-8');\n    } else {\n      var _require = require('string_decoder'),\n          StringDecoder = _require.StringDecoder;\n\n      _this2.decoder = new StringDecoder('utf8');\n    }\n\n    return _this2;\n  }\n\n  _createClass(Utf8IteratorImpl, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.upstream.summary() + \" -> Utf8\";\n    }\n  }, {\n    key: \"pump\",\n    value: function pump() {\n      var chunkResult, chunk, text;\n      return _regeneratorRuntime.async(function pump$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.upstream.next());\n\n            case 2:\n              chunkResult = _context2.sent;\n\n              if (!chunkResult.done) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 7:\n              chunk = chunkResult.value;\n\n            case 8:\n              if (env().get('IS_BROWSER')) {\n                text = this.decoder.decode(chunk, {\n                  stream: true\n                });\n              } else {\n                text = this.decoder.write(Buffer.from(chunk.buffer));\n              }\n\n              this.outputQueue.push(text);\n              return _context2.abrupt(\"return\", true);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Utf8IteratorImpl;\n}(OneToManyIterator);","map":{"version":3,"sources":["../../src/iterators/byte_chunk_iterator.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAR,QAAkB,uBAAlB;AACA,SAAQ,YAAR,EAAsB,iBAAtB;AACA,SAAQ,cAAR;AAEA,WAAsB,iBAAtB;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;IAAA;IAAA,OAUE,sBAAU;MACR,OAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;IACD;EAZH;;EAAA;AAAA,EAAgD,YAAhD;;IA0BM,Y;;;;;EAGJ,sBAAsB,QAAtB,EAAwD;IAAA;;IAAA;;IACtD;IADoB,MAAA,QAAA,GAAA,QAAA;IAEpB,MAAK,IAAL,GAAY,IAAI,gBAAJ,CAAqB,QAArB,CAAZ;IAFsD;EAGvD;;;;WAED,mBAAO;MACL,OAAO,KAAK,IAAL,CAAU,OAAV,EAAP;IACD;;;WAED;MAAA;QAAA;UAAA;YAAA;cAAA,iCACS,KAAK,IAAL,CAAU,IAAV,EADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;EAZyB,c;;IAuCrB,gB;;;;;EAMJ,0BAA+B,QAA/B,EAAiE;IAAA;;IAAA;;IAC/D;IAD6B,OAAA,QAAA,GAAA,QAAA;;IAE7B,IAAI,GAAG,GAAG,GAAN,CAAU,YAAV,CAAJ,EAA6B;MAC3B,OAAK,OAAL,GAAe,IAAI,WAAJ,CAAgB,OAAhB,CAAf;IACD,CAFD,MAEO;MAEL,eAAwB,OAAO,CAAC,gBAAD,CAA/B;MAAA,IAAO,aAAP,YAAO,aAAP;;MACA,OAAK,OAAL,GAAe,IAAI,aAAJ,CAAkB,MAAlB,CAAf;IACD;;IAR8D;EAShE;;;;WACD,mBAAO;MACL,OAAU,KAAK,QAAL,CAAc,OAAd,EAAV;IACD;;;WAED;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAC4B,KAAK,QAAL,CAAc,IAAd,EAD5B;;YAAA;cACQ,WADR;;cAAA,KAGM,WAAW,CAAC,IAHlB;gBAAA;gBAAA;cAAA;;cAAA,kCAIW,KAJX;;YAAA;cAMI,KAAK,GAAG,WAAW,CAAC,KAApB;;YANJ;cAUE,IAAI,GAAG,GAAG,GAAN,CAAU,YAAV,CAAJ,EAA6B;gBAC3B,IAAI,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B;kBAAC,MAAM,EAAE;gBAAT,CAA3B,CAAP;cACD,CAFD,MAEO;gBACL,IAAI,GAAG,KAAK,OAAL,CAAa,KAAb,CAAmB,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,MAAlB,CAAnB,CAAP;cACD;;cACD,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;cAfF,kCAgBS,IAhBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;EApB6B,iB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n    /**\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n     *\n     * The byte arrays producetd from the ByteChunkIterator on which this is\n     * called will be interpreted as concatenated.  No assumptions are made about\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n     * character may span the boundary between chunks.  This naturally happens,\n     * for instance, when reading fixed-size byte arrays from a file.\n     */\n    decodeUTF8() {\n        return new Utf8Iterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.impl = new Utf8IteratorImpl(upstream);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        if (env().get('IS_BROWSER')) {\n            this.decoder = new TextDecoder('utf-8');\n        }\n        else {\n            // tslint:disable-next-line:no-require-imports\n            const { StringDecoder } = require('string_decoder');\n            this.decoder = new StringDecoder('utf8');\n        }\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Utf8`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        let chunk;\n        if (chunkResult.done) {\n            return false;\n        }\n        else {\n            chunk = chunkResult.value;\n        }\n        let text;\n        if (env().get('IS_BROWSER')) {\n            text = this.decoder.decode(chunk, { stream: true });\n        }\n        else {\n            text = this.decoder.write(Buffer.from(chunk.buffer));\n        }\n        this.outputQueue.push(text);\n        return true;\n    }\n}\n//# sourceMappingURL=byte_chunk_iterator.js.map"]},"metadata":{},"sourceType":"module"}