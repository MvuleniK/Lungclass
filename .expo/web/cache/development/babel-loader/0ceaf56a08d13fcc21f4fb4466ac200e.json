{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Pool2DProgram = _createClass(function Pool2DProgram(convInfo, poolType, computePositions) {\n  var flattenPositions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var includeBatchInIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  _classCallCheck(this, Pool2DProgram);\n\n  this.variableNames = ['x'];\n\n  if (poolType === 'avg' && computePositions) {\n    throw new Error('Cannot compute positions for average pool.');\n  }\n\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  this.outputShape = convInfo.outShape;\n  var isAvgPool = poolType === 'avg';\n  var batchFlattenPositionStr = \"((batch  * \" + convInfo.inHeight + \" + xR) * \" + convInfo.inWidth + \" + xC) * \" + convInfo.inChannels + \" + d\";\n  var flattenPositionStr = \"(xR * \" + convInfo.inWidth + \" + xC) * \" + convInfo.inChannels + \" + d\";\n  var initializationValue = '0.0';\n\n  if (!isAvgPool) {\n    initializationValue = '-1.0 / 1e-20';\n  }\n\n  if (computePositions) {\n    var _compareOp = '>=';\n    this.userCode = \"\\n        const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n        const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \" + effectiveFilterHeight + \";\\n              wR += \" + dilationHeight + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + effectiveFilterWidth + \";\\n                wC += \" + dilationWidth + \") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value \" + _compareOp + \" currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \" + (flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : \"wR * \" + effectiveFilterWidth + \" + wC\") + \";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    return;\n  }\n\n  var compareOp = 'max';\n  var returnValue = poolType + \"(\" + poolType + \"(\" + poolType + \"(\" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n  if (poolType === 'avg') {\n    returnValue = \"avgValue / count\";\n  }\n\n  var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n  var filterWidthVec4Remainder = filterWidth % 4;\n  var updateSnippet = \"\\n      if (\" + isAvgPool + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = \" + compareOp + \"(values, minMaxValue);\\n      }\\n    \";\n  this.userCode = \"\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n      const float initializationValue = \" + initializationValue + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + initializationValue + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \" + effectiveFilterHeight + \";\\n            wR += \" + dilationHeight + \") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + filterWidthNearestVec4 + \"; wC += 4) {\\n            int xC = xCCorner + wC * \" + dilationWidth + \";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + dilationWidth + \", d),\\n              getValue(batch, xR, xC + 2 * \" + dilationWidth + \", d),\\n              getValue(batch, xR, xC + 3 * \" + dilationWidth + \", d)\\n            );\\n\\n            \" + updateSnippet + \"\\n          }\\n\\n          int xC = xCCorner + \" + filterWidthNearestVec4 + \";\\n          if (\" + (filterWidthVec4Remainder === 1) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + updateSnippet + \"\\n          } else if (\" + (filterWidthVec4Remainder === 2) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + dilationWidth + \", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + updateSnippet + \"\\n          } else if (\" + (filterWidthVec4Remainder === 3) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + dilationWidth + \", d),\\n              getValue(batch, xR, xC + 2 * \" + dilationWidth + \", d),\\n              initializationValue\\n            );\\n\\n            \" + updateSnippet + \"\\n          }\\n        }\\n        setOutput(\" + returnValue + \");\\n      }\\n    \";\n});\nexport var Pool3DProgram = _createClass(function Pool3DProgram(convInfo, poolType, computePositions) {\n  var flattenPositions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var includeBatchInIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  _classCallCheck(this, Pool3DProgram);\n\n  this.variableNames = ['x'];\n\n  if (poolType === 'avg' && computePositions) {\n    throw new Error('Cannot compute positions for average pool.');\n  }\n\n  var filterWidth = convInfo.filterWidth;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = convInfo.padInfo.front;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  this.outputShape = convInfo.outShape;\n  var isAvgPool = poolType === 'avg';\n  var initializationValue = '0.0';\n\n  if (!isAvgPool) {\n    initializationValue = '-1.0 / 1e-20';\n  }\n\n  if (computePositions) {\n    var _compareOp2 = '>=';\n    this.userCode = \"\\n        const ivec3 strides =\\n            ivec3(\" + strideDepth + \", \" + strideHeight + \", \" + strideWidth + \");\\n        const ivec3 pads = ivec3(\" + padFront + \", \" + padTop + \", \" + padLeft + \");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \" + effectiveFilterDepth + \";\\n              wD += \" + dilationDepth + \") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \" + convInfo.inDepth + \") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \" + effectiveFilterHeight + \";\\n                wR += \" + dilationHeight + \") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \" + effectiveFilterWidth + \";\\n                  wC += \" + dilationWidth + \") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value \" + _compareOp2 + \" currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \" + (flattenPositions ? includeBatchInIndex ? \"(((batch * \" + convInfo.inDepth + \" + xD) * \" + convInfo.inHeight + \" + xR) * \" + convInfo.inWidth + \" + xC) * \" + convInfo.inChannels + \" + ch\" : \"((xD * \" + convInfo.inHeight + \" + xR) * \" + convInfo.inWidth + \" + xC) * \" + convInfo.inChannels + \" + ch\" : \"wD * \" + effectiveFilterHeight + \" * \" + effectiveFilterWidth + \" +\\n                      wR * \" + effectiveFilterWidth + \" + wC\") + \";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    return;\n  }\n\n  var compareOp = 'max';\n  var returnValue = poolType + \"(\" + poolType + \"(\" + poolType + \"(\" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n  if (poolType === 'avg') {\n    returnValue = \"avgValue / count\";\n  }\n\n  var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n  var filterWidthVec4Remainder = filterWidth % 4;\n  var updateSnippet = \"\\n      if (\" + isAvgPool + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = \" + compareOp + \"(values, minMaxValue);\\n      }\\n    \";\n  this.userCode = \"\\n      const ivec3 strides =\\n        ivec3(\" + strideDepth + \", \" + strideHeight + \", \" + strideWidth + \");\\n      const ivec3 pads = ivec3(\" + padFront + \", \" + padTop + \", \" + padLeft + \");\\n      const float initializationValue = \" + initializationValue + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + initializationValue + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \" + effectiveFilterDepth + \";\\n            wD += \" + dilationDepth + \") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \" + convInfo.inDepth + \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \" + effectiveFilterHeight + \";\\n            wR += \" + dilationHeight + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + filterWidthNearestVec4 + \"; wC += 4) {\\n              int xC = xCCorner + wC * \" + dilationWidth + \";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + dilationWidth + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + dilationWidth + \", ch),\\n                getValue(batch, xD, xR, xC + 3 * \" + dilationWidth + \", ch)\\n              );\\n\\n              \" + updateSnippet + \"\\n            }\\n\\n            int xC = xCCorner + \" + filterWidthNearestVec4 + \";\\n            if (\" + (filterWidthVec4Remainder === 1) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + updateSnippet + \"\\n            } else if (\" + (filterWidthVec4Remainder === 2) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + dilationWidth + \", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + updateSnippet + \"\\n            } else if (\" + (filterWidthVec4Remainder === 3) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + dilationWidth + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + dilationWidth + \", ch),\\n                initializationValue\\n              );\\n\\n              \" + updateSnippet + \"\\n            }\\n          }\\n          setOutput(\" + returnValue + \");\\n        }\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/pool_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nexport class Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pool_gpu.js.map"]},"metadata":{},"sourceType":"module"}