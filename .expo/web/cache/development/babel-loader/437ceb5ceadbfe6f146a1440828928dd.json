{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from \"../errors\";\nimport { toList } from \"../utils/generic_utils\";\nimport { InputLayer } from \"./input_layer\";\nimport { SymbolicTensor } from \"./topology\";\n\nfunction assertFeedCompatibility(key, val) {\n  if (key.dtype == null || key.dtype === val.dtype) {\n    return val;\n  }\n\n  try {\n    return cast(val, key.dtype);\n  } catch (err) {\n    throw new ValueError(\"The dtype of the feed (\" + val.dtype + \") can not be cast to the dtype \" + (\"of the key '\" + key.name + \"' (\" + key.dtype + \").\"));\n  }\n}\n\nexport var FeedDict = function () {\n  function FeedDict(feeds) {\n    _classCallCheck(this, FeedDict);\n\n    this.id2Value = {};\n    this.id2Mask = {};\n    this.name2Id = {};\n\n    if (feeds instanceof FeedDict) {\n      for (var id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n\n      for (var _iterator = _createForOfIteratorHelperLoose(feeds), _step; !(_step = _iterator()).done;) {\n        var feed = _step.value;\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n\n  _createClass(FeedDict, [{\n    key: \"add\",\n    value: function add(key, value, mask) {\n      if (this.id2Value[key.id] == null) {\n        this.id2Value[key.id] = assertFeedCompatibility(key, value);\n        this.name2Id[key.name] = key.id;\n\n        if (mask != null) {\n          this.id2Mask[key.id] = mask;\n        }\n      } else {\n        throw new ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addFeed\",\n    value: function addFeed(feed) {\n      this.add(feed.key, feed.value);\n    }\n  }, {\n    key: \"hasKey\",\n    value: function hasKey(key) {\n      return this.id2Value[key.id] != null;\n    }\n  }, {\n    key: \"names\",\n    value: function names() {\n      return Object.keys(this.name2Id);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      if (key instanceof SymbolicTensor) {\n        if (this.id2Value[key.id] == null) {\n          throw new ValueError(\"Nonexistent key: \" + key.name);\n        } else {\n          return this.id2Value[key.id];\n        }\n      } else {\n        var id = this.name2Id[key];\n\n        if (id == null) {\n          throw new ValueError(\"Feed dict has no SymbolicTensor name: \" + key);\n        }\n\n        return this.id2Value[id];\n      }\n    }\n  }, {\n    key: \"getMask\",\n    value: function getMask(key) {\n      if (key instanceof SymbolicTensor) {\n        if (this.id2Value[key.id] == null) {\n          throw new ValueError(\"Nonexistent key: \" + key.name);\n        } else {\n          return this.id2Mask[key.id];\n        }\n      } else {\n        var id = this.name2Id[key];\n\n        if (id == null) {\n          throw new ValueError(\"Feed dict has no SymbolicTensor name: \" + key);\n        }\n\n        return this.id2Mask[id];\n      }\n    }\n  }, {\n    key: \"disposeMasks\",\n    value: function disposeMasks() {\n      if (this.id2Mask != null) {\n        dispose(this.id2Mask);\n      }\n    }\n  }]);\n\n  return FeedDict;\n}();\nvar cachedSorted = {};\nvar cachedRecipientCounts = {};\nexport function execute(fetches, feedDict, kwargs, probe) {\n  var training = kwargs == null ? false : kwargs['training'];\n  var arrayFetches = Array.isArray(fetches);\n  var fetchArray = arrayFetches ? fetches : [fetches];\n  var outputNames = fetchArray.map(function (t) {\n    return t.name;\n  });\n  var finalOutputs = [];\n  var feedNames = feedDict.names();\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(outputNames), _step2; !(_step2 = _iterator2()).done;) {\n    var outputName = _step2.value;\n\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n\n  var fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().join(',');\n  var sorted;\n  var recipientCounts;\n\n  if (cachedSorted[fetchAndFeedKey] == null) {\n    var out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n    cachedSorted[fetchAndFeedKey] = sorted;\n    cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n  }\n\n  sorted = cachedSorted[fetchAndFeedKey];\n  recipientCounts = {};\n\n  if (!training) {\n    _extends(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n  }\n\n  var internalFeedDict = new FeedDict(feedDict);\n\n  for (var i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      var numTensors = memory().numTensors;\n\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    var symbolic = sorted[i];\n    var srcLayer = symbolic.sourceLayer;\n\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n\n    var inputValues = [];\n    var inputMasks = [];\n    var tensorsToDispose = [];\n    var maskExists = false;\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(symbolic.inputs), _step3; !(_step3 = _iterator3()).done;) {\n      var input = _step3.value;\n      var value = internalFeedDict.getValue(input);\n      var mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n\n      if (mask != null) {\n        maskExists = true;\n      }\n\n      if (!training) {\n        recipientCounts[input.name]--;\n\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) && outputNames.indexOf(input.name) === -1 && !value.isDisposed && input.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n\n    var outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n    var outputMask = null;\n\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n\n    var layerOutputs = getNodeOutputs(symbolic);\n    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n\n    for (var _i = 0; _i < outputSymbolicTensors.length; ++_i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[_i])) {\n        internalFeedDict.add(outputSymbolicTensors[_i], outputTensors[_i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n\n      var index = outputNames.indexOf(outputSymbolicTensors[_i].name);\n\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[_i];\n      }\n    }\n\n    if (!training) {\n      dispose(tensorsToDispose);\n    }\n  }\n\n  internalFeedDict.disposeMasks();\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n  util.assert(fetches != null && fetches.length > 0, function () {\n    return \"Expected at least one fetch, got none\";\n  });\n  var finalSorted = [];\n  var finalRecipientMap = {};\n\n  if (fetches.length === 1) {\n    var out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    var visited = new Set();\n\n    for (var _iterator4 = _createForOfIteratorHelperLoose(fetches), _step4; !(_step4 = _iterator4()).done;) {\n      var fetch = _step4.value;\n\n      var _getTopologicalSortAn = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict),\n          sorted = _getTopologicalSortAn.sorted,\n          recipientMap = _getTopologicalSortAn.recipientMap;\n\n      for (var _iterator5 = _createForOfIteratorHelperLoose(sorted), _step5; !(_step5 = _iterator5()).done;) {\n        var symbolicTensor = _step5.value;\n\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n\n      var _loop = function _loop(name) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set();\n        }\n\n        recipientMap[name].forEach(function (recipient) {\n          return finalRecipientMap[name].add(recipient);\n        });\n      };\n\n      for (var name in recipientMap) {\n        _loop(name);\n      }\n    }\n  }\n\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap) {\n  var recipientCounts = {};\n\n  for (var name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n\n  return recipientCounts;\n}\n\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n  var visited = new Set();\n  var sorted = [];\n  var recipientMap = {};\n\n  for (var _iterator6 = _createForOfIteratorHelperLoose(feedDict.names()), _step6; !(_step6 = _iterator6()).done;) {\n    var key = _step6.value;\n    visited.add(key);\n  }\n\n  var stack = [];\n  var marks = [];\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    var top = stack[stack.length - 1];\n\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n\n    var topIsMarked = marks[marks.length - 1] === stack.length - 1;\n\n    if (top.inputs.length === 0 || topIsMarked) {\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      marks.push(stack.length - 1);\n\n      for (var _iterator7 = _createForOfIteratorHelperLoose(top.inputs), _step7; !(_step7 = _iterator7()).done;) {\n        var input = _step7.value;\n\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set();\n        }\n\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue;\n        }\n\n        stack.push(input);\n      }\n    }\n  }\n\n  return {\n    sorted: sorted,\n    recipientMap: recipientMap\n  };\n}\n\nfunction getNodeOutputs(fetch) {\n  var layerOutputs;\n\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    var nodeIndex = null;\n\n    for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (var _iterator8 = _createForOfIteratorHelperLoose(fetch.sourceLayer.inboundNodes[i].outputTensors), _step8; !(_step8 = _iterator8()).done;) {\n        var outputTensor = _step8.value;\n\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n\n  return layerOutputs;\n}","map":{"version":3,"sources":["../../src/engine/executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\nimport { toList } from '../utils/generic_utils';\nimport { InputLayer } from './input_layer';\nimport { SymbolicTensor } from './topology';\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key, val) {\n    // Check dtype compatibility.\n    if (key.dtype == null || key.dtype === val.dtype) {\n        //  a.  If types match, return val tensor as is.\n        return val;\n    }\n    try {\n        //  b. Attempt to convert to expected type.\n        return cast(val, key.dtype);\n    }\n    catch (err) {\n        //  c. If conversion fails, return helpful error.\n        throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n            `of the key '${key.name}' (${key.dtype}).`);\n    }\n}\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n    /**\n     * Constructor, optionally does copy-construction.\n     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n     *   copy-construction will be performed.\n     */\n    constructor(feeds) {\n        this.id2Value = {};\n        this.id2Mask = {};\n        this.name2Id = {};\n        if (feeds instanceof FeedDict) {\n            for (const id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n                if (id in feeds.id2Mask) {\n                    this.id2Mask[id] = feeds.id2Mask[id];\n                }\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (const feed of feeds) {\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    /**\n     * Add a key-value pair to the FeedDict.\n     *\n     * @param key The key of the feed.\n     * @param value The value of the tensor feed.\n     * @param mask The value of the mask feed (optional).\n     * @returns This `FeedDict`.\n     * @throws ValueError: If the key `SymbolicTensor` already exists in the\n     *   `FeedDict`.\n     */\n    add(key, value, mask) {\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = assertFeedCompatibility(key, value);\n            this.name2Id[key.name] = key.id;\n            if (mask != null) {\n                this.id2Mask[key.id] = mask;\n            }\n        }\n        else {\n            throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n        }\n        return this;\n    }\n    /**\n     * Add a Feed to the FeedDict.\n     * @param feed The new `Feed` to add.\n     * @returns This `FeedDict`.\n     */\n    addFeed(feed) {\n        this.add(feed.key, feed.value);\n    }\n    /**\n     * Probe whether a key already exists in the FeedDict.\n     * @param key\n     */\n    hasKey(key) {\n        return this.id2Value[key.id] != null;\n    }\n    /**\n     * Get all the SymbolicTensor available in this FeedDict.\n     */\n    names() {\n        return Object.keys(this.name2Id);\n    }\n    /**\n     * Get the feed value for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed value.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getValue(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Value[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Value[id];\n        }\n    }\n    /**\n     * Get the feed mask for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed mask.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getMask(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Mask[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Mask[id];\n        }\n    }\n    /** Dispose all mask Tensors held by this object. */\n    disposeMasks() {\n        if (this.id2Mask != null) {\n            dispose(this.id2Mask);\n        }\n    }\n}\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nconst cachedSorted = {};\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nconst cachedRecipientCounts = {};\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(fetches, feedDict, kwargs, probe) {\n    const training = kwargs == null ? false : kwargs['training'];\n    const arrayFetches = Array.isArray(fetches);\n    const fetchArray = arrayFetches ? fetches : [fetches];\n    const outputNames = fetchArray.map(t => t.name);\n    const finalOutputs = [];\n    const feedNames = feedDict.names();\n    for (const outputName of outputNames) {\n        if (feedNames.indexOf(outputName) !== -1) {\n            finalOutputs.push(feedDict.getValue(outputName));\n        }\n        else {\n            finalOutputs.push(null);\n        }\n    }\n    if (probe != null) {\n        // For optional probing of memory footprint during execution.\n        probe.maxNumTensors = -Infinity;\n        probe.minNumTensors = Infinity;\n    }\n    // Check cache.\n    const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().join(',');\n    let sorted;\n    let recipientCounts;\n    if (cachedSorted[fetchAndFeedKey] == null) {\n        // Cache doesn't contain the desired combination of fetches. Compute\n        // topological sort for the combination for the first time.\n        const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n        sorted = out.sorted;\n        recipientCounts = out.recipientCounts;\n        // Store results in cache for future use.\n        cachedSorted[fetchAndFeedKey] = sorted;\n        cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n    }\n    sorted = cachedSorted[fetchAndFeedKey];\n    recipientCounts = {};\n    if (!training) {\n        Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n    }\n    const internalFeedDict = new FeedDict(feedDict);\n    // Start iterative execution on the topologically-sorted SymbolicTensors.\n    for (let i = 0; i < sorted.length; ++i) {\n        if (probe != null) {\n            // For optional probing of memory usage during execution.\n            const numTensors = memory().numTensors;\n            if (numTensors > probe.maxNumTensors) {\n                probe.maxNumTensors = numTensors;\n            }\n            if (numTensors < probe.minNumTensors) {\n                probe.minNumTensors = numTensors;\n            }\n        }\n        const symbolic = sorted[i];\n        const srcLayer = symbolic.sourceLayer;\n        if (srcLayer instanceof InputLayer) {\n            continue;\n        }\n        const inputValues = [];\n        const inputMasks = [];\n        const tensorsToDispose = [];\n        let maskExists = false;\n        for (const input of symbolic.inputs) {\n            const value = internalFeedDict.getValue(input);\n            const mask = internalFeedDict.getMask(input);\n            inputValues.push(value);\n            inputMasks.push(mask);\n            if (mask != null) {\n                maskExists = true;\n            }\n            if (!training) {\n                recipientCounts[input.name]--;\n                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n                    outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n                    input.sourceLayer.stateful !== true) {\n                    tensorsToDispose.push(value);\n                }\n            }\n        }\n        if (maskExists) {\n            kwargs = kwargs || {};\n            kwargs['mask'] = inputMasks[0];\n        }\n        const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n        let outputMask = null;\n        if (srcLayer.supportsMasking) {\n            outputMask = srcLayer.computeMask(inputValues, inputMasks);\n        }\n        const layerOutputs = getNodeOutputs(symbolic);\n        const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n        for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n            if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n                internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n            }\n            const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n            if (index !== -1) {\n                finalOutputs[index] = outputTensors[i];\n            }\n        }\n        if (!training) {\n            // Clean up Tensors that are no longer needed.\n            dispose(tensorsToDispose);\n        }\n    }\n    // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n    // tensors as we go, because these tensors are sometimes passed over a\n    // series of mutliple layers, i.e., not obeying the immediate input\n    // relations in the graph. If this becomes a memory-usage concern,\n    // we can improve this in the future.\n    internalFeedDict.disposeMasks();\n    return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n    util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n    let finalSorted = [];\n    let finalRecipientMap = {};\n    if (fetches.length === 1) {\n        // Special-casing 1 fetch for efficiency.\n        const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n        finalSorted = out.sorted;\n        finalRecipientMap = out.recipientMap;\n    }\n    else {\n        const visited = new Set();\n        for (const fetch of fetches) {\n            const { sorted, recipientMap } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n            // Merge sorted SymbolicTensor Arrays.\n            for (const symbolicTensor of sorted) {\n                if (!visited.has(symbolicTensor.name)) {\n                    finalSorted.push(symbolicTensor);\n                    visited.add(symbolicTensor.name);\n                }\n            }\n            // Merge recipient maps.\n            for (const name in recipientMap) {\n                if (finalRecipientMap[name] == null) {\n                    finalRecipientMap[name] = new Set();\n                }\n                recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));\n            }\n        }\n    }\n    return {\n        sorted: finalSorted,\n        recipientCounts: recipientMap2Counts(finalRecipientMap)\n    };\n}\nfunction recipientMap2Counts(recipientMap) {\n    const recipientCounts = {};\n    for (const name in recipientMap) {\n        recipientCounts[name] = recipientMap[name].size;\n    }\n    return recipientCounts;\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n    const visited = new Set();\n    const sorted = [];\n    const recipientMap = {};\n    // Put keys of the feedDict into visited first, so they don't have to be\n    // walked. This is needed in case where there are feeds for intermediate\n    // SymbolicTensors of the graph.\n    for (const key of feedDict.names()) {\n        visited.add(key);\n    }\n    const stack = [];\n    const marks = [];\n    // Initial population of stack and marks.\n    stack.push(fetch);\n    while (stack.length > 0) {\n        const top = stack[stack.length - 1];\n        if (visited.has(top.name)) {\n            stack.pop();\n            continue;\n        }\n        const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n        if (top.inputs.length === 0 || topIsMarked) {\n            // Input SymbolicTensor or all children have been visited.\n            stack.pop();\n            sorted.push(top);\n            visited.add(top.name);\n            if (topIsMarked) {\n                marks.pop();\n            }\n        }\n        else {\n            // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n            // been visited yet. Push them onto the stack.\n            marks.push(stack.length - 1);\n            for (const input of top.inputs) {\n                // Increment the recipient count. Note that this needs to happen\n                // regardless of whether the SymbolicTensor has been visited before.\n                if (recipientMap[input.name] == null) {\n                    recipientMap[input.name] = new Set();\n                }\n                recipientMap[input.name].add(top.name);\n                if (visited.has(input.name)) {\n                    continue; // Avoid repeated visits to the same SymbolicTensor.\n                }\n                stack.push(input);\n            }\n        }\n    }\n    return { sorted, recipientMap };\n}\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch) {\n    let layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        let nodeIndex = null;\n        for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n                .outputTensors) {\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n//# sourceMappingURL=executor.js.map"]},"metadata":{},"sourceType":"module"}