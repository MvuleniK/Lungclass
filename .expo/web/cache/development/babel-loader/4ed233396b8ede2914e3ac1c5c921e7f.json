{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from \"../kernel_utils/shared\";\nimport { TileProgram } from \"../tile_gpu\";\nexport function tile(params) {\n  var inputs = params.inputs,\n      backend = params.backend,\n      attrs = params.attrs;\n  var x = inputs.x;\n  var reps = attrs.reps;\n\n  if (x.dtype === 'string') {\n    var data = backend.readSync(x.dataId);\n    var decodedData = data.map(function (d) {\n      return util.decodeString(d);\n    });\n    var buf = buffer(x.shape, x.dtype, decodedData);\n    var outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  var program = new TileProgram(x.shape, reps);\n  var output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport var tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};","map":{"version":3,"sources":["../../src/kernels/Tile.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,EAAsD,IAAtD,EAAmF,IAAnF,QAA8F,uBAA9F;AAGA,SAAQ,WAAR;AACA,SAAQ,WAAR;AAEA,OAAM,SAAU,IAAV,CACF,MADE,EACuE;EAE3E,IAAO,MAAP,GAAiC,MAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,MAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,MAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;;EAEA,IAAI,CAAC,CAAC,KAAF,KAAY,QAAhB,EAA0B;IAGxB,IAAM,IAAI,GAAG,OAAO,CAAC,QAAR,CAAiB,CAAC,CAAC,MAAnB,CAAb;IACA,IAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,UAAA,CAAC;MAAA,OAAI,IAAI,CAAC,YAAL,CAAkB,CAAlB,CAAJ;IAAA,CAAV,CAApB;IACA,IAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,EAAmB,WAAnB,CAAlB;IACA,IAAM,MAAM,GAAG,WAAW,CAAC,GAAD,EAAM,IAAN,CAA1B;IACA,OAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,KAA5C,EAAmD,MAAM,CAAC,MAA1D,CAAP;EACD;;EAED,IAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,CAAC,CAAC,KAAlB,EAAyB,IAAzB,CAAhB;EACA,IAAM,MAAM,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,CAAjC,EAAsC,CAAC,CAAC,KAAxC,CAAf;EAEA,OAAO,MAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,OAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n    const { inputs, backend, attrs } = params;\n    const { x } = inputs;\n    const { reps } = attrs;\n    if (x.dtype === 'string') {\n        // Even thought string tensor is always on CPU, just to be consistent on how\n        // to access tensor data.\n        const data = backend.readSync(x.dataId);\n        const decodedData = data.map(d => util.decodeString(d));\n        const buf = buffer(x.shape, x.dtype, decodedData);\n        const outBuf = tileImplCPU(buf, reps);\n        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const program = new TileProgram(x.shape, reps);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'webgl',\n    kernelFunc: tile,\n};\n//# sourceMappingURL=Tile.js.map"]},"metadata":{},"sourceType":"module"}