{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from \"../environment\";\nexport var getNodeFetch = {\n  importFetch: function importFetch() {\n    return require('node-fetch');\n  }\n};\nvar systemFetch;\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport var PlatformNode = function () {\n  function PlatformNode() {\n    _classCallCheck(this, PlatformNode);\n\n    this.util = require('util');\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  _createClass(PlatformNode, [{\n    key: \"fetch\",\n    value: function fetch(path, requestInits) {\n      if (env().global.fetch != null) {\n        return env().global.fetch(path, requestInits);\n      }\n\n      if (systemFetch == null) {\n        systemFetch = getNodeFetch.importFetch();\n      }\n\n      return systemFetch(path, requestInits);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      var time = process.hrtime();\n      return time[0] * 1000 + time[1] / 1000000;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, encoding) {\n      if (encoding !== 'utf-8' && encoding !== 'utf8') {\n        throw new Error(\"Node built-in encoder only supports utf-8, but got \" + encoding);\n      }\n\n      return this.textEncoder.encode(text);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes, encoding) {\n      if (bytes.length === 0) {\n        return '';\n      }\n\n      return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n  }]);\n\n  return PlatformNode;\n}();\n\nif (env().get('IS_NODE')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"sources":["../../src/platforms/platform_node.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR;AAKA,OAAO,IAAM,YAAY,GAAG;EAE1B,WAAW,EAAE;IAAA,OAAM,OAAO,CAAC,YAAD,CAAb;EAAA;AAFa,CAArB;AAMP,IAAI,WAAJ;AAGA,OAAM,SAAU,gBAAV,GAA0B;EAC9B,WAAW,GAAG,IAAd;AACD;AACD,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAyC;EAC7C,WAAW,GAAG,OAAd;AACD;AACD,OAAM,SAAU,cAAV,GAAwB;EAC5B,OAAO,WAAP;AACD;AAED,WAAa,YAAb;EAKE,wBAAA;IAAA;;IAEE,KAAK,IAAL,GAAY,OAAO,CAAC,MAAD,CAAnB;IAGA,KAAK,WAAL,GAAmB,IAAI,KAAK,IAAL,CAAU,WAAd,EAAnB;EACD;;EAXH;IAAA;IAAA,OAaE,eAAM,IAAN,EAAoB,YAApB,EAA8C;MAC5C,IAAI,GAAG,GAAG,MAAN,CAAa,KAAb,IAAsB,IAA1B,EAAgC;QAC9B,OAAO,GAAG,GAAG,MAAN,CAAa,KAAb,CAAmB,IAAnB,EAAyB,YAAzB,CAAP;MACD;;MAED,IAAI,WAAW,IAAI,IAAnB,EAAyB;QACvB,WAAW,GAAG,YAAY,CAAC,WAAb,EAAd;MACD;;MACD,OAAO,WAAW,CAAC,IAAD,EAAO,YAAP,CAAlB;IACD;EAtBH;IAAA;IAAA,OAwBE,eAAG;MACD,IAAM,IAAI,GAAG,OAAO,CAAC,MAAR,EAAb;MACA,OAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV,GAAiB,IAAI,CAAC,CAAD,CAAJ,GAAU,OAAlC;IACD;EA3BH;IAAA;IAAA,OA6BE,gBAAO,IAAP,EAAqB,QAArB,EAAqC;MACnC,IAAI,QAAQ,KAAK,OAAb,IAAwB,QAAQ,KAAK,MAAzC,EAAiD;QAC/C,MAAM,IAAI,KAAJ,yDACoD,QADpD,CAAN;MAED;;MACD,OAAO,KAAK,WAAL,CAAiB,MAAjB,CAAwB,IAAxB,CAAP;IACD;EAnCH;IAAA;IAAA,OAoCE,gBAAO,KAAP,EAA0B,QAA1B,EAA0C;MACxC,IAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;QACtB,OAAO,EAAP;MACD;;MACD,OAAO,IAAI,KAAK,IAAL,CAAU,WAAd,CAA0B,QAA1B,EAAoC,MAApC,CAA2C,KAA3C,CAAP;IACD;EAzCH;;EAAA;AAAA;;AA4CA,IAAI,GAAG,GAAG,GAAN,CAAU,SAAV,CAAJ,EAA0B;EACxB,GAAG,GAAG,WAAN,CAAkB,MAAlB,EAA0B,IAAI,YAAJ,EAA1B;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n    // tslint:disable-next-line:no-require-imports\n    importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n    systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n    systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n    return systemFetch;\n}\nexport class PlatformNode {\n    constructor() {\n        // tslint:disable-next-line:no-require-imports\n        this.util = require('util');\n        // According to the spec, the built-in encoder can do only UTF-8 encoding.\n        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n        this.textEncoder = new this.util.TextEncoder();\n    }\n    fetch(path, requestInits) {\n        if (env().global.fetch != null) {\n            return env().global.fetch(path, requestInits);\n        }\n        if (systemFetch == null) {\n            systemFetch = getNodeFetch.importFetch();\n        }\n        return systemFetch(path, requestInits);\n    }\n    now() {\n        const time = process.hrtime();\n        return time[0] * 1000 + time[1] / 1000000;\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        if (bytes.length === 0) {\n            return '';\n        }\n        return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_NODE')) {\n    env().setPlatform('node', new PlatformNode());\n}\n//# sourceMappingURL=platform_node.js.map"]},"metadata":{},"sourceType":"module"}