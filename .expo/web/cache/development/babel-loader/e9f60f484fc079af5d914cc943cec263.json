{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { webgl_util } from '@tensorflow/tfjs-backend-webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as drawTextureProgramInfo from \"./draw_texture_program_info\";\nimport * as resizeBilinearProgramInfo from \"./resize_bilinear_program_info\";\nimport * as resizeNNProgramInfo from \"./resize_nearest_neigbor_program_info\";\nvar fboCache = new WeakMap();\nvar resizeTextureCache = new WeakMap();\nvar resizeTextureDimsCache = new WeakMap();\nvar programCacheByContext = new WeakMap();\nexport function downloadTextureData(gl, texture, dims) {\n  var width = dims.width,\n      height = dims.height,\n      depth = dims.depth;\n  var pixels = new Uint8Array(width * height * depth);\n\n  if (!fboCache.has(gl)) {\n    fboCache.set(gl, createFrameBuffer(gl));\n  }\n\n  var fbo = fboCache.get(gl);\n  webgl_util.callAndCheck(gl, function () {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    var level = 0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, level);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    var format = depth === 3 ? gl.RGB : gl.RGBA;\n    var x = 0;\n    var y = 0;\n    gl.readPixels(x, y, width, height, format, gl.UNSIGNED_BYTE, pixels);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  });\n  return pixels;\n}\nexport function uploadTextureData(imageData, gl, dims, texture) {\n  var targetTextureWidth = dims.width;\n  var targetTextureHeight = dims.height;\n  tf.util.assert(targetTextureWidth * targetTextureHeight * dims.depth === imageData.length, function () {\n    return 'uploadTextureData Error: imageData length must match w * h * d';\n  });\n  var targetTexture = texture || gl.createTexture();\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  var level = 0;\n  var format = dims.depth === 3 ? gl.RGB : gl.RGBA;\n  var internalFormat = format;\n  var border = 0;\n  var type = gl.UNSIGNED_BYTE;\n  webgl_util.callAndCheck(gl, function () {\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, imageData);\n  });\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return targetTexture;\n}\nexport function drawTexture(gl, texture, dims, flipHorizontal) {\n  var _drawTextureProgram = drawTextureProgram(gl, flipHorizontal),\n      program = _drawTextureProgram.program,\n      vao = _drawTextureProgram.vao,\n      vertices = _drawTextureProgram.vertices,\n      uniformLocations = _drawTextureProgram.uniformLocations;\n\n  gl.useProgram(program);\n  gl.bindVertexArray(vao);\n  var TEXTURE_UNIT = 0;\n  gl.uniform1i(uniformLocations.get('inputTexture'), TEXTURE_UNIT);\n  gl.activeTexture(gl.TEXTURE0 + TEXTURE_UNIT);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(0, 0, dims.width, dims.height);\n  gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n  gl.bindVertexArray(null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.useProgram(null);\n}\nexport function runResizeProgram(gl, inputTexture, inputDims, outputDims, alignCorners, interpolation) {\n  var _resizeProgram = resizeProgram(gl, inputDims, outputDims, alignCorners, interpolation),\n      program = _resizeProgram.program,\n      vao = _resizeProgram.vao,\n      vertices = _resizeProgram.vertices,\n      uniformLocations = _resizeProgram.uniformLocations;\n\n  gl.useProgram(program);\n  webgl_util.callAndCheck(gl, function () {\n    gl.bindVertexArray(vao);\n  });\n  gl.uniform1i(uniformLocations.get('inputTexture'), 1);\n  gl.activeTexture(gl.TEXTURE0 + 1);\n  gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n\n  if (!resizeTextureCache.has(gl)) {\n    resizeTextureCache.set(gl, gl.createTexture());\n  }\n\n  var resizeTexture = resizeTextureCache.get(gl);\n  var targetTexture = resizeTexture;\n  var targetTextureWidth = outputDims.width;\n  var targetTextureHeight = outputDims.height;\n  gl.activeTexture(gl.TEXTURE0 + 2);\n  gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  if (!resizeTextureDimsCache.has(gl)) {\n    resizeTextureDimsCache.set(gl, {\n      width: -1,\n      height: -1\n    });\n  }\n\n  var resizeTextureDims = resizeTextureDimsCache.get(gl);\n\n  if (resizeTextureDims == null || resizeTextureDims.width !== targetTextureWidth || resizeTextureDims.height !== targetTextureHeight) {\n    var level = 0;\n    var format = outputDims.depth === 3 ? gl.RGB : gl.RGBA;\n    var internalFormat = format;\n    var border = 0;\n    var type = gl.UNSIGNED_BYTE;\n    webgl_util.callAndCheck(gl, function () {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, null);\n    });\n    resizeTextureDimsCache.set(gl, {\n      width: targetTextureWidth,\n      height: targetTextureHeight\n    });\n  }\n\n  if (!fboCache.has(gl)) {\n    fboCache.set(gl, createFrameBuffer(gl));\n  }\n\n  var fbo = fboCache.get(gl);\n  gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, targetTexture, 0);\n  var fboComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  if (fboComplete !== gl.FRAMEBUFFER_COMPLETE) {\n    switch (fboComplete) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT');\n\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_UNSUPPORTED');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE');\n\n      default:\n        throw new Error('createFrameBuffer Error: Other or unknown fbo complete status: ' + (\"\" + fboComplete));\n    }\n  }\n\n  gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.useProgram(null);\n  gl.bindVertexArray(null);\n  return targetTexture;\n}\n\nfunction createFrameBuffer(gl) {\n  var fb = gl.createFramebuffer();\n\n  if (fb == null) {\n    throw new Error('Could not create framebuffer');\n  }\n\n  return fb;\n}\n\nfunction drawTextureProgram(gl, flipHorizontal) {\n  if (!programCacheByContext.has(gl)) {\n    programCacheByContext.set(gl, new Map());\n  }\n\n  var programCache = programCacheByContext.get(gl);\n  var cacheKey = \"drawTexture_\" + flipHorizontal;\n\n  if (!programCache.has(cacheKey)) {\n    var vertSource = drawTextureProgramInfo.vertexShaderSource(flipHorizontal);\n    var fragSource = drawTextureProgramInfo.fragmentShaderSource();\n    var vertices = drawTextureProgramInfo.vertices();\n    var texCoords = drawTextureProgramInfo.texCoords();\n    var programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n    programCache.set(cacheKey, programObjects);\n  }\n\n  return programCache.get(cacheKey);\n}\n\nfunction resizeProgram(gl, sourceDims, targetDims, alignCorners, interpolation) {\n  if (!programCacheByContext.has(gl)) {\n    programCacheByContext.set(gl, new Map());\n  }\n\n  var programCache = programCacheByContext.get(gl);\n  var cacheKey = \"resize_\" + sourceDims.width + \"_\" + sourceDims.height + \"_\" + sourceDims.depth + \"_\" + targetDims.width + \"_\" + targetDims.height + \"_\" + targetDims.depth + \"_\" + alignCorners + \"_\" + interpolation;\n\n  if (!programCache.has(cacheKey)) {\n    var vertSource = resizeNNProgramInfo.vertexShaderSource();\n    var fragSource;\n\n    if (interpolation === 'nearest_neighbor') {\n      fragSource = resizeNNProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n    } else {\n      fragSource = resizeBilinearProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n    }\n\n    var vertices = resizeNNProgramInfo.vertices();\n    var texCoords = resizeNNProgramInfo.texCoords();\n    var programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n    programCache.set(cacheKey, programObjects);\n  }\n\n  return programCache.get(cacheKey);\n}\n\nfunction createProgramObjects(gl, vertexShaderSource, fragmentShaderSource, vertices, texCoords) {\n  var vertShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertShader, vertexShaderSource);\n  gl.compileShader(vertShader);\n  var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragShader, fragmentShaderSource);\n  gl.compileShader(fragShader);\n  var program = gl.createProgram();\n  gl.attachShader(program, vertShader);\n  gl.attachShader(program, fragShader);\n  gl.linkProgram(program);\n  gl.validateProgram(program);\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  webgl_util.callAndCheck(gl, function () {\n    var positionAttrib = gl.getAttribLocation(program, 'position');\n    var vertsCoordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertsCoordsBuffer);\n    gl.enableVertexAttribArray(positionAttrib);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    var texCoordsAttrib = gl.getAttribLocation(program, 'texCoords');\n    var texCoordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(texCoordsAttrib);\n    gl.vertexAttribPointer(texCoordsAttrib, 2, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  });\n  var uniformLocations = new Map();\n  webgl_util.callAndCheck(gl, function () {\n    var inputTextureLoc = gl.getUniformLocation(program, 'inputTexture');\n    uniformLocations.set('inputTexture', inputTextureLoc);\n  });\n  gl.bindVertexArray(null);\n  return {\n    program: program,\n    vao: vao,\n    vertices: vertices,\n    uniformLocations: uniformLocations\n  };\n}","map":{"version":3,"sources":["../../src/camera/camera_webgl_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { webgl_util } from '@tensorflow/tfjs-backend-webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as drawTextureProgramInfo from './draw_texture_program_info';\nimport * as resizeBilinearProgramInfo from './resize_bilinear_program_info';\nimport * as resizeNNProgramInfo from './resize_nearest_neigbor_program_info';\n// Shared cached frameBuffer object from external context\nconst fboCache = new WeakMap();\n// Internal target texture used for resizing camera texture input\nconst resizeTextureCache = new WeakMap();\nconst resizeTextureDimsCache = new WeakMap();\n// Cache for shader programs and associated vertex array buffers.\nconst programCacheByContext = new WeakMap();\n/**\n * Download data from an texture.\n *\n * @param gl\n * @param texture\n * @param dims\n */\nexport function downloadTextureData(gl, texture, dims) {\n    const { width, height, depth } = dims;\n    const pixels = new Uint8Array(width * height * depth);\n    if (!fboCache.has(gl)) {\n        fboCache.set(gl, createFrameBuffer(gl));\n    }\n    const fbo = fboCache.get(gl);\n    webgl_util.callAndCheck(gl, () => {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    });\n    webgl_util.callAndCheck(gl, () => {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    webgl_util.callAndCheck(gl, () => {\n        const level = 0;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, level);\n    });\n    webgl_util.callAndCheck(gl, () => {\n        const format = depth === 3 ? gl.RGB : gl.RGBA;\n        const x = 0;\n        const y = 0;\n        gl.readPixels(x, y, width, height, format, gl.UNSIGNED_BYTE, pixels);\n    });\n    // Unbind framebuffer\n    webgl_util.callAndCheck(gl, () => {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    });\n    return pixels;\n}\n/**\n * Upload image data to a texture.\n *\n * @param imageData data to upload\n * @param gl gl context to use\n * @param dims image size\n * @param texture optional texture to upload data to. If none is passed a new\n *     texture will be returned\n */\nexport function uploadTextureData(imageData, gl, dims, texture) {\n    const targetTextureWidth = dims.width;\n    const targetTextureHeight = dims.height;\n    tf.util.assert(targetTextureWidth * targetTextureHeight * dims.depth ===\n        imageData.length, () => 'uploadTextureData Error: imageData length must match w * h * d');\n    const targetTexture = texture || gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const level = 0;\n    const format = dims.depth === 3 ? gl.RGB : gl.RGBA;\n    const internalFormat = format;\n    const border = 0;\n    const type = gl.UNSIGNED_BYTE;\n    webgl_util.callAndCheck(gl, () => {\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, imageData);\n    });\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return targetTexture;\n}\n/**\n * Render a texture to the default framebuffer (i.e. screen)\n *\n * @param gl WebGL context to use\n * @param texture texture to render\n * @param dims texture size\n */\nexport function drawTexture(gl, texture, dims, flipHorizontal) {\n    const { program, vao, vertices, uniformLocations } = drawTextureProgram(gl, flipHorizontal);\n    gl.useProgram(program);\n    gl.bindVertexArray(vao);\n    // Set texture sampler uniform\n    const TEXTURE_UNIT = 0;\n    gl.uniform1i(uniformLocations.get('inputTexture'), TEXTURE_UNIT);\n    gl.activeTexture(gl.TEXTURE0 + TEXTURE_UNIT);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // Draw to screen\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, dims.width, dims.height);\n    // gl.clearColor(1, 1, 0, 1);\n    // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n    gl.bindVertexArray(null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.useProgram(null);\n}\nexport function runResizeProgram(gl, inputTexture, inputDims, outputDims, alignCorners, interpolation) {\n    const { program, vao, vertices, uniformLocations } = resizeProgram(gl, inputDims, outputDims, alignCorners, interpolation);\n    gl.useProgram(program);\n    // Set up geometry\n    webgl_util.callAndCheck(gl, () => {\n        gl.bindVertexArray(vao);\n    });\n    //\n    // Set up input texture\n    //\n    gl.uniform1i(uniformLocations.get('inputTexture'), 1);\n    gl.activeTexture(gl.TEXTURE0 + 1);\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n    //\n    // Set up output texture.\n    //\n    if (!resizeTextureCache.has(gl)) {\n        resizeTextureCache.set(gl, gl.createTexture());\n    }\n    const resizeTexture = resizeTextureCache.get(gl);\n    const targetTexture = resizeTexture;\n    const targetTextureWidth = outputDims.width;\n    const targetTextureHeight = outputDims.height;\n    gl.activeTexture(gl.TEXTURE0 + 2);\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    // Reallocate texture storage if target size has changed.\n    if (!resizeTextureDimsCache.has(gl)) {\n        resizeTextureDimsCache.set(gl, { width: -1, height: -1 });\n    }\n    const resizeTextureDims = resizeTextureDimsCache.get(gl);\n    if (resizeTextureDims == null ||\n        resizeTextureDims.width !== targetTextureWidth ||\n        resizeTextureDims.height !== targetTextureHeight) {\n        const level = 0;\n        const format = outputDims.depth === 3 ? gl.RGB : gl.RGBA;\n        const internalFormat = format;\n        const border = 0;\n        const type = gl.UNSIGNED_BYTE;\n        webgl_util.callAndCheck(gl, () => {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, null);\n        });\n        resizeTextureDimsCache.set(gl, { width: targetTextureWidth, height: targetTextureHeight });\n    }\n    //\n    // Render to output texture\n    //\n    if (!fboCache.has(gl)) {\n        fboCache.set(gl, createFrameBuffer(gl));\n    }\n    const fbo = fboCache.get(gl);\n    gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, targetTexture, 0);\n    const fboComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (fboComplete !== gl.FRAMEBUFFER_COMPLETE) {\n        switch (fboComplete) {\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT');\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_UNSUPPORTED');\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS');\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE');\n            default:\n                throw new Error('createFrameBuffer Error: Other or unknown fbo complete status: ' +\n                    `${fboComplete}`);\n        }\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n    // Restore previous state\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.useProgram(null);\n    gl.bindVertexArray(null);\n    return targetTexture;\n}\nfunction createFrameBuffer(gl) {\n    const fb = gl.createFramebuffer();\n    if (fb == null) {\n        throw new Error('Could not create framebuffer');\n    }\n    return fb;\n}\nfunction drawTextureProgram(gl, flipHorizontal) {\n    if (!programCacheByContext.has(gl)) {\n        programCacheByContext.set(gl, new Map());\n    }\n    const programCache = programCacheByContext.get(gl);\n    const cacheKey = `drawTexture_${flipHorizontal}`;\n    if (!programCache.has(cacheKey)) {\n        const vertSource = drawTextureProgramInfo.vertexShaderSource(flipHorizontal);\n        const fragSource = drawTextureProgramInfo.fragmentShaderSource();\n        const vertices = drawTextureProgramInfo.vertices();\n        const texCoords = drawTextureProgramInfo.texCoords();\n        const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n        programCache.set(cacheKey, programObjects);\n    }\n    return programCache.get(cacheKey);\n}\nfunction resizeProgram(gl, sourceDims, targetDims, alignCorners, interpolation) {\n    if (!programCacheByContext.has(gl)) {\n        programCacheByContext.set(gl, new Map());\n    }\n    const programCache = programCacheByContext.get(gl);\n    const cacheKey = `resize_${sourceDims.width}_${sourceDims.height}_${sourceDims.depth}_${targetDims.width}_${targetDims.height}_${targetDims.depth}_${alignCorners}_${interpolation}`;\n    if (!programCache.has(cacheKey)) {\n        const vertSource = resizeNNProgramInfo.vertexShaderSource();\n        let fragSource;\n        if (interpolation === 'nearest_neighbor') {\n            fragSource = resizeNNProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n        }\n        else {\n            fragSource = resizeBilinearProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n        }\n        const vertices = resizeNNProgramInfo.vertices();\n        const texCoords = resizeNNProgramInfo.texCoords();\n        const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n        programCache.set(cacheKey, programObjects);\n    }\n    return programCache.get(cacheKey);\n}\nfunction createProgramObjects(gl, vertexShaderSource, fragmentShaderSource, vertices, texCoords) {\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertShader, vertexShaderSource);\n    gl.compileShader(vertShader);\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragShader, fragmentShaderSource);\n    gl.compileShader(fragShader);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n    // Use a vertex array objects to record geometry info\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    // Set up geometry\n    webgl_util.callAndCheck(gl, () => {\n        const positionAttrib = gl.getAttribLocation(program, 'position');\n        const vertsCoordsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertsCoordsBuffer);\n        gl.enableVertexAttribArray(positionAttrib);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    });\n    webgl_util.callAndCheck(gl, () => {\n        const texCoordsAttrib = gl.getAttribLocation(program, 'texCoords');\n        const texCoordsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, texCoordsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(texCoordsAttrib);\n        gl.vertexAttribPointer(texCoordsAttrib, 2, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    });\n    const uniformLocations = new Map();\n    webgl_util.callAndCheck(gl, () => {\n        const inputTextureLoc = gl.getUniformLocation(program, 'inputTexture');\n        uniformLocations.set('inputTexture', inputTextureLoc);\n    });\n    // Unbind\n    gl.bindVertexArray(null);\n    return {\n        program,\n        vao,\n        vertices,\n        uniformLocations,\n    };\n}\n//# sourceMappingURL=camera_webgl_util.js.map"]},"metadata":{},"sourceType":"module"}