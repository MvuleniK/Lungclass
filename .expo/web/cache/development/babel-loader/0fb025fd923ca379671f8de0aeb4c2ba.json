{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from \"./shader_compiler\";\nexport function compileProgram(gpgpu, program, inputs, output) {\n  var userCode = program.userCode;\n  var inputInfos = inputs.map(function (input, i) {\n    var shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n\n    return {\n      name: program.variableNames[i],\n      shapeInfo: shapeInfo\n    };\n  });\n  var inShapeInfos = inputInfos.map(function (x) {\n    return x.shapeInfo;\n  });\n  var outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  var source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n  var webGLProgram = gpgpu.createProgram(source);\n  var infLoc = null;\n  var nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  var uniformLocations = {};\n\n  for (var i = 0; i < program.variableNames.length; i++) {\n    var varName = program.variableNames[i];\n    var shouldThrow = false;\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[\"offset\" + varName] = gpgpu.getUniformLocation(webGLProgram, \"offset\" + varName, shouldThrow);\n  }\n\n  return {\n    program: program,\n    source: source,\n    webGLProgram: webGLProgram,\n    uniformLocations: uniformLocations,\n    inShapeInfos: inShapeInfos,\n    outShapeInfo: outShapeInfo,\n    infLoc: infLoc,\n    nanLoc: nanLoc\n  };\n}\n\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\"Binary was compiled with \" + shapeInfos.length + \" inputs, but \" + (\"was executed with \" + inputs.length + \" inputs\"));\n  }\n\n  shapeInfos.forEach(function (s, i) {\n    var shapeA = s.logicalShape;\n    var input = inputs[i];\n    var shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\"Binary was compiled with different shapes than \" + (\"the current args. Shapes \" + shapeA + \" and \" + shapeB + \" must match\"));\n    }\n\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    var texShapeA = s.texShape;\n    var texShapeB = input.isUniform ? null : input.texData.texShape;\n\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\"Binary was compiled with different texture shapes than the\" + (\" current args. Shape \" + texShapeA + \" and \" + texShapeB + \" must match\"));\n    }\n  });\n}\n\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  var outTex = output.texData.texture;\n  var outTexShape = output.texData.texShape;\n\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n\n  gpgpu.setProgram(binary.webGLProgram);\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  inputs.forEach(function (input, i) {\n    var varName = binary.program.variableNames[i];\n    var varLoc = binary.uniformLocations[varName];\n    var varOffsetLoc = binary.uniformLocations[\"offset\" + varName];\n\n    if (varLoc == null) {\n      return;\n    }\n\n    if (input.isUniform) {\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        var vals = input.uniformValues;\n\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n\n      return;\n    }\n\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  var keyInputs = '';\n  inputs.concat(output).forEach(function (x) {\n    var hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;\n    var texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += x.shape + \"_\" + texShape + \"_\" + hasOffset;\n  });\n  var keyUserCode = program.userCode;\n  var key = program.constructor.name;\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}","map":{"version":3,"sources":["../src/gpgpu_math.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const userCode = program.userCode;\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n    const webGLProgram = gpgpu.createProgram(source);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const uniformLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        const shouldThrow = false;\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    }\n    return {\n        program,\n        source,\n        webGLProgram,\n        uniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\n//# sourceMappingURL=gpgpu_math.js.map"]},"metadata":{},"sourceType":"module"}