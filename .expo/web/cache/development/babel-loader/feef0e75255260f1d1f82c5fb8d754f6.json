{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport var flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var image = inputs.image;\n    var cpuBackend = backend;\n    var output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n\n    var _image$shape = _slicedToArray(image.shape, 4),\n        batch = _image$shape[0],\n        imageHeight = _image$shape[1],\n        imageWidth = _image$shape[2],\n        numChannels = _image$shape[3];\n\n    var imageVals = cpuBackend.data.get(image.dataId).values;\n\n    for (var batchIdx = 0; batchIdx < batch; batchIdx++) {\n      var batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (var row = 0; row < imageHeight; row++) {\n        var rowOffset = row * (imageWidth * numChannels);\n\n        for (var col = 0; col < imageWidth; col++) {\n          var colOffset = col * numChannels;\n\n          for (var channel = 0; channel < numChannels; channel++) {\n            var coords = [batch, row, col, channel];\n            var x = coords[2];\n            var coordX = Math.round(imageWidth - x);\n            var outIdx = batchOffset + rowOffset + colOffset + channel;\n            var outputValue = imageVals[outIdx];\n\n            if (coordX >= 0 && coordX < imageWidth) {\n              var rotatedColOffset = coordX * numChannels;\n              var imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    var dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId: dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/FlipLeftRight.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,aAAR,EAA4C,IAA5C,QAAuD,uBAAvD;AAIA,OAAO,IAAM,mBAAmB,GAAiB;EAC/C,UAAU,EAAE,aADmC;EAE/C,WAAW,EAAE,KAFkC;EAG/C,UAAU,EAAE,0BAA6B;IAAA,IAA3B,MAA2B,QAA3B,MAA2B;IAAA,IAAnB,KAAmB,QAAnB,KAAmB;IAAA,IAAZ,OAAY,QAAZ,OAAY;IACvC,IAAO,KAAP,GAAgB,MAAhB,CAAO,KAAP;IACA,IAAM,UAAU,GAAG,OAAnB;IAEA,IAAM,MAAM,GAAG,IAAI,CAAC,sBAAL,CACX,KAAK,CAAC,KADK,EACqB,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,CADrB,CAAf;;IAEA,kCAAsD,KAAK,CAAC,KAA5D;IAAA,IAAO,KAAP;IAAA,IAAc,WAAd;IAAA,IAA2B,UAA3B;IAAA,IAAuC,WAAvC;;IAEA,IAAM,SAAS,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,KAAK,CAAC,MAA1B,EAAkC,MAApD;;IAEA,KAAK,IAAI,QAAQ,GAAG,CAApB,EAAuB,QAAQ,GAAG,KAAlC,EAAyC,QAAQ,EAAjD,EAAqD;MACnD,IAAM,WAAW,GAAG,QAAQ,GAAG,UAAX,GAAwB,WAAxB,GAAsC,WAA1D;;MAEA,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,WAAxB,EAAqC,GAAG,EAAxC,EAA4C;QAC1C,IAAM,SAAS,GAAG,GAAG,IAAI,UAAU,GAAG,WAAjB,CAArB;;QAEA,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,UAAxB,EAAoC,GAAG,EAAvC,EAA2C;UACzC,IAAM,SAAS,GAAG,GAAG,GAAG,WAAxB;;UAEA,KAAK,IAAI,OAAO,GAAG,CAAnB,EAAsB,OAAO,GAAG,WAAhC,EAA6C,OAAO,EAApD,EAAwD;YACtD,IAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,EAAkB,OAAlB,CAAf;YAEA,IAAM,CAAC,GAAG,MAAM,CAAC,CAAD,CAAhB;YAEA,IAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,UAAU,GAAG,CAAxB,CAAf;YACA,IAAM,MAAM,GAAG,WAAW,GAAG,SAAd,GAA0B,SAA1B,GAAsC,OAArD;YAEA,IAAI,WAAW,GAAG,SAAS,CAAC,MAAD,CAA3B;;YAEA,IAAI,MAAM,IAAI,CAAV,IAAe,MAAM,GAAG,UAA5B,EAAwC;cAEtC,IAAM,gBAAgB,GAAG,MAAM,GAAG,WAAlC;cACA,IAAM,QAAQ,GACV,WAAW,GAAG,SAAd,GAA0B,gBAA1B,GAA6C,OADjD;cAEA,WAAW,GAAG,SAAS,CAAC,QAAD,CAAvB;YACD;;YACD,MAAM,CAAC,MAAD,CAAN,GAAiB,WAAjB;UACD;QACF;MACF;IACF;;IAED,IAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,KAAK,CAAC,KAA/B,EAAsC,KAAK,CAAC,KAA5C,CAAf;IACA,OAAO;MAAC,MAAM,EAAN,MAAD;MAAS,KAAK,EAAE,KAAK,CAAC,KAAtB;MAA6B,KAAK,EAAE,KAAK,CAAC;IAA1C,CAAP;EACD;AA/C8C,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const coordX = Math.round(imageWidth - x);\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        let outputValue = imageVals[outIdx];\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map"]},"metadata":{},"sourceType":"module"}