{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { AvgPoolGrad } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n  var $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  var $input = convertToTensor(input, 'input', 'avgPoolGrad');\n  util.assert($input.rank === $dy.rank, function () {\n    return \"Rank of input (\" + $input.rank + \") does not match rank of dy (\" + $dy.rank + \")\";\n  });\n  var input4D = $input;\n  var dy4D = $dy;\n  var reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(dy4D.rank === 4, function () {\n    return \"Error in avgPoolGrad: dy must be rank 4 but got rank \" + (dy4D.rank + \".\");\n  });\n  util.assert(input4D.rank === 4, function () {\n    return \"Error in avgPoolGrad: input must be rank 4 but got rank \" + (input4D.rank + \".\");\n  });\n  var inputs = {\n    dy: dy4D,\n    input: input4D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad\n  };\n  var res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var avgPoolGrad = op({\n  avgPoolGrad_: avgPoolGrad_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,WAAR;AAIA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,EAAR;AACA,SAAQ,OAAR;;AAkBA,SAAS,YAAT,CACI,EADJ,EACsB,KADtB,EAC2C,UAD3C,EAEI,OAFJ,EAEsC,GAFtC,EAEgE;EAC9D,IAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,aAAX,CAA3B;EACA,IAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,aAAjB,CAA9B;EAEA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,GAAG,CAAC,IADxB,EAEI;IAAA,2BAAwB,MAAM,CAAC,IAA/B,qCACI,GAAG,CAAC,IADR;EAAA,CAFJ;EAKA,IAAI,OAAO,GAAG,MAAd;EACA,IAAI,IAAI,GAAG,GAAX;EACA,IAAI,YAAY,GAAG,KAAnB;;EAEA,IAAI,MAAM,CAAC,IAAP,KAAgB,CAApB,EAAuB;IACrB,YAAY,GAAG,IAAf;IACA,OAAO,GACH,OAAO,CAAC,MAAD,EAAS,CAAC,CAAD,EAAI,MAAM,CAAC,KAAP,CAAa,CAAb,CAAJ,EAAqB,MAAM,CAAC,KAAP,CAAa,CAAb,CAArB,EAAsC,MAAM,CAAC,KAAP,CAAa,CAAb,CAAtC,CAAT,CADX;IAEA,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAJ,EAAkB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAlB,EAAgC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAhC,CAAN,CAAd;EACD;;EAED,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,IAAL,KAAc,CADlB,EAEI;IAAA,OAAM,2DACC,IAAI,CAAC,IADN,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CADrB,EAEI;IAAA,OAAM,8DACC,OAAO,CAAC,IADT,OAAN;EAAA,CAFJ;EAKA,IAAM,MAAM,GAAsB;IAAC,EAAE,EAAE,IAAL;IAAW,KAAK,EAAE;EAAlB,CAAlC;EAEA,IAAM,KAAK,GAAqB;IAAC,UAAU,EAAV,UAAD;IAAa,OAAO,EAAP,OAAb;IAAsB,GAAG,EAAH;EAAtB,CAAhC;EAGA,IAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,WADJ,EACiB,MADjB,EAEI,KAFJ,CAAZ;;EAIA,IAAI,YAAJ,EAAkB;IAChB,OAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;EACD;;EACD,OAAO,GAAP;AACD;;AAED,OAAO,IAAM,WAAW,GAAG,EAAE,CAAC;EAAC,YAAY,EAAZ;AAAD,CAAD,CAAtB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n    const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n    const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n    let input4D = $input;\n    let dy4D = $dy;\n    let reshapedTo4D = false;\n    if ($input.rank === 3) {\n        reshapedTo4D = true;\n        input4D =\n            reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n        dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n    }\n    util.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` +\n        `${dy4D.rank}.`);\n    util.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` +\n        `${input4D.rank}.`);\n    const inputs = { dy: dy4D, input: input4D };\n    const attrs = { filterSize, strides, pad };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const avgPoolGrad = op({ avgPoolGrad_ });\n//# sourceMappingURL=avg_pool_grad.js.map"]},"metadata":{},"sourceType":"module"}