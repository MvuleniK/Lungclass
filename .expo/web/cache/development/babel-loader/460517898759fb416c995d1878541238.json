{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nexport function conv3DBackpropFilterV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      dy = inputs.dy;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      filterShape = attrs.filterShape;\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n  var xStrides = util.computeStrides(x.shape);\n  var dyStrides = util.computeStrides(dy.shape);\n  var convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1, pad);\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var filterDepth = convInfo.filterDepth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  var dwValues = dw.values;\n\n  var _dw$strides = _slicedToArray(dw.strides, 4),\n      dwS0 = _dw$strides[0],\n      dwS1 = _dw$strides[1],\n      dwS2 = _dw$strides[2],\n      dwS3 = _dw$strides[3];\n\n  var dyValues = backend.data.get(dy.dataId).values;\n\n  var _dyStrides = _slicedToArray(dyStrides, 4),\n      dyS0 = _dyStrides[0],\n      dyS1 = _dyStrides[1],\n      dyS2 = _dyStrides[2],\n      dyS3 = _dyStrides[3];\n\n  var xValues = backend.data.get(x.dataId).values;\n\n  var _xStrides = _slicedToArray(xStrides, 4),\n      xS0 = _xStrides[0],\n      xS1 = _xStrides[1],\n      xS2 = _xStrides[2],\n      xS3 = _xStrides[3];\n\n  var frontPad = convInfo.padInfo.front;\n  var leftPad = convInfo.padInfo.left;\n  var topPad = convInfo.padInfo.top;\n\n  for (var wF = 0; wF < filterDepth; ++wF) {\n    var yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    var yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    var wOffset1 = wF * dwS0;\n\n    for (var wR = 0; wR < filterHeight; ++wR) {\n      var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      var wOffset2 = wR * dwS1 + wOffset1;\n\n      for (var wC = 0; wC < filterWidth; ++wC) {\n        var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        var wOffset3 = wC * dwS2 + wOffset2;\n\n        for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          var wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            var dotProd = 0;\n\n            for (var b = 0; b < convInfo.batchSize; ++b) {\n              var xOffset1 = b * xS0;\n              var yOffset1 = b * dyS0;\n\n              for (var yF = yFMin; yF < yFMax; ++yF) {\n                var xF = wF + yF * strideDepth - frontPad;\n                var xOffset2 = xF * xS1 + xOffset1;\n                var yOffset2 = yF * dyS1 + yOffset1;\n\n                for (var yR = yRMin; yR < yRMax; ++yR) {\n                  var xR = wR + yR * strideHeight - topPad;\n                  var xOffset3 = xR * xS2 + xOffset2;\n                  var yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (var yC = yCMin; yC < yCMax; ++yC) {\n                    var xC = wC + yC * strideWidth - leftPad;\n                    var xOffset4 = xC * xS3 + xOffset3;\n                    var yOffset4 = yC * dyS3 + yOffset3;\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport var conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2\n};","map":{"version":3,"sources":["../../src/kernels/Conv3DBackpropFilterV2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n    const xStrides = util.computeStrides(x.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const xValues = backend.data.get(x.dataId).values;\n    const [xS0, xS1, xS2, xS3] = xStrides;\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    for (let wF = 0; wF < filterDepth; ++wF) {\n        const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n        const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n        const wOffset1 = wF * dwS0;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            const wOffset2 = wR * dwS1 + wOffset1;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                const wOffset3 = wC * dwS2 + wOffset2;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const wOffset4 = d1 * dwS3 + wOffset3;\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            const xOffset1 = b * xS0;\n                            const yOffset1 = b * dyS0;\n                            for (let yF = yFMin; yF < yFMax; ++yF) {\n                                const xF = wF + yF * strideDepth - frontPad;\n                                const xOffset2 = xF * xS1 + xOffset1;\n                                const yOffset2 = yF * dyS1 + yOffset1;\n                                for (let yR = yRMin; yR < yRMax; ++yR) {\n                                    const xR = wR + yR * strideHeight - topPad;\n                                    const xOffset3 = xR * xS2 + xOffset2;\n                                    const yOffset3 = yR * dyS2 + yOffset2;\n                                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                                        const xC = wC + yC * strideWidth - leftPad;\n                                        const xOffset4 = xC * xS3 + xOffset3;\n                                        const yOffset4 = yC * dyS3 + yOffset3;\n                                        dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                    }\n                                }\n                            }\n                        }\n                        dwValues[wOffset4 + d2] = dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport const conv3DBackpropFilterV2Config = {\n    kernelName: Conv3DBackpropFilterV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropFilterV2\n};\n//# sourceMappingURL=Conv3DBackpropFilterV2.js.map"]},"metadata":{},"sourceType":"module"}