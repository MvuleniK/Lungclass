{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nexport function conv3DBackpropInputV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var pad = attrs.pad,\n      strides = attrs.strides,\n      inputShape = attrs.inputShape;\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n  var dyStrides = util.computeStrides(dy.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1, pad);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n\n  var _dx$strides = _slicedToArray(dx.strides, 4),\n      dxS0 = _dx$strides[0],\n      dxS1 = _dx$strides[1],\n      dxS2 = _dx$strides[2],\n      dxS3 = _dx$strides[3];\n\n  var dyValues = backend.data.get(dy.dataId).values;\n\n  var _dyStrides = _slicedToArray(dyStrides, 4),\n      dyS0 = _dyStrides[0],\n      dyS1 = _dyStrides[1],\n      dyS2 = _dyStrides[2],\n      dyS3 = _dyStrides[3];\n\n  var fltValues = backend.data.get(filter.dataId).values;\n\n  var _filterStrides = _slicedToArray(filterStrides, 4),\n      fltS0 = _filterStrides[0],\n      fltS1 = _filterStrides[1],\n      fltS2 = _filterStrides[2],\n      fltS3 = _filterStrides[3];\n\n  var batchSize = convInfo.batchSize,\n      filterDepth = convInfo.filterDepth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inDepth = convInfo.inDepth,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outDepth = convInfo.outDepth,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideDepth = convInfo.strideDepth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  var frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xF = 0; xF < inDepth; ++xF) {\n        var xFCorner = xF - frontPad;\n        var xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        var yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        for (var xR = 0; xR < inHeight; ++xR) {\n          var xRCorner = xR - topPad;\n          var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (var xC = 0; xC < inWidth; ++xC) {\n            var xCCorner = xC - leftPad;\n            var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n            var dotProd = 0;\n\n            for (var yF = xFMin; yF < yFMax; ++yF) {\n              var wF = yF * strideDepth - xFCorner;\n\n              for (var yR = xRMin; yR < yRMax; ++yR) {\n                var wR = yR * strideHeight - xRCorner;\n\n                for (var yC = xCMin; yC < yCMax; ++yC) {\n                  var wC = yC * strideWidth - xCCorner;\n                  var dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  var fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (var d2 = 0; d2 < outChannels; ++d2) {\n                    var pixel = dyValues[dyOffset + d2];\n                    var weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2\n};","map":{"version":3,"sources":["../../src/kernels/Conv3DBackpropInputV2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    assertNotComplex([dy], 'conv3dBackpropInputV2');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n    const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            // Frames of depth\n            for (let xF = 0; xF < inDepth; ++xF) {\n                const xFCorner = xF - frontPad;\n                const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                // Rows as per standard 2d matrix notation\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    // Columns as per standard 2d matrix notation\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yF = xFMin; yF < yFMax; ++yF) {\n                            const wF = yF * strideDepth - xFCorner;\n                            for (let yR = xRMin; yR < yRMax; ++yR) {\n                                const wR = yR * strideHeight - xRCorner;\n                                for (let yC = xCMin; yC < yCMax; ++yC) {\n                                    const wC = yC * strideWidth - xCCorner;\n                                    const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                        fltS1 * (filterHeight - 1 - wR) +\n                                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                                        const pixel = dyValues[dyOffset + d2];\n                                        const weight = fltValues[fltOffset + d2];\n                                        dotProd += pixel * weight;\n                                    }\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                            dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropInputV2\n};\n//# sourceMappingURL=Conv3DBackpropInputV2.js.map"]},"metadata":{},"sourceType":"module"}