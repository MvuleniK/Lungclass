{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from \"./glsl_version\";\nexport var Im2ColPackedProgram = _createClass(function Im2ColPackedProgram(outputShape, inputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = outputShape;\n  var filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      strideWidth = convInfo.strideWidth,\n      strideHeight = convInfo.strideHeight,\n      padInfo = convInfo.padInfo,\n      outWidth = convInfo.outWidth,\n      dilationWidth = convInfo.dilationWidth,\n      dilationHeight = convInfo.dilationHeight,\n      dataFormat = convInfo.dataFormat;\n  var left = padInfo.left,\n      top = padInfo.top;\n  var itemsPerBlockRow = inChannels * filterWidth;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 0 : 1;\n  var colDim = isChannelsLast ? 1 : 2;\n  var unrolled = \"\";\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.y + \" + col + \";\\n          pos = rc.x + \" + row + \";\\n\\n          if(blockIndex < \" + outputShape[1] + \" && pos < \" + outputShape[0] + \") {\\n            offsetY = int(blockIndex / (\" + outWidth + \")) * \" + strideHeight + \" - \" + top + \";\\n            d0 = offsetY + \" + dilationHeight + \" * (pos / \" + itemsPerBlockRow + \");\\n\\n            if(d0 < \" + inputShape[rowDim] + \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \" + outWidth + \".) * \" + strideWidth + \". - \" + left + \".);\\n              d1 = offsetX + \" + dilationWidth + \" * (int(mod(float(pos), \" + itemsPerBlockRow + \".) / \" + inChannels + \".));\\n\\n              if(d1 < \" + inputShape[colDim] + \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \" + inChannels + \".));\\n\\n                if (\" + isChannelsLast + \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\" + (row * 2 + col) + \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\" + (row * 2 + col) + \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";\n    }\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \" + unrolled + \"\\n\\n        \" + glsl.output + \" = result;\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/im2col_packed_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,kBAAR;AAGA,WAAa,mBAAb,gBAOE,6BACI,WADJ,EAC2B,UAD3B,EAEI,QAFJ,EAEqC;EAAA;;EARrC,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EACA,KAAA,YAAA,GAAe,IAAf;EACA,KAAA,YAAA,GAAe,IAAf;EAOE,KAAK,WAAL,GAAmB,WAAnB;EAEA,IACE,WADF,GAUI,QAVJ,CACE,WADF;EAAA,IAEE,UAFF,GAUI,QAVJ,CAEE,UAFF;EAAA,IAGE,WAHF,GAUI,QAVJ,CAGE,WAHF;EAAA,IAIE,YAJF,GAUI,QAVJ,CAIE,YAJF;EAAA,IAKE,OALF,GAUI,QAVJ,CAKE,OALF;EAAA,IAME,QANF,GAUI,QAVJ,CAME,QANF;EAAA,IAOE,aAPF,GAUI,QAVJ,CAOE,aAPF;EAAA,IAQE,cARF,GAUI,QAVJ,CAQE,cARF;EAAA,IASE,UATF,GAUI,QAVJ,CASE,UATF;EAWA,IAAO,IAAP,GAAoB,OAApB,CAAO,IAAP;EAAA,IAAa,GAAb,GAAoB,OAApB,CAAa,GAAb;EACA,IAAM,gBAAgB,GAAG,UAAU,GAAG,WAAtC;EACA,IAAM,IAAI,GAAG,kBAAkB,EAA/B;EACA,IAAM,cAAc,GAAG,UAAU,KAAK,cAAtC;EACA,IAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;EACA,IAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;EAEA,IAAI,QAAQ,KAAZ;;EAEA,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;IACjC,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;MACjC,QAAQ,yCACgB,GADhB,kCAES,GAFT,uCAIY,WAAW,CAAC,CAAD,CAJvB,kBAIuC,WAAW,CAAC,CAAD,CAJlD,qDAK0B,QAL1B,aAK0C,YAL1C,WAMJ,GANI,sCAOa,cAPb,kBAOwC,gBAPxC,kCASM,UAAU,CAAC,MAAD,CAThB,6EAWqC,QAXrC,aAYJ,WAZI,YAYc,IAZd,0CAae,aAbf,gCAcJ,gBAdI,aAcoB,UAdpB,sCAgBQ,UAAU,CAAC,MAAD,CAhBlB,mEAkB2B,UAlB3B,oCAoBM,cApBN,oFAsBW,GAAG,GAAG,CAAN,GAAU,GAtBrB,+NA2BW,GAAG,GAAG,CAAN,GAAU,GA3BrB,mMAAR;IAmCD;EACF;;EAED,KAAK,QAAL,yMASM,QATN,oBAWM,IAAI,CAAC,MAXX;AAcD,CAtFH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, inputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\n        const { left, top } = padInfo;\n        const itemsPerBlockRow = inChannels * filterWidth;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 0 : 1;\n        const colDim = isChannelsLast ? 1 : 2;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=im2col_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}