{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { padV2Config } from \"./PadV2\";\nimport { reshape } from \"./Reshape\";\nimport { transpose } from \"./Transpose\";\nexport function spaceToBatchND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      paddings = attrs.paddings;\n  assertNotComplex([x], 'spaceToBatchND');\n  var prod = util.sizeFromShape(blockShape);\n  var completePaddings = [[0, 0]];\n  completePaddings.push.apply(completePaddings, _toConsumableArray(paddings));\n\n  for (var i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  var paddedX = padV2Config.kernelFunc({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  var reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  var permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  var flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  var reshapeInputs = {\n    x: paddedX\n  };\n  var reshapeAttrs = {\n    shape: reshapedPaddedShape\n  };\n  var paddedXReshaped = reshape({\n    inputs: reshapeInputs,\n    backend: backend,\n    attrs: reshapeAttrs\n  });\n  var transposeInputs = {\n    x: paddedXReshaped\n  };\n  var transposeAttrs = {\n    perm: permutedReshapedPaddedPermutation\n  };\n  var paddedXT = transpose({\n    inputs: transposeInputs,\n    backend: backend,\n    attrs: transposeAttrs\n  });\n  var resultReshapeInputs = {\n    x: paddedXT\n  };\n  var resultReshapeAttrs = {\n    shape: flattenShape\n  };\n  var result = reshape({\n    inputs: resultReshapeInputs,\n    backend: backend,\n    attrs: resultReshapeAttrs\n  });\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n  return result;\n}\nexport var spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"sources":["../../src/kernels/SpaceToBatchND.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    assertNotComplex([x], 'spaceToBatchND');\n    const prod = util.sizeFromShape(blockShape);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const paddedX = padV2Config.kernelFunc({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapeInputs = { x: paddedX };\n    const reshapeAttrs = { shape: reshapedPaddedShape };\n    const paddedXReshaped = reshape({ inputs: reshapeInputs, backend, attrs: reshapeAttrs });\n    const transposeInputs = { x: paddedXReshaped };\n    const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n    const paddedXT = transpose({ inputs: transposeInputs, backend, attrs: transposeAttrs });\n    const resultReshapeInputs = { x: paddedXT };\n    const resultReshapeAttrs = { shape: flattenShape };\n    const result = reshape({ inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs });\n    backend.disposeIntermediateTensorInfo(paddedX);\n    backend.disposeIntermediateTensorInfo(paddedXReshaped);\n    backend.disposeIntermediateTensorInfo(paddedXT);\n    return result;\n}\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'cpu',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map"]},"metadata":{},"sourceType":"module"}