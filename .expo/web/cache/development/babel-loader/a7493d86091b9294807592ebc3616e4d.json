{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { reshape } from \"./Reshape\";\nimport { transpose } from \"./Transpose\";\nexport function any(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  assertNotComplex(x, 'any');\n  var origAxes = util.parseAxisParam(axis, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  var $x = x;\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes($x.shape, axes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n  var aVals = backend.data.get($x.dataId).values;\n\n  for (var i = 0; i < vals.length; ++i) {\n    var offset = i * reduceSize;\n    var anyVal = aVals[offset];\n\n    for (var j = 0; j < reduceSize; ++j) {\n      var value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  var result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    var expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    var reshapedResult = reshape({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        shape: expandedShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n\n  return result;\n}\nexport var anyConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any\n};","map":{"version":3,"sources":["../../src/kernels/Any.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'any');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let anyVal = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            anyVal = anyVal || value;\n        }\n        vals[i] = anyVal;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const anyConfig = {\n    kernelName: Any,\n    backendName: 'cpu',\n    kernelFunc: any\n};\n//# sourceMappingURL=Any.js.map"]},"metadata":{},"sourceType":"module"}