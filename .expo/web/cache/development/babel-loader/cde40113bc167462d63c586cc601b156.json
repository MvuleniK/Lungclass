{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from \"../kernel_names\";\nimport { computeOutAndReduceShapes } from \"../ops/axis_util\";\nimport { div } from \"../ops/div\";\nimport { mul } from \"../ops/mul\";\nimport { ones } from \"../ops/ones\";\nimport { reshape } from \"../ops/reshape\";\nimport * as util from \"../util\";\nexport var meanGradConfig = {\n  kernelName: Mean,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 1),\n        x = _saved[0];\n\n    var axis = attrs.axis;\n    var axes = util.parseAxisParam(axis, x.shape);\n    var shapes = computeOutAndReduceShapes(x.shape, axes);\n    var reduceShape = shapes[1];\n    var reduceSize = util.sizeFromShape(reduceShape);\n\n    var derX = function derX() {\n      var expandedDyShape = x.shape.slice();\n      axes.forEach(function (axis) {\n        expandedDyShape[axis] = 1;\n      });\n      var expandedDy = reshape(dy, expandedDyShape);\n      var res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return res;\n    };\n\n    return {\n      x: derX\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Mean_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR;AAEA,SAAQ,yBAAR;AACA,SAAQ,GAAR;AACA,SAAQ,GAAR;AACA,SAAQ,IAAR;AACA,SAAQ,OAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,OAAO,IAAM,cAAc,GAAe;EACxC,UAAU,EAAE,IAD4B;EAExC,YAAY,EAAE,CAAC,GAAD,CAF0B;EAGxC,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,EAAqD;IAC7D,4BAAY,KAAZ;IAAA,IAAO,CAAP;;IACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;IACA,IAAM,IAAI,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAb;IACA,IAAM,MAAM,GAAG,yBAAyB,CAAC,CAAC,CAAC,KAAH,EAAU,IAAV,CAAxC;IACA,IAAM,WAAW,GAAG,MAAM,CAAC,CAAD,CAA1B;IACA,IAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;;IAEA,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;MAChB,IAAM,eAAe,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAxB;MACA,IAAI,CAAC,OAAL,CAAa,UAAA,IAAI,EAAG;QAClB,eAAe,CAAC,IAAD,CAAf,GAAwB,CAAxB;MACD,CAFD;MAGA,IAAM,UAAU,GAAG,OAAO,CAAC,EAAD,EAAK,eAAL,CAA1B;MACA,IAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,UAAD,EAAa,IAAI,CAAC,CAAC,CAAC,KAAH,EAAU,SAAV,CAAjB,CAAJ,EAA4C,UAA5C,CAAf;MACA,OAAO,GAAP;IACD,CARD;;IAUA,OAAO;MAAC,CAAC,EAAE;IAAJ,CAAP;EACD;AAtBuC,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from '../kernel_names';\nimport { computeOutAndReduceShapes } from '../ops/axis_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport * as util from '../util';\nexport const meanGradConfig = {\n    kernelName: Mean,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { axis } = attrs;\n        const axes = util.parseAxisParam(axis, x.shape);\n        const shapes = computeOutAndReduceShapes(x.shape, axes);\n        const reduceShape = shapes[1];\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const derX = () => {\n            const expandedDyShape = x.shape.slice();\n            axes.forEach(axis => {\n                expandedDyShape[axis] = 1;\n            });\n            const expandedDy = reshape(dy, expandedDyShape);\n            const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n            return res;\n        };\n        return { x: derX };\n    }\n};\n//# sourceMappingURL=Mean_grad.js.map"]},"metadata":{},"sourceType":"module"}