{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from \"./utils\";\n\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  var _getParamValue = getParamValue('fusedOps', node, tensorMap, context),\n      _getParamValue2 = _slicedToArray(_getParamValue, 2),\n      extraOp = _getParamValue2[0],\n      activationFunc = _getParamValue2[1];\n\n  var isBiasAdd = extraOp === 'biasadd';\n  var isPrelu = activationFunc === 'prelu';\n  var isBatchNorm = extraOp === 'fusedbatchnorm';\n  var numArgs = getParamValue('numArgs', node, tensorMap, context);\n\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');\n    }\n\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');\n    }\n  }\n\n  if (isBatchNorm) {\n    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n  }\n\n  var stride = getParamValue('strides', node, tensorMap, context);\n  var pad = getPadding(node, tensorMap, context);\n  var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n  var dilations = getParamValue('dilations', node, tensorMap, context);\n\n  var _getParamValue3 = getParamValue('args', node, tensorMap, context),\n      _getParamValue4 = _slicedToArray(_getParamValue3, 2),\n      biasArg = _getParamValue4[0],\n      preluArg = _getParamValue4[1];\n\n  var leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n  return {\n    stride: stride,\n    pad: pad,\n    dataFormat: dataFormat,\n    dilations: dilations,\n    biasArg: biasArg,\n    preluArg: preluArg,\n    activationFunc: activationFunc,\n    leakyreluAlpha: leakyreluAlpha\n  };\n}\n\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'Conv1D':\n      {\n        var stride = getParamValue('stride', node, tensorMap, context);\n        var pad = getParamValue('pad', node, tensorMap, context);\n        var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        var dilation = getParamValue('dilation', node, tensorMap, context);\n        return [tfOps.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n      }\n\n    case 'Conv2D':\n      {\n        var _stride = getParamValue('strides', node, tensorMap, context);\n\n        var _pad = getPadding(node, tensorMap, context);\n\n        var _dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n\n        var dilations = getParamValue('dilations', node, tensorMap, context);\n        return [tfOps.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride[1], _stride[2]], _pad, _dataFormat, [dilations[1], dilations[2]])];\n      }\n\n    case '_FusedConv2D':\n      {\n        var _fusedConvAndDepthWis = fusedConvAndDepthWiseParams(node, tensorMap, context),\n            _stride2 = _fusedConvAndDepthWis.stride,\n            _pad2 = _fusedConvAndDepthWis.pad,\n            _dataFormat2 = _fusedConvAndDepthWis.dataFormat,\n            _dilations = _fusedConvAndDepthWis.dilations,\n            biasArg = _fusedConvAndDepthWis.biasArg,\n            preluArg = _fusedConvAndDepthWis.preluArg,\n            activationFunc = _fusedConvAndDepthWis.activationFunc,\n            leakyreluAlpha = _fusedConvAndDepthWis.leakyreluAlpha;\n\n        return [tfOps.fused.conv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [_stride2[1], _stride2[2]],\n          pad: _pad2,\n          dataFormat: _dataFormat2,\n          dilations: [_dilations[1], _dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha: leakyreluAlpha\n        })];\n      }\n\n    case 'FusedDepthwiseConv2dNative':\n      {\n        var _fusedConvAndDepthWis2 = fusedConvAndDepthWiseParams(node, tensorMap, context),\n            _stride3 = _fusedConvAndDepthWis2.stride,\n            _pad3 = _fusedConvAndDepthWis2.pad,\n            _dataFormat3 = _fusedConvAndDepthWis2.dataFormat,\n            _dilations2 = _fusedConvAndDepthWis2.dilations,\n            _biasArg = _fusedConvAndDepthWis2.biasArg,\n            _preluArg = _fusedConvAndDepthWis2.preluArg,\n            _activationFunc = _fusedConvAndDepthWis2.activationFunc,\n            _leakyreluAlpha = _fusedConvAndDepthWis2.leakyreluAlpha;\n\n        return [tfOps.fused.depthwiseConv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [_stride3[1], _stride3[2]],\n          pad: _pad3,\n          dataFormat: _dataFormat3,\n          dilations: [_dilations2[1], _dilations2[2]],\n          bias: _biasArg,\n          activation: _activationFunc,\n          preluActivationWeights: _preluArg,\n          leakyreluAlpha: _leakyreluAlpha\n        })];\n      }\n\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose':\n      {\n        var shape = getParamValue('outputShape', node, tensorMap, context);\n\n        var _stride4 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad4 = getPadding(node, tensorMap, context);\n\n        return [tfOps.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [_stride4[1], _stride4[2]], _pad4)];\n      }\n\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d':\n      {\n        var _stride5 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad5 = getPadding(node, tensorMap, context);\n\n        var _dilations3 = getParamValue('dilations', node, tensorMap, context);\n\n        var _dataFormat4 = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n\n        return [tfOps.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride5[1], _stride5[2]], _pad5, _dataFormat4, [_dilations3[1], _dilations3[2]])];\n      }\n\n    case 'Conv3D':\n      {\n        var _stride6 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad6 = getParamValue('pad', node, tensorMap, context);\n\n        var _dataFormat5 = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n\n        var _dilations4 = getParamValue('dilations', node, tensorMap, context);\n\n        return [tfOps.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride6[1], _stride6[2], _stride6[3]], _pad6, _dataFormat5, [_dilations4[1], _dilations4[2], _dilations4[3]])];\n      }\n\n    case 'AvgPool':\n      {\n        var _stride7 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad7 = getParamValue('pad', node, tensorMap, context);\n\n        var kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [tfOps.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [_stride7[1], _stride7[2]], _pad7)];\n      }\n\n    case 'MaxPool':\n      {\n        var _stride8 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad8 = getParamValue('pad', node, tensorMap, context);\n\n        var _kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n\n        return [tfOps.maxPool(getParamValue('x', node, tensorMap, context), [_kernelSize[1], _kernelSize[2]], [_stride8[1], _stride8[2]], _pad8)];\n      }\n\n    case 'MaxPoolWithArgmax':\n      {\n        var _stride9 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad9 = getParamValue('pad', node, tensorMap, context);\n\n        var _kernelSize2 = getParamValue('kernelSize', node, tensorMap, context);\n\n        var includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n\n        var _tfOps$maxPoolWithArg = tfOps.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [_kernelSize2[1], _kernelSize2[2]], [_stride9[1], _stride9[2]], _pad9, includeBatchInIndex),\n            result = _tfOps$maxPoolWithArg.result,\n            indexes = _tfOps$maxPoolWithArg.indexes;\n\n        return [result, indexes];\n      }\n\n    case 'AvgPool3D':\n      {\n        var _stride10 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad10 = getParamValue('pad', node, tensorMap, context);\n\n        var _kernelSize3 = getParamValue('kernelSize', node, tensorMap, context);\n\n        return [tfOps.avgPool3d(getParamValue('x', node, tensorMap, context), [_kernelSize3[1], _kernelSize3[2], _kernelSize3[3]], [_stride10[1], _stride10[2], _stride10[3]], _pad10)];\n      }\n\n    case 'MaxPool3D':\n      {\n        var _stride11 = getParamValue('strides', node, tensorMap, context);\n\n        var _pad11 = getParamValue('pad', node, tensorMap, context);\n\n        var _kernelSize4 = getParamValue('kernelSize', node, tensorMap, context);\n\n        return [tfOps.maxPool3d(getParamValue('x', node, tensorMap, context), [_kernelSize4[1], _kernelSize4[2], _kernelSize4[3]], [_stride11[1], _stride11[2], _stride11[3]], _pad11)];\n      }\n\n    case 'Dilation2D':\n      {\n        var strides = getParamValue('strides', node, tensorMap, context);\n\n        var _pad12 = getParamValue('pad', node, tensorMap, context);\n\n        var _dilations5 = getParamValue('dilations', node, tensorMap, context);\n\n        var strideHeight = strides[1];\n        var strideWidth = strides[2];\n        var dilationHeight = _dilations5[1];\n        var dilationWidth = _dilations5[2];\n        return [tfOps.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], _pad12, [dilationHeight, dilationWidth], 'NHWC')];\n      }\n\n    default:\n      throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n  }\n};\nexport var CATEGORY = 'convolution';","map":{"version":3,"sources":["../../../src/operations/executors/convolution_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n    const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n    const isBiasAdd = extraOp === 'biasadd';\n    const isPrelu = activationFunc === 'prelu';\n    const isBatchNorm = extraOp === 'fusedbatchnorm';\n    const numArgs = getParamValue('numArgs', node, tensorMap, context);\n    if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                'one extra argument: bias.');\n        }\n    }\n    if (isBatchNorm) {\n        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n    }\n    const stride = getParamValue('strides', node, tensorMap, context);\n    const pad = getPadding(node, tensorMap, context);\n    const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n        .toUpperCase();\n    const dilations = getParamValue('dilations', node, tensorMap, context);\n    const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n    const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n    return {\n        stride,\n        pad,\n        dataFormat,\n        dilations,\n        biasArg,\n        preluArg,\n        activationFunc,\n        leakyreluAlpha\n    };\n}\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Conv1D': {\n            const stride = getParamValue('stride', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilation = getParamValue('dilation', node, tensorMap, context);\n            return [tfOps.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n        }\n        case 'Conv2D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [tfOps.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [tfOps.fused.conv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'FusedDepthwiseConv2dNative': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [tfOps.fused.depthwiseConv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            return [tfOps.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            return [tfOps.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [tfOps.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPoolWithArgmax': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n            const { result, indexes } = tfOps.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n            return [result, indexes];\n        }\n        case 'AvgPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'MaxPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'Dilation2D': {\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            // strides: [1, stride_height, stride_width, 1].\n            const strideHeight = strides[1];\n            const strideWidth = strides[2];\n            // dilations: [1, dilation_height, dilation_width, 1].\n            const dilationHeight = dilations[1];\n            const dilationWidth = dilations[2];\n            return [tfOps.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'convolution';\n//# sourceMappingURL=convolution_executor.js.map"]},"metadata":{},"sourceType":"module"}