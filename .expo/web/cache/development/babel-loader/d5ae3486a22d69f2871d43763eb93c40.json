{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { uniqueImplCPU } from \"../kernel_utils/shared\";\nimport { assertNotComplex } from \"../webgl_util\";\nexport function unique(args) {\n  var inputs = args.inputs,\n      attrs = args.attrs,\n      backend = args.backend;\n  var axis = attrs.axis;\n  var x = inputs.x;\n  assertNotComplex(x, 'unique');\n  console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n  var values = backend.readSync(x.dataId);\n\n  var _uniqueImplCPU = uniqueImplCPU(values, axis, x.shape, x.dtype),\n      outputValues = _uniqueImplCPU.outputValues,\n      outputShape = _uniqueImplCPU.outputShape,\n      indices = _uniqueImplCPU.indices;\n\n  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];\n}\nexport var uniqueConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique\n};","map":{"version":3,"sources":["../../src/kernels/Unique.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,MAA9C,QAAsF,uBAAtF;AAGA,SAAQ,aAAR;AACA,SAAQ,gBAAR;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EAEuE;EAE3E,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,KAAf,GAAiC,IAAjC,CAAe,KAAf;EAAA,IAAsB,OAAtB,GAAiC,IAAjC,CAAsB,OAAtB;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,gBAAgB,CAAC,CAAD,EAAI,QAAJ,CAAhB;EAGA,OAAO,CAAC,IAAR,CACI,WADJ,EAEI,4DAFJ;EAGA,IAAM,MAAM,GAAG,OAAO,CAAC,QAAR,CAAiB,CAAC,CAAC,MAAnB,CAAf;;EACA,qBACI,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,CAAC,CAAC,KAAjB,EAAwB,CAAC,CAAC,KAA1B,CADjB;EAAA,IAAO,YAAP,kBAAO,YAAP;EAAA,IAAqB,WAArB,kBAAqB,WAArB;EAAA,IAAkC,OAAlC,kBAAkC,OAAlC;;EAEA,OAAO,CACL,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,CAAC,CAAC,KAAtC,EAA6C,YAA7C,CADK,EAEL,OAAO,CAAC,cAAR,CAAuB,CAAC,OAAO,CAAC,MAAT,CAAvB,EAAyC,OAAzC,EAAkD,OAAlD,CAFK,CAAP;AAID;AAED,OAAO,IAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,OAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { uniqueImplCPU } from '../kernel_utils/shared';\nimport { assertNotComplex } from '../webgl_util';\nexport function unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    assertNotComplex(x, 'unique');\n    // For now, always forward calculation to the CPU backend.\n    console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n    const values = backend.readSync(x.dataId);\n    const { outputValues, outputShape, indices } = uniqueImplCPU(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nexport const uniqueConfig = {\n    kernelName: Unique,\n    backendName: 'webgl',\n    kernelFunc: unique,\n};\n//# sourceMappingURL=Unique.js.map"]},"metadata":{},"sourceType":"module"}