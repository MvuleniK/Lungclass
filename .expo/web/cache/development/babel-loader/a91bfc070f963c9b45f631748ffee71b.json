{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport var dilation2dConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        backend = _ref.backend,\n        attrs = _ref.attrs;\n    var x = inputs.x,\n        filter = inputs.filter;\n    var strides = attrs.strides,\n        pad = attrs.pad,\n        dilations = attrs.dilations;\n    var cpuBackend = backend;\n    var xVals = cpuBackend.data.get(x.dataId).values;\n    var xRank = x.shape.length;\n    var filterVals = cpuBackend.data.get(filter.dataId).values;\n    var filterRank = filter.shape.length;\n\n    var _backend_util$compute = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC', dilations),\n        batchSize = _backend_util$compute.batchSize,\n        inHeight = _backend_util$compute.inHeight,\n        inWidth = _backend_util$compute.inWidth,\n        inChannels = _backend_util$compute.inChannels,\n        outHeight = _backend_util$compute.outHeight,\n        outWidth = _backend_util$compute.outWidth,\n        padInfo = _backend_util$compute.padInfo,\n        strideHeight = _backend_util$compute.strideHeight,\n        strideWidth = _backend_util$compute.strideWidth,\n        filterHeight = _backend_util$compute.filterHeight,\n        filterWidth = _backend_util$compute.filterWidth,\n        dilationHeight = _backend_util$compute.dilationHeight,\n        dilationWidth = _backend_util$compute.dilationWidth,\n        outShape = _backend_util$compute.outShape;\n\n    var outSize = util.sizeFromShape(outShape);\n    var outRank = outShape.length;\n    var outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    for (var b = 0; b < batchSize; ++b) {\n      for (var hOut = 0; hOut < outHeight; ++hOut) {\n        var hBeg = hOut * strideHeight - padInfo.top;\n\n        for (var wOut = 0; wOut < outWidth; ++wOut) {\n          var wBeg = wOut * strideWidth - padInfo.left;\n\n          for (var d = 0; d < inChannels; ++d) {\n            var curVal = Number.MIN_SAFE_INTEGER;\n\n            for (var h = 0; h < filterHeight; ++h) {\n              var hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (var w = 0; w < filterWidth; ++w) {\n                  var wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    var xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    var filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                    var val = xVals[xIndex] + filterVals[filterIndex];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            var outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    var dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return {\n      dataId: dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Dilation2D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2dConfig = {\n    kernelName: Dilation2D,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const xVals = cpuBackend.data.get(x.dataId).values;\n        const xRank = x.shape.length;\n        const filterVals = cpuBackend.data.get(filter.dataId).values;\n        const filterRank = filter.shape.length;\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        const outSize = util.sizeFromShape(outShape);\n        const outRank = outShape.length;\n        const outputVals = util.getArrayFromDType(x.dtype, outSize);\n        // Upsampling the input by fill in `dilation size - 1` values between each\n        // input value.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                                        const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                                        const val = xVals[xIndex] + filterVals[filterIndex];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n                        outputVals[outputIndex] = curVal;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2D.js.map"]},"metadata":{},"sourceType":"module"}