{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Tile } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { clone } from \"./clone\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction broadcastTo_(x, shape) {\n  var input = convertToTensor(x, 'broadcastTo', 'x');\n  var xShape = input.shape;\n\n  if (shape.some(function (d) {\n    return !(d > 0) || d % 1 !== 0;\n  })) {\n    throw new Error(\"broadcastTo(): Invalid broadcast shape [\" + shape + \"].\");\n  }\n\n  if (shape.length < input.rank) {\n    throw new Error(\"broadcastTo(): shape.length=\" + shape.length + \" < input.rank=\" + input.rank + \".\");\n  }\n\n  if (shape.length > input.rank) {\n    var newShape = input.shape.slice();\n\n    while (newShape.length < shape.length) {\n      newShape.unshift(1);\n    }\n\n    input = reshape(input, newShape);\n  }\n\n  var inputShape = input.shape;\n  var reps = Array.from(shape);\n\n  for (var i = shape.length - 1; i >= 0; i--) {\n    if (inputShape[i] === shape[i]) {\n      reps[i] = 1;\n    } else if (input.shape[i] !== 1) {\n      throw new Error(\"broadcastTo(): [\" + xShape + \"] cannot be broadcast to [\" + shape + \"].\");\n    }\n  }\n\n  var axes = reps.map(function (n, i) {\n    return n > 1 ? i : -1;\n  }).filter(function (i) {\n    return i >= 0;\n  });\n\n  if (axes.length === 0) {\n    return clone(input);\n  }\n\n  var inputs = {\n    x: input\n  };\n  var attrs = {\n    reps: reps\n  };\n  return ENGINE.runKernel(Tile, inputs, attrs);\n}\n\nexport var broadcastTo = op({\n  broadcastTo_: broadcastTo_\n});","map":{"version":3,"sources":["../../src/ops/broadcast_to.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,IAAR;AAIA,SAAQ,eAAR;AAGA,SAAQ,KAAR;AACA,SAAQ,EAAR;AACA,SAAQ,OAAR;;AAgBA,SAAS,YAAT,CACI,CADJ,EAC0B,KAD1B,EAC4C;EAC1C,IAAI,KAAK,GAAG,eAAe,CAAC,CAAD,EAAI,aAAJ,EAAmB,GAAnB,CAA3B;EACA,IAAM,MAAM,GAAG,KAAK,CAAC,KAArB;;EAEA,IAAI,KAAK,CAAC,IAAN,CAAW,UAAA,CAAC;IAAA,OAAI,EAAE,CAAC,GAAG,CAAN,KAAY,CAAC,GAAG,CAAJ,KAAU,CAA1B;EAAA,CAAZ,CAAJ,EAA8C;IAC5C,MAAM,IAAI,KAAJ,8CAAqD,KAArD,QAAN;EACD;;EAED,IAAI,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,IAAzB,EAA+B;IAC7B,MAAM,IAAI,KAAJ,kCAAyC,KAAK,CAAC,MAA/C,sBACF,KAAK,CAAC,IADJ,OAAN;EAED;;EAED,IAAI,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,IAAzB,EAA+B;IAC7B,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAjB;;IACA,OAAO,QAAQ,CAAC,MAAT,GAAkB,KAAK,CAAC,MAA/B,EAAuC;MACrC,QAAQ,CAAC,OAAT,CAAiB,CAAjB;IACD;;IACD,KAAK,GAAG,OAAO,CAAC,KAAD,EAAQ,QAAR,CAAf;EACD;;EAED,IAAM,UAAU,GAAG,KAAK,CAAC,KAAzB;EACA,IAAM,IAAI,GAAa,KAAK,CAAC,IAAN,CAAW,KAAX,CAAvB;;EACA,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAN,GAAe,CAA5B,EAA+B,CAAC,IAAI,CAApC,EAAuC,CAAC,EAAxC,EAA4C;IAC1C,IAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,KAAK,CAAC,CAAD,CAA3B,EAAgC;MAC9B,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;IACD,CAFD,MAEO,IAAI,KAAK,CAAC,KAAN,CAAY,CAAZ,MAAmB,CAAvB,EAA0B;MAC/B,MAAM,IAAI,KAAJ,sBACiB,MADjB,kCACoD,KADpD,QAAN;IAED;EACF;;EACD,IAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAI,CAAJ;IAAA,OAAU,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAvB;EAAA,CAAT,EAAmC,MAAnC,CAA0C,UAAA,CAAC;IAAA,OAAI,CAAC,IAAI,CAAT;EAAA,CAA3C,CAAb;;EAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;IACrB,OAAO,KAAK,CAAC,KAAD,CAAZ;EACD;;EAGD,IAAM,MAAM,GAAe;IAAC,CAAC,EAAE;EAAJ,CAA3B;EACA,IAAM,KAAK,GAAc;IAAC,IAAI,EAAJ;EAAD,CAAzB;EACA,OAAO,MAAM,CAAC,SAAP,CACH,IADG,EACG,MADH,EACmC,KADnC,CAAP;AAED;;AAED,OAAO,IAAM,WAAW,GAAG,EAAE,CAAC;EAAC,YAAY,EAAZ;AAAD,CAAD,CAAtB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until is has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_(x, shape) {\n    let input = convertToTensor(x, 'broadcastTo', 'x');\n    const xShape = input.shape;\n    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n    }\n    if (shape.length < input.rank) {\n        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);\n    }\n    if (shape.length > input.rank) {\n        const newShape = input.shape.slice();\n        while (newShape.length < shape.length) {\n            newShape.unshift(1);\n        }\n        input = reshape(input, newShape);\n    }\n    const inputShape = input.shape;\n    const reps = Array.from(shape);\n    for (let i = shape.length - 1; i >= 0; i--) {\n        if (inputShape[i] === shape[i]) {\n            reps[i] = 1;\n        }\n        else if (input.shape[i] !== 1) {\n            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n        }\n    }\n    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n    if (axes.length === 0) {\n        return clone(input);\n    }\n    // TODO call broadcastTo kernel directly once backends implement broadcstTo\n    const inputs = { x: input };\n    const attrs = { reps };\n    return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const broadcastTo = op({ broadcastTo_ });\n//# sourceMappingURL=broadcast_to.js.map"]},"metadata":{},"sourceType":"module"}