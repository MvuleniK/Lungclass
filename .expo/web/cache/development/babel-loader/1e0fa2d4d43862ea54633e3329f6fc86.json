{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from \"../max_pool_backprop_gpu\";\nimport { Pool3DProgram } from \"../pool_gpu\";\nexport function maxPool3DGrad(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      input = inputs.input;\n  var x = input;\n  var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var dilations = [1, 1, 1];\n  var convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  var maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true);\n  var maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  var maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  var result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\nexport var maxPoolGrad3DConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"sources":["../../src/kernels/MaxPool3DGrad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,YAAR,EAAgD,aAAhD,QAAyH,uBAAzH;AAGA,SAAQ,wBAAR;AACA,SAAQ,aAAR;AAEA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,EAAP,GAAoB,MAApB,CAAO,EAAP;EAAA,IAAW,KAAX,GAAoB,MAApB,CAAW,KAAX;EACA,IAAM,CAAC,GAAG,KAAV;EACA,IAAO,UAAP,GAAoD,KAApD,CAAO,UAAP;EAAA,IAAmB,OAAnB,GAAoD,KAApD,CAAmB,OAAnB;EAAA,IAA4B,GAA5B,GAAoD,KAApD,CAA4B,GAA5B;EAAA,IAAiC,eAAjC,GAAoD,KAApD,CAAiC,eAAjC;EACA,IAAM,SAAS,GAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5C;EAEA,IAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACwC,UADxC,EACoD,OADpD,EAEb,SAFa,EAEF,GAFE,EAEG,eAFH,CAAjB;EAIA,IAAM,yBAAyB,GAC3B,IAAI,aAAJ,CAAkB,QAAlB,EAA4B,KAA5B,EAAmC,IAAnC,CADJ;EAEA,IAAM,kBAAkB,GACpB,OAAO,CAAC,eAAR,CAAwB,yBAAxB,EAAmD,CAAC,CAAD,CAAnD,EAAwD,CAAC,CAAC,KAA1D,CADJ;EAEA,IAAM,sBAAsB,GAAG,IAAI,wBAAJ,CAA6B,QAA7B,CAA/B;EACA,IAAM,MAAM,GAAG,OAAO,CAAC,eAAR,CACX,sBADW,EACa,CAAC,EAAD,EAAK,kBAAL,CADb,EACuC,CAAC,CAAC,KADzC,CAAf;EAEA,OAAO,CAAC,6BAAR,CAAsC,kBAAtC;EACA,OAAO,MAAP;AACD;AAED,OAAO,IAAM,mBAAmB,GAAiB;EAC/C,UAAU,EAAE,aADmC;EAE/C,WAAW,EAAE,OAFkC;EAG/C,UAAU,EAAE;AAHmC,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n    const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n    const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n    return result;\n}\nexport const maxPoolGrad3DConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPool3DGrad\n};\n//# sourceMappingURL=MaxPool3DGrad.js.map"]},"metadata":{},"sourceType":"module"}