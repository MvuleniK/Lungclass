{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from \"./lazy_iterator\";\nexport var StringIterator = function (_LazyIterator) {\n  _inherits(StringIterator, _LazyIterator);\n\n  var _super = _createSuper(StringIterator);\n\n  function StringIterator() {\n    _classCallCheck(this, StringIterator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StringIterator, [{\n    key: \"split\",\n    value: function split(separator) {\n      return new SplitIterator(this, separator);\n    }\n  }]);\n\n  return StringIterator;\n}(LazyIterator);\n\nvar SplitIterator = function (_StringIterator) {\n  _inherits(SplitIterator, _StringIterator);\n\n  var _super2 = _createSuper(SplitIterator);\n\n  function SplitIterator(upstream, separator) {\n    var _this;\n\n    _classCallCheck(this, SplitIterator);\n\n    _this = _super2.call(this);\n    _this.upstream = upstream;\n    _this.impl = new SplitIteratorImpl(upstream, separator);\n    return _this;\n  }\n\n  _createClass(SplitIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.impl.summary();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return _regeneratorRuntime.async(function next$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.impl.next());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return SplitIterator;\n}(StringIterator);\n\nvar SplitIteratorImpl = function (_OneToManyIterator) {\n  _inherits(SplitIteratorImpl, _OneToManyIterator);\n\n  var _super3 = _createSuper(SplitIteratorImpl);\n\n  function SplitIteratorImpl(upstream, separator) {\n    var _this2;\n\n    _classCallCheck(this, SplitIteratorImpl);\n\n    _this2 = _super3.call(this);\n    _this2.upstream = upstream;\n    _this2.separator = separator;\n    _this2.carryover = '';\n    return _this2;\n  }\n\n  _createClass(SplitIteratorImpl, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.upstream.summary() + \" -> Split('\" + this.separator + \"')\";\n    }\n  }, {\n    key: \"pump\",\n    value: function pump() {\n      var chunkResult, lines, _iterator, _step, line;\n\n      return _regeneratorRuntime.async(function pump$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.upstream.next());\n\n            case 2:\n              chunkResult = _context2.sent;\n\n              if (!chunkResult.done) {\n                _context2.next = 9;\n                break;\n              }\n\n              if (!(this.carryover === '')) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 6:\n              this.outputQueue.push(this.carryover);\n              this.carryover = '';\n              return _context2.abrupt(\"return\", true);\n\n            case 9:\n              lines = chunkResult.value.split(this.separator);\n              lines[0] = this.carryover + lines[0];\n\n              for (_iterator = _createForOfIteratorHelperLoose(lines.slice(0, -1)); !(_step = _iterator()).done;) {\n                line = _step.value;\n                this.outputQueue.push(line);\n              }\n\n              this.carryover = lines[lines.length - 1];\n              return _context2.abrupt(\"return\", true);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return SplitIteratorImpl;\n}(OneToManyIterator);","map":{"version":3,"sources":["../../src/iterators/string_iterator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,YAAR,EAAsB,iBAAtB;AAEA,WAAsB,cAAtB;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;IAAA;IAAA,OAmBE,eAAM,SAAN,EAAuB;MACrB,OAAO,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,SAAxB,CAAP;IACD;EArBH;;EAAA;AAAA,EAA6C,YAA7C;;IAmCM,a;;;;;EAGJ,uBAAsB,QAAtB,EAAsD,SAAtD,EAAuE;IAAA;;IAAA;;IACrE;IADoB,MAAA,QAAA,GAAA,QAAA;IAEpB,MAAK,IAAL,GAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,SAAhC,CAAZ;IAFqE;EAGtE;;;;WAED,mBAAO;MACL,OAAO,KAAK,IAAL,CAAU,OAAV,EAAP;IACD;;;WAED;MAAA;QAAA;UAAA;YAAA;cAAA,iCACS,KAAK,IAAL,CAAU,IAAV,EADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;EAZ0B,c;;IAiBtB,iB;;;;;EAIJ,2BACc,QADd,EACwD,SADxD,EACyE;IAAA;;IAAA;;IACvE;IADY,OAAA,QAAA,GAAA,QAAA;IAA0C,OAAA,SAAA,GAAA,SAAA;IAHxD,OAAA,SAAA,GAAY,EAAZ;IAGyE;EAExE;;;;WAED,mBAAO;MACL,OAAU,KAAK,QAAL,CAAc,OAAd,EAAV,mBAA+C,KAAK,SAApD;IACD;;;WAED;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAC4B,KAAK,QAAL,CAAc,IAAd,EAD5B;;YAAA;cACQ,WADR;;cAAA,KAEM,WAAW,CAAC,IAFlB;gBAAA;gBAAA;cAAA;;cAAA,MAGQ,KAAK,SAAL,KAAmB,EAH3B;gBAAA;gBAAA;cAAA;;cAAA,kCAIa,KAJb;;YAAA;cASI,KAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,SAA3B;cACA,KAAK,SAAL,GAAiB,EAAjB;cAVJ,kCAWW,IAXX;;YAAA;cAaQ,KAbR,GAagB,WAAW,CAAC,KAAZ,CAAkB,KAAlB,CAAwB,KAAK,SAA7B,CAbhB;cAkBE,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,SAAL,GAAiB,KAAK,CAAC,CAAD,CAAjC;;cACA,iDAAmB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB,iCAAuC;gBAA5B,IAA4B;gBACrC,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;cACD;;cACD,KAAK,SAAL,GAAiB,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAtB;cAtBF,kCAwBS,IAxBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;EAb8B,iB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n//# sourceMappingURL=string_iterator.js.map"]},"metadata":{},"sourceType":"module"}