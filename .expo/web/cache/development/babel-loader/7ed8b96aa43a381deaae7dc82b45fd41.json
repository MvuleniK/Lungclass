{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { DepthwiseConv2dNative } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction depthwiseConv2d_(x, filter, strides, pad) {\n  var dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NHWC';\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n  var $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in depthwiseConv2d: input must be rank 4, but got \" + (\"rank \" + x4D.rank + \".\");\n  });\n  util.assert($filter.rank === 4, function () {\n    return \"Error in depthwiseConv2d: filter must be rank 4, but got rank \" + ($filter.rank + \".\");\n  });\n  util.assert(x4D.shape[3] === $filter.shape[2], function () {\n    return \"Error in depthwiseConv2d: number of input channels \" + (\"(\" + x4D.shape[3] + \") must match the inChannels dimension in \") + (\"filter \" + $filter.shape[2] + \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in depthwiseConv2d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n    });\n  }\n\n  var inputs = {\n    x: x4D,\n    filter: $filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dataFormat: dataFormat,\n    dilations: dilations,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernel(DepthwiseConv2dNative, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var depthwiseConv2d = op({\n  depthwiseConv2d_: depthwiseConv2d_\n});","map":{"version":3,"sources":["../../src/ops/depthwise_conv2d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR;AACA,SAAQ,qBAAR;AAIA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,EAAR;AACA,SAAQ,OAAR;;AA+CA,SAAS,gBAAT,CACI,CADJ,EACqB,MADrB,EAEI,OAFJ,EAEsC,GAFtC,EAK4C;EAAA,IAFxC,UAEwC,uEAFZ,MAEY;EAAA,IADxC,SACwC,uEADH,CAAC,CAAD,EAAI,CAAJ,CACG;EAAA,IAAxC,eAAwC;EAC1C,IAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,iBAAT,CAA1B;EACA,IAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,iBAAnB,CAA/B;EAEA,IAAI,GAAG,GAAG,EAAV;EACA,IAAI,YAAY,GAAG,KAAnB;;EACA,IAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;IACjB,YAAY,GAAG,IAAf;IACA,GAAG,GAAG,OAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,EAAE,CAAC,KAAH,CAAS,CAAT,CAAJ,EAAiB,EAAE,CAAC,KAAH,CAAS,CAAT,CAAjB,EAA8B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;EACD;;EACD,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CADjB,EAEI;IAAA,OAAM,wEACM,GAAG,CAAC,IADV,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CADrB,EAEI;IAAA,OAAM,oEACC,OAAO,CAAC,IADT,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,KAAJ,CAAU,CAAV,MAAiB,OAAO,CAAC,KAAR,CAAc,CAAd,CADrB,EAEI;IAAA,OAAM,+DACE,GAAG,CAAC,KAAJ,CAAU,CAAV,CADF,+DAEQ,OAAO,CAAC,KAAR,CAAc,CAAd,CAFR,OAAN;EAAA,CAFJ;;EAMA,IAAI,eAAe,IAAI,IAAvB,EAA6B;IAC3B,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI;MAAA,OAAM,wFACiB,eADjB,qBACgD,GADhD,OAAN;IAAA,CAFJ;EAID;;EAED,IAAM,MAAM,GAAgC;IAAC,CAAC,EAAE,GAAJ;IAAS,MAAM,EAAE;EAAjB,CAA5C;EACA,IAAM,KAAK,GACP;IAAC,OAAO,EAAP,OAAD;IAAU,GAAG,EAAH,GAAV;IAAe,UAAU,EAAV,UAAf;IAA2B,SAAS,EAAT,SAA3B;IAAsC,eAAe,EAAf;EAAtC,CADJ;EAIA,IAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,qBADJ,EAC2B,MAD3B,EAEI,KAFJ,CAAZ;;EAIA,IAAI,YAAJ,EAAkB;IAChB,OAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;EACD;;EACD,OAAO,GAAP;AACD;;AAED,OAAO,IAAM,eAAe,GAAG,EAAE,CAAC;EAAC,gBAAgB,EAAhB;AAAD,CAAD,CAA1B","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n    const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n        `${$filter.rank}.`);\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +\n        `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n        `filter ${$filter.shape[2]}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inputs = { x: x4D, filter: $filter };\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(DepthwiseConv2dNative, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const depthwiseConv2d = op({ depthwiseConv2d_ });\n//# sourceMappingURL=depthwise_conv2d.js.map"]},"metadata":{},"sourceType":"module"}