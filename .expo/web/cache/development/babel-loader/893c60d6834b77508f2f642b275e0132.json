{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { maxPoolPositions } from \"../utils/pool_utils\";\nexport function maxPoolGrad(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      input = inputs.input,\n      output = inputs.output;\n  var x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1, pad, dimRoundingMode);\n  var xValues = backend.data.get(x.dataId).values;\n  var maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var dx = buffer(x.shape, 'float32');\n  var dyData = backend.data.get(dy.dataId).values;\n  var dyBuf = buffer(dy.shape, 'float32', dyData);\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    for (var d = 0; d < convInfo.inChannels; ++d) {\n      for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          var dyRCorner = dxR - padTop;\n          var dyCCorner = dxC - padLeft;\n          var dotProd = 0;\n\n          for (var wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            var dyR = (dyRCorner + wR) / strideHeight;\n\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n\n            for (var wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              var dyC = (dyCCorner + wC) / strideWidth;\n\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              var maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              var curPos = wR * effectiveFilterWidth + wC;\n              var mask = maxPos === curPos ? 1 : 0;\n\n              if (mask === 0) {\n                continue;\n              }\n\n              var pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"sources":["../../src/kernels/MaxPoolGrad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const xValues = backend.data.get(x.dataId).values;\n    const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                                maxPosBuf.get(b, dyR, dyC, d);\n                            const curPos = wR * effectiveFilterWidth + wC;\n                            const mask = maxPos === curPos ? 1 : 0;\n                            if (mask === 0) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel * mask;\n                        }\n                    }\n                    dx.set(dotProd, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPoolGrad\n};\n//# sourceMappingURL=MaxPoolGrad.js.map"]},"metadata":{},"sourceType":"module"}