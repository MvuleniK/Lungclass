{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack as _stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from \"./tensor_utils\";\nexport var TensorList = function () {\n  function TensorList(tensors, elementShape, elementDtype) {\n    var maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n\n    _classCallCheck(this, TensorList);\n\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n\n    if (tensors != null) {\n      tensors.forEach(function (tensor) {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(\"Invalid data types; op elements \" + elementDtype + \", but list elements \" + tensor.dtype);\n        }\n\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  _createClass(TensorList, [{\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new TensorList(_toConsumableArray(this.tensors), this.elementShape, this.elementDtype);\n    }\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n      this.tensors.length = 0;\n      this.idTensor.dispose();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n  }, {\n    key: \"stack\",\n    value: function stack(elementShape, elementDtype) {\n      var _this = this;\n\n      var numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + elementDtype + \", but list elements \" + this.elementDtype);\n      }\n\n      if (numElements !== -1 && this.tensors.length !== numElements) {\n        throw new Error(\"Operation expected a list with \" + numElements + \" elements but got a list with \" + this.tensors.length + \" elements.\");\n      }\n\n      assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n      return tidy(function () {\n        var reshapedTensors = _this.tensors.map(function (tensor) {\n          return reshape(tensor, elementShape);\n        });\n\n        return _stack(reshapedTensors, 0);\n      });\n    }\n  }, {\n    key: \"popBack\",\n    value: function popBack(elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + elementDtype + \", but list elements \" + this.elementDtype);\n      }\n\n      if (this.size() === 0) {\n        throw new Error('Trying to pop from an empty list.');\n      }\n\n      var tensor = this.tensors.pop();\n      assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n      return reshape(tensor, elementShape);\n    }\n  }, {\n    key: \"pushBack\",\n    value: function pushBack(tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + tensor.dtype + \", but list elements \" + this.elementDtype);\n      }\n\n      assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n      if (this.maxNumElements === this.size()) {\n        throw new Error(\"Trying to push element into a full list.\");\n      }\n\n      keep(tensor);\n      this.tensors.push(tensor);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(size) {\n      if (size < 0) {\n        throw new Error(\"TensorListResize expects size to be non-negative. Got: \" + size);\n      }\n\n      if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n        throw new Error(\"TensorListResize input size \" + size + \" is greater maxNumElement \" + this.maxNumElements + \".\");\n      }\n\n      this.tensors.length = size;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(elementIndex, elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + elementDtype + \", but list elements \" + this.elementDtype);\n      }\n\n      if (elementIndex < 0 || elementIndex > this.tensors.length) {\n        throw new Error(\"Trying to access element \" + elementIndex + \" in a list with \" + this.tensors.length + \" elements.\");\n      }\n\n      if (this.tensors[elementIndex] == null) {\n        throw new Error(\"element at index \" + elementIndex + \" is null.\");\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n      return this.tensors[elementIndex];\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(elementIndex, tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + tensor.dtype + \", but list elements \" + this.elementDtype);\n      }\n\n      if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n        throw new Error(\"Trying to set element \" + elementIndex + \" in a list with max \" + this.maxNumElements + \" elements.\");\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n      keep(tensor);\n      this.tensors[elementIndex] = tensor;\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(indices, elementDtype, elementShape) {\n      var _this2 = this;\n\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \" + elementDtype + \", but list elements \" + this.elementDtype);\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n      indices = indices.slice(0, this.size());\n\n      if (indices.length === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n\n      return tidy(function () {\n        var tensors = indices.map(function (i) {\n          return reshape(_this2.tensors[i], elementShape);\n        });\n        return _stack(tensors, 0);\n      });\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(elementDtype, elementShape) {\n      var _this3 = this;\n\n      if (!!elementDtype && elementDtype !== this.elementDtype) {\n        throw new Error(\"TensorList dtype is \" + this.elementDtype + \" but concat requested dtype \" + elementDtype);\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n      if (this.size() === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n\n      return tidy(function () {\n        var tensors = _this3.tensors.map(function (t) {\n          return reshape(t, elementShape);\n        });\n\n        return _concat(tensors, 0);\n      });\n    }\n  }]);\n\n  return TensorList;\n}();\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  var dtype = tensor.dtype;\n\n  if (tensor.shape.length < 1) {\n    throw new Error(\"Tensor must be at least a vector, but saw shape: \" + tensor.shape);\n  }\n\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(\"Invalid data types; op elements \" + tensor.dtype + \", but list elements \" + elementDtype);\n  }\n\n  var outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(outputShape, elementShape, 'TensorList shape mismatch: ');\n  var tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \" + indices.length + \" vs. \" + tensor.shape[0]);\n  }\n\n  var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\"Max index must be < array size (\" + maxIndex + \"  vs. \" + numElements + \")\");\n  }\n\n  var list = new TensorList([], elementShape, tensor.dtype, numElements);\n  var tensors = unstack(tensor, 0);\n  indices.forEach(function (value, index) {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\nexport function split(tensor, length, elementShape) {\n  var totalLength = 0;\n  var cumulativeLengths = length.map(function (len) {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \" + totalLength + \", and tensor's shape is: \" + tensor.shape);\n  }\n\n  var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  var tensors = tidy(function () {\n    var tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n    for (var i = 0; i < length.length; ++i) {\n      var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      var indices = [0, previousLength, 0];\n      var sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n\n    tensor.dispose();\n    return tensors;\n  });\n  var list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (var i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n\n  return list;\n}","map":{"version":3,"sources":["../../src/executor/tensor_list.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, elementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const tensor = this.tensors.pop();\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, elementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        this.tensors.length = size;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        return this.tensors[elementIndex];\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], elementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, elementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const outputShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(outputShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(elementShape, elementDtype, numElements) {\n    return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=tensor_list.js.map"]},"metadata":{},"sourceType":"module"}