{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\nexport function resolveScalarsInLogs(logs) {\n  var promises, keys, scalarsToDispose, key, value, valueScalar, values, i;\n  return _regeneratorRuntime.async(function resolveScalarsInLogs$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(logs == null)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          promises = [];\n          keys = [];\n          scalarsToDispose = [];\n\n          for (key in logs) {\n            value = logs[key];\n\n            if (typeof value !== 'number') {\n              valueScalar = value;\n              promises.push(valueScalar.data());\n              keys.push(key);\n              scalarsToDispose.push(valueScalar);\n            }\n          }\n\n          if (!(promises.length > 0)) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Promise.all(promises));\n\n        case 9:\n          values = _context.sent;\n\n          for (i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n          }\n\n          dispose(scalarsToDispose);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (var key in logs) {\n    var value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"sources":["../src/logs.ts"],"names":[],"mappings":";;AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAR,QAA8B,uBAA9B;AAgBA,OAAO,SAAe,oBAAf,CAAoC,IAApC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MACD,IAAI,IAAI,IADP;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAIC,QAJD,GAIgE,EAJhE;UAKC,IALD,GAKkB,EALlB;UAMC,gBAND,GAM8B,EAN9B;;UAOL,KAAW,GAAX,IAAkB,IAAlB,EAAwB;YAChB,KADgB,GACR,IAAI,CAAC,GAAD,CADI;;YAEtB,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;cACvB,WADuB,GACT,KADS;cAE7B,QAAQ,CAAC,IAAT,CAAc,WAAW,CAAC,IAAZ,EAAd;cACA,IAAI,CAAC,IAAL,CAAU,GAAV;cACA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;YACD;UACF;;UAfI,MAgBD,QAAQ,CAAC,MAAT,GAAkB,CAhBjB;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAiBkB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAjBlB;;QAAA;UAiBG,MAjBH;;UAkBH,KAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;YACtC,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAhB;UACD;;UAED,OAAO,CAAC,gBAAD,CAAP;;QAtBG;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAgCP,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAmD;EACvD,IAAI,IAAI,IAAI,IAAZ,EAAkB;IAChB;EACD;;EACD,KAAK,IAAM,GAAX,IAAkB,IAAlB,EAAwB;IACtB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;IACA,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;MAC7B,KAAK,CAAC,OAAN;IACD;EACF;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=logs.js.map"]},"metadata":{},"sourceType":"module"}