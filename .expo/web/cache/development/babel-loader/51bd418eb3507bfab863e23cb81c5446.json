{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { gather } from \"./gather\";\nimport { reshape } from \"./reshape\";\nimport { squeeze } from \"./squeeze\";\nimport { whereAsync } from \"./where_async\";\n\nfunction booleanMaskAsync_(tensor, mask, axis) {\n  var $tensor, $mask, axisFrom, maskDim, tensorShape, leadingSize, i, targetTensorShape, reshapedTensor, reshapedMask, positivePositions, indices, res;\n  return _regeneratorRuntime.async(function booleanMaskAsync_$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n          $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n          axisFrom = axis == null ? 0 : axis;\n          maskDim = $mask.rank;\n          tensorShape = $tensor.shape;\n          util.assert(maskDim > 0, function () {\n            return 'mask cannot be scalar';\n          });\n          util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, \"mask's shape must match the first K dimensions of tensor's shape,\");\n          leadingSize = 1;\n\n          for (i = axisFrom; i < axisFrom + maskDim; i++) {\n            leadingSize *= tensorShape[i];\n          }\n\n          targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n          reshapedTensor = reshape($tensor, targetTensorShape);\n          reshapedMask = reshape($mask, [-1]);\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(whereAsync(reshapedMask));\n\n        case 14:\n          positivePositions = _context.sent;\n          indices = squeeze(positivePositions, [1]);\n          res = gather(reshapedTensor, indices, axisFrom);\n\n          if (tensor !== $tensor) {\n            $tensor.dispose();\n          }\n\n          if (mask !== $mask) {\n            $mask.dispose();\n          }\n\n          indices.dispose();\n          reshapedTensor.dispose();\n          reshapedMask.dispose();\n          positivePositions.dispose();\n          return _context.abrupt(\"return\", res);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport var booleanMaskAsync = booleanMaskAsync_;","map":{"version":3,"sources":["../../src/ops/boolean_mask.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,MAAR;AACA,SAAQ,OAAR;AACA,SAAQ,OAAR;AACA,SAAQ,UAAR;;AAoBA,SAAe,iBAAf,CACI,MADJ,EAC+B,IAD/B,EAEI,IAFJ;EAAA;EAAA;IAAA;MAAA;QAAA;UAGQ,OAHR,GAGkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,CAHjC;UAIQ,KAJR,GAIgB,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,MAA3B,CAJ/B;UAMQ,QANR,GAMmB,IAAI,IAAI,IAAR,GAAe,CAAf,GAAmB,IANtC;UAOQ,OAPR,GAOkB,KAAK,CAAC,IAPxB;UAQQ,WARR,GAQsB,OAAO,CAAC,KAR9B;UAUE,IAAI,CAAC,MAAL,CAAY,OAAO,GAAG,CAAtB,EAAyB;YAAA,OAAM,uBAAN;UAAA,CAAzB;UACA,IAAI,CAAC,iBAAL,CACI,WAAW,CAAC,KAAZ,CAAkB,QAAlB,EAA4B,QAAQ,GAAG,OAAvC,CADJ,EACqD,KAAK,CAAC,KAD3D;UAII,WAfN,GAeoB,CAfpB;;UAgBE,KAAS,CAAT,GAAa,QAAb,EAAuB,CAAC,GAAG,QAAQ,GAAG,OAAtC,EAA+C,CAAC,EAAhD,EAAoD;YAClD,WAAW,IAAI,WAAW,CAAC,CAAD,CAA1B;UACD;;UACK,iBAnBR,GAoBM,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,QAArB,EACK,MADL,CACY,CAAC,WAAD,CADZ,EAC2B,WAAW,CAAC,KAAZ,CAAkB,QAAQ,GAAG,OAA7B,CAD3B,CApBN;UAsBQ,cAtBR,GAsByB,OAAO,CAAC,OAAD,EAAU,iBAAV,CAtBhC;UAuBQ,YAvBR,GAuBuB,OAAO,CAAC,KAAD,EAAQ,CAAC,CAAC,CAAF,CAAR,CAvB9B;UAAA;UAAA,iCAwBkC,UAAU,CAAC,YAAD,CAxB5C;;QAAA;UAwBQ,iBAxBR;UAyBQ,OAzBR,GAyBkB,OAAO,CAAC,iBAAD,EAAoB,CAAC,CAAD,CAApB,CAzBzB;UA2BQ,GA3BR,GA2Bc,MAAM,CAAC,cAAD,EAAiB,OAAjB,EAA0B,QAA1B,CA3BpB;;UA8BE,IAAI,MAAM,KAAK,OAAf,EAAwB;YACtB,OAAO,CAAC,OAAR;UACD;;UACD,IAAI,IAAI,KAAK,KAAb,EAAoB;YAClB,KAAK,CAAC,OAAN;UACD;;UACD,OAAO,CAAC,OAAR;UACA,cAAc,CAAC,OAAf;UACA,YAAY,CAAC,OAAb;UACA,iBAAiB,CAAC,OAAlB;UAvCF,iCAyCS,GAzCT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AA4CA,OAAO,IAAM,gBAAgB,GAAG,iBAAzB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(tensor, mask, axis) {\n    const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n    const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n    const axisFrom = axis == null ? 0 : axis;\n    const maskDim = $mask.rank;\n    const tensorShape = $tensor.shape;\n    util.assert(maskDim > 0, () => 'mask cannot be scalar');\n    util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n    let leadingSize = 1;\n    for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n        leadingSize *= tensorShape[i];\n    }\n    const targetTensorShape = tensorShape.slice(0, axisFrom)\n        .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n    const reshapedTensor = reshape($tensor, targetTensorShape);\n    const reshapedMask = reshape($mask, [-1]);\n    const positivePositions = await whereAsync(reshapedMask);\n    const indices = squeeze(positivePositions, [1]);\n    const res = gather(reshapedTensor, indices, axisFrom);\n    // Ensure no memory leak.\n    if (tensor !== $tensor) {\n        $tensor.dispose();\n    }\n    if (mask !== $mask) {\n        $mask.dispose();\n    }\n    indices.dispose();\n    reshapedTensor.dispose();\n    reshapedMask.dispose();\n    positivePositions.dispose();\n    return res;\n}\nexport const booleanMaskAsync = booleanMaskAsync_;\n//# sourceMappingURL=boolean_mask.js.map"]},"metadata":{},"sourceType":"module"}