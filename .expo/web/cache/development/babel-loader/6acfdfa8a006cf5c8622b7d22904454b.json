{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Transpose } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { op } from \"./operation\";\n\nfunction transpose_(x, perm) {\n  var $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map(function (s, i) {\n      return i;\n    }).reverse();\n  }\n\n  util.assert($x.rank === perm.length, function () {\n    return \"Error in transpose: rank of input \" + $x.rank + \" \" + (\"must match length of perm \" + perm + \".\");\n  });\n  perm.forEach(function (axis) {\n    util.assert(axis >= 0 && axis < $x.rank, function () {\n      return \"All entries in 'perm' must be between 0 and \" + ($x.rank - 1) + (\" but got \" + perm);\n    });\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    perm: perm\n  };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\n\nexport var transpose = op({\n  transpose_: transpose_\n});","map":{"version":3,"sources":["../../src/ops/transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,SAAR;AAIA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,EAAR;;AAqBA,SAAS,UAAT,CAAsC,CAAtC,EAAuD,IAAvD,EAAsE;EACpE,IAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;EAEA,IAAI,IAAI,IAAI,IAAZ,EAAkB;IAChB,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ;MAAA,OAAU,CAAV;IAAA,CAAb,EAA0B,OAA1B,EAAP;EACD;;EACD,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,IAAI,CAAC,MADrB,EAEI;IAAA,OAAM,uCAAqC,EAAE,CAAC,IAAxC,yCAC2B,IAD3B,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,OAAL,CAAa,UAAA,IAAI,EAAG;IAClB,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAR,IAAa,IAAI,GAAG,EAAE,CAAC,IAD3B,EAEI;MAAA,OAAM,kDAA+C,EAAE,CAAC,IAAH,GAAU,CAAzD,mBACU,IADV,CAAN;IAAA,CAFJ;EAID,CALD;;EAOA,IAAI,EAAE,CAAC,IAAH,IAAW,CAAf,EAAkB;IAChB,OAAO,EAAE,CAAC,KAAH,EAAP;EACD;;EAED,IAAM,MAAM,GAAoB;IAAC,CAAC,EAAE;EAAJ,CAAhC;EACA,IAAM,KAAK,GAAmB;IAAC,IAAI,EAAJ;EAAD,CAA9B;EAEA,OAAO,MAAM,CAAC,SAAP,CACH,SADG,EACQ,MADR,EACwC,KADxC,CAAP;AAED;;AAED,OAAO,IAAM,SAAS,GAAG,EAAE,CAAC;EAAC,UAAU,EAAV;AAAD,CAAD,CAApB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm) {\n    const $x = convertToTensor(x, 'x', 'transpose');\n    if (perm == null) {\n        perm = $x.shape.map((s, i) => i).reverse();\n    }\n    util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of perm ${perm}.`);\n    perm.forEach(axis => {\n        util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n    });\n    if ($x.rank <= 1) {\n        return $x.clone();\n    }\n    const inputs = { x: $x };\n    const attrs = { perm };\n    return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({ transpose_ });\n//# sourceMappingURL=transpose.js.map"]},"metadata":{},"sourceType":"module"}