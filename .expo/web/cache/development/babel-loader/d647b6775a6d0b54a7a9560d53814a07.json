{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from \"./custom_op/node_value_impl\";\nimport { getRegisteredOp } from \"./custom_op/register\";\nimport * as arithmetic from \"./executors/arithmetic_executor\";\nimport * as basicMath from \"./executors/basic_math_executor\";\nimport * as control from \"./executors/control_executor\";\nimport * as convolution from \"./executors/convolution_executor\";\nimport * as creation from \"./executors/creation_executor\";\nimport * as dynamic from \"./executors/dynamic_executor\";\nimport * as evaluation from \"./executors/evaluation_executor\";\nimport * as graph from \"./executors/graph_executor\";\nimport * as hashTable from \"./executors/hash_table_executor\";\nimport * as image from \"./executors/image_executor\";\nimport * as logical from \"./executors/logical_executor\";\nimport * as matrices from \"./executors/matrices_executor\";\nimport * as normalization from \"./executors/normalization_executor\";\nimport * as reduction from \"./executors/reduction_executor\";\nimport * as sliceJoin from \"./executors/slice_join_executor\";\nimport * as spectral from \"./executors/spectral_executor\";\nimport * as transformation from \"./executors/transformation_executor\";\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  var value = function (node, tensorMap, context) {\n    switch (node.category) {\n      case 'arithmetic':\n        return tfc.tidy(function () {\n          return arithmetic.executeOp(node, tensorMap, context);\n        });\n\n      case 'basic_math':\n        return tfc.tidy(function () {\n          return basicMath.executeOp(node, tensorMap, context);\n        });\n\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n\n      case 'convolution':\n        return tfc.tidy(function () {\n          return convolution.executeOp(node, tensorMap, context);\n        });\n\n      case 'creation':\n        return tfc.tidy(function () {\n          return creation.executeOp(node, tensorMap, context);\n        });\n\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n\n      case 'evaluation':\n        return tfc.tidy(function () {\n          return evaluation.executeOp(node, tensorMap, context);\n        });\n\n      case 'image':\n        return tfc.tidy(function () {\n          return image.executeOp(node, tensorMap, context);\n        });\n\n      case 'graph':\n        return tfc.tidy(function () {\n          return graph.executeOp(node, tensorMap, context);\n        });\n\n      case 'logical':\n        return tfc.tidy(function () {\n          return logical.executeOp(node, tensorMap, context);\n        });\n\n      case 'matrices':\n        return tfc.tidy(function () {\n          return matrices.executeOp(node, tensorMap, context);\n        });\n\n      case 'normalization':\n        return tfc.tidy(function () {\n          return normalization.executeOp(node, tensorMap, context);\n        });\n\n      case 'reduction':\n        return tfc.tidy(function () {\n          return reduction.executeOp(node, tensorMap, context);\n        });\n\n      case 'slice_join':\n        return tfc.tidy(function () {\n          return sliceJoin.executeOp(node, tensorMap, context);\n        });\n\n      case 'spectral':\n        return tfc.tidy(function () {\n          return spectral.executeOp(node, tensorMap, context);\n        });\n\n      case 'transformation':\n        return tfc.tidy(function () {\n          return transformation.executeOp(node, tensorMap, context);\n        });\n\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n\n      case 'custom':\n        var opMapper = getRegisteredOp(node.op);\n\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(\"Custom op \" + node.op + \" is not registered.\");\n        }\n\n      default:\n        throw TypeError(\"Unknown op '\" + node.op + \"'. File an issue at \" + \"https://github.com/tensorflow/tfjs/issues so we can add it\" + \", or register a custom execution with tf.registerOp()\");\n    }\n  }(node, tensorMap, context);\n\n  if (tfc.util.isPromise(value)) {\n    return value.then(function (data) {\n      return [].concat(data);\n    });\n  }\n\n  return [].concat(value);\n}","map":{"version":3,"sources":["../../src/operations/operation_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=operation_executor.js.map"]},"metadata":{},"sourceType":"module"}