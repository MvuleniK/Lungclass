{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from \"./shader_compiler\";\nexport var ReverseProgram = _createClass(function ReverseProgram(xShape, axis) {\n  _classCallCheck(this, ReverseProgram);\n\n  this.variableNames = ['x'];\n  var rank = xShape.length;\n\n  if (rank > 4) {\n    throw new Error(\"WebGL backend: Reverse of rank-\" + rank + \" tensor is not yet supported\");\n  }\n\n  this.outputShape = xShape;\n\n  if (rank === 1) {\n    this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + xShape[0] + \" - coord - 1));\\n        }\\n      \";\n    return;\n  }\n\n  var getInCoord = function getInCoord(i) {\n    if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n      return xShape[i] + \" - coords[\" + i + \"] - 1\";\n    }\n\n    return \"coords[\" + i + \"]\";\n  };\n\n  var inCoords = xShape.map(function (_, i) {\n    return getInCoord(i);\n  }).join(',');\n  var type = getCoordsDataType(rank);\n  this.userCode = \"\\n      void main() {\\n        \" + type + \" coords = getOutputCoords();\\n        setOutput(getX(\" + inCoords + \"));\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/reverse_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR;AAEA,WAAa,cAAb,gBAKE,wBAAY,MAAZ,EAA8B,IAA9B,EAA4C;EAAA;;EAJ5C,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EAKE,IAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;EACA,IAAI,IAAI,GAAG,CAAX,EAAc;IACZ,MAAM,IAAI,KAAJ,qCACgC,IADhC,kCAAN;EAED;;EACD,KAAK,WAAL,GAAmB,MAAnB;;EAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;IACd,KAAK,QAAL,oGAGqB,MAAM,CAAC,CAAD,CAH3B;IAMA;EACD;;EACD,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,CAAD,EAAc;IAC/B,IAAI,IAAI,CAAC,OAAL,CAAa,CAAb,MAAoB,CAAC,CAArB,IAA0B,MAAM,CAAC,CAAD,CAAN,KAAc,CAA5C,EAA+C;MAC7C,OAAU,MAAM,CAAC,CAAD,CAAhB,kBAAgC,CAAhC;IACD;;IACD,mBAAiB,CAAjB;EACD,CALD;;EAMA,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;IAAA,OAAU,UAAU,CAAC,CAAD,CAApB;EAAA,CAAX,EAAoC,IAApC,CAAyC,GAAzC,CAAjB;EACA,IAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;EAEA,KAAK,QAAL,uCAEM,IAFN,6DAGqB,QAHrB;AAMD,CArCH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reverse_gpu.js.map"]},"metadata":{},"sourceType":"module"}