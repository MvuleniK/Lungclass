{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../../engine\";\nimport { NonMaxSuppressionV5 } from \"../../kernel_names\";\nimport { convertToTensor } from \"../../tensor_util_env\";\nimport { nonMaxSuppSanityCheck } from \"../nonmax_util\";\nimport { op } from \"../operation\";\n\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize) {\n  var iouThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  var scoreThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Number.NEGATIVE_INFINITY;\n  var softNmsSigma = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n  var $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  var $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n  var params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n  var inputs = {\n    boxes: $boxes,\n    scores: $scores\n  };\n  var attrs = {\n    maxOutputSize: maxOutputSize,\n    iouThreshold: iouThreshold,\n    scoreThreshold: scoreThreshold,\n    softNmsSigma: softNmsSigma\n  };\n  var result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n  return {\n    selectedIndices: result[0],\n    selectedScores: result[1]\n  };\n}\n\nexport var nonMaxSuppressionWithScore = op({\n  nonMaxSuppressionWithScore_: nonMaxSuppressionWithScore_\n});","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_with_score.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,mBAAR;AAIA,SAAQ,eAAR;AAGA,SAAQ,qBAAR;AACA,SAAQ,EAAR;;AA+BA,SAAS,2BAAT,CACI,KADJ,EACgC,MADhC,EAEI,aAFJ,EAIsB;EAAA,IAFK,YAEL,uEAFoB,GAEpB;EAAA,IADlB,cACkB,uEADD,MAAM,CAAC,iBACN;EAAA,IAAlB,YAAkB,uEAAH,GAAG;EACpB,IAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,mBAAjB,CAA9B;EACA,IAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,mBAAnB,CAA/B;EAEA,IAAM,MAAM,GAAG,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,EAEhC,YAFgC,CAApC;EAGA,aAAa,GAAG,MAAM,CAAC,aAAvB;EACA,YAAY,GAAG,MAAM,CAAC,YAAtB;EACA,cAAc,GAAG,MAAM,CAAC,cAAxB;EACA,YAAY,GAAG,MAAM,CAAC,YAAtB;EAEA,IAAM,MAAM,GAA8B;IAAC,KAAK,EAAE,MAAR;IAAgB,MAAM,EAAE;EAAxB,CAA1C;EACA,IAAM,KAAK,GACP;IAAC,aAAa,EAAb,aAAD;IAAgB,YAAY,EAAZ,YAAhB;IAA8B,cAAc,EAAd,cAA9B;IAA8C,YAAY,EAAZ;EAA9C,CADJ;EAIA,IAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CACI,mBADJ,EACyB,MADzB,EAEI,KAFJ,CAAf;EAIA,OAAO;IAAC,eAAe,EAAE,MAAM,CAAC,CAAD,CAAxB;IAA6B,cAAc,EAAE,MAAM,CAAC,CAAD;EAAnD,CAAP;AACD;;AAED,OAAO,IAAM,0BAA0B,GAAG,EAAE,CAAC;EAAC,2BAA2B,EAA3B;AAAD,CAAD,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV5 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n    return { selectedIndices: result[0], selectedScores: result[1] };\n}\nexport const nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });\n//# sourceMappingURL=non_max_suppression_with_score.js.map"]},"metadata":{},"sourceType":"module"}