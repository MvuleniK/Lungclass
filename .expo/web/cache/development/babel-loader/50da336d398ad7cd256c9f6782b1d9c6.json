{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { transposeImpl } from \"./Transpose_impl\";\nexport function transpose(args) {\n  var inputs = args.inputs,\n      attrs = args.attrs,\n      backend = args.backend;\n  var x = inputs.x;\n  var perm = attrs.perm;\n  assertNotComplex(x, 'transpose');\n  var xRank = x.shape.length;\n  var newShape = new Array(xRank);\n\n  for (var i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  var values = backend.data.get(x.dataId).values;\n  var result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n  var dataId = backend.write(result, newShape, x.dtype);\n  return {\n    dataId: dataId,\n    shape: newShape,\n    dtype: x.dtype\n  };\n}\nexport var transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,SAA9C,QAA2G,uBAA3G;AAGA,SAAQ,gBAAR;AAEA,SAAQ,aAAR;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,KAAf,GAAiC,IAAjC,CAAe,KAAf;EAAA,IAAsB,OAAtB,GAAiC,IAAjC,CAAsB,OAAtB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;EAEA,gBAAgB,CAAC,CAAD,EAAI,WAAJ,CAAhB;EAEA,IAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;EAEA,IAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,CAAC,KAAF,CAAQ,IAAI,CAAC,CAAD,CAAZ,CAAd;EACD;;EAED,IAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA1C;EACA,IAAM,MAAM,GAAG,aAAa,CAAC,MAAD,EAAS,CAAC,CAAC,KAAX,EAAkB,CAAC,CAAC,KAApB,EAA2B,IAA3B,EAAiC,QAAjC,CAA5B;EAEA,IAAM,MAAM,GAAG,OAAO,CAAC,KAAR,CAAc,MAAd,EAAsB,QAAtB,EAAgC,CAAC,CAAC,KAAlC,CAAf;EACA,OAAO;IAAC,MAAM,EAAN,MAAD;IAAS,KAAK,EAAE,QAAhB;IAA0B,KAAK,EAAE,CAAC,CAAC;EAAnC,CAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,SAD+B;EAE3C,WAAW,EAAE,KAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map"]},"metadata":{},"sourceType":"module"}