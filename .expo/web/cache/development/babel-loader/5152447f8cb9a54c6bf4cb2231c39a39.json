{"ast":null,"code":"import { assert } from \"../util\";\nimport { op } from \"./operation\";\nimport { pad } from \"./pad\";\n\nfunction pad1d_(x, paddings) {\n  var constantValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  assert(paddings.length === 2, function () {\n    return 'Invalid number of paddings. Must be length of 2.';\n  });\n  return pad(x, [paddings], constantValue);\n}\n\nexport var pad1d = op({\n  pad1d_: pad1d_\n});","map":{"version":3,"sources":["../../src/ops/pad1d.ts"],"names":[],"mappings":"AAkBA,SAAQ,MAAR;AACA,SAAQ,EAAR;AACA,SAAQ,GAAR;;AAKA,SAAS,MAAT,CACI,CADJ,EAC4B,QAD5B,EAEqB;EAAA,IAAjB,aAAiB,uEAAD,CAAC;EACnB,MAAM,CACF,QAAQ,CAAC,MAAT,KAAoB,CADlB,EAEF;IAAA,OAAM,kDAAN;EAAA,CAFE,CAAN;EAGA,OAAO,GAAG,CAAC,CAAD,EAAI,CAAC,QAAD,CAAJ,EAAgB,aAAhB,CAAV;AACD;;AAED,OAAO,IAAM,KAAK,GAAG,EAAE,CAAC;EAAC,MAAM,EAAN;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');\n    return pad(x, [paddings], constantValue);\n}\nexport const pad1d = op({ pad1d_ });\n//# sourceMappingURL=pad1d.js.map"]},"metadata":{},"sourceType":"module"}