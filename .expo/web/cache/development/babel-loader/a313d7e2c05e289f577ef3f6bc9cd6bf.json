{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from \"./Reshape\";\nexport function expandDims(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var input = inputs.input;\n  var dim = attrs.dim;\n  var inputRank = input.shape.length;\n  var newShape = input.shape.slice();\n  var $dim = dim;\n\n  if (dim < 0) {\n    util.assert(-(inputRank + 1) <= dim, function () {\n      return \"Axis must be in the interval [\" + -(inputRank + 1) + \", \" + inputRank + \"]\";\n    });\n    $dim = inputRank + dim + 1;\n  }\n\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend: backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport var expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims\n};","map":{"version":3,"sources":["../../src/kernels/ExpandDims.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAR,EAA6F,IAA7F,QAAwG,uBAAxG;AAGA,SAAQ,OAAR;AAEA,OAAM,SAAU,UAAV,CAAqB,IAArB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,KAAP,GAAgB,MAAhB,CAAO,KAAP;EACA,IAAO,GAAP,GAAc,KAAd,CAAO,GAAP;EAEA,IAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,MAA9B;EACA,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAjB;EACA,IAAI,IAAI,GAAG,GAAX;;EACA,IAAI,GAAG,GAAG,CAAV,EAAa;IAEX,IAAI,CAAC,MAAL,CACI,EAAE,SAAS,GAAG,CAAd,KAAoB,GADxB,EAEI;MAAA,0CAAuC,EAAG,SAAS,GAAG,CAAf,CAAvC,UACI,SADJ;IAAA,CAFJ;IAIA,IAAI,GAAG,SAAS,GAAG,GAAZ,GAAkB,CAAzB;EACD;;EACD,QAAQ,CAAC,MAAT,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,CAAzB;EAEA,OAAO,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAqB,OAAO,EAAP,OAArB;IAA8B,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAArC,CAAD,CAAd;AACD;AAED,OAAO,IAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UADgC;EAE5C,WAAW,EAAE,KAF+B;EAG5C,UAAU,EAAE;AAHgC,CAAvC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, backend, attrs } = args;\n    const { input } = inputs;\n    const { dim } = attrs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'cpu',\n    kernelFunc: expandDims\n};\n//# sourceMappingURL=ExpandDims.js.map"]},"metadata":{},"sourceType":"module"}