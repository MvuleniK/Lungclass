{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from \"../../executor/tensor_array\";\nimport { fromTensor, reserve, scatter, split } from \"../../executor/tensor_list\";\nimport { cloneTensor, getParamValue, getTensor } from \"./utils\";\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var thenFunc, elseFunc, cond, args, condValue, _ret, pred, _pred, data, inputName, _data, frameId, _data2, _data3, _data4, size, dtype, elementShape, dynamicSize, clearAfterRead, identicalElementShapes, name, tensorArray, id, index, writeTensor, writeTensorArray, readId, readIndex, readTensorArray, gatherId, gatherIndices, gatherDtype, gatherTensorArray, scatterId, scatterIndices, scatterTensor, scatterTensorArray, concatId, concatTensorArray, concatDtype, splitId, splitTensor, lengths, splitTensorArray, sizeId, sizeTensorArray, closeId, closeTensorArray, idTensor, _index, _writeTensor, tensorList, _idTensor, _readIndex, _elementShape, elementDType, _tensorList, _scatterIndices, _scatterTensor, _elementShape2, numElements, _tensorList2, _elementShape3, elementDtype, _numElements, _tensorList3, _gatherId, _gatherIndices, _elementShape4, _elementDtype, _tensorList4, _idTensor2, _elementShape5, _elementDtype2, _numElements2, _tensorList5, tensor, _elementShape6, _elementDtype3, _tensorList6, _concatId, _tensorList7, _concatDtype, _elementShape7, _idTensor3, _writeTensor2, _tensorList8, _idTensor4, _elementShape8, _elementDType, _tensorList9, _splitTensor, _elementShape9, _lengths, _tensorList10;\n\n  return _regeneratorRuntime.async(function executeOp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = node.op;\n          _context3.next = _context3.t0 === 'If' ? 3 : _context3.t0 === 'StatelessIf' ? 3 : _context3.t0 === 'While' ? 15 : _context3.t0 === 'StatelessWhile' ? 15 : _context3.t0 === 'LoopCond' ? 20 : _context3.t0 === 'Switch' ? 22 : _context3.t0 === 'Merge' ? 33 : _context3.t0 === 'Enter' ? 38 : _context3.t0 === 'Exit' ? 42 : _context3.t0 === 'NextIteration' ? 45 : _context3.t0 === 'TensorArrayV3' ? 48 : _context3.t0 === 'TensorArrayWriteV3' ? 58 : _context3.t0 === 'TensorArrayReadV3' ? 64 : _context3.t0 === 'TensorArrayGatherV3' ? 68 : _context3.t0 === 'TensorArrayScatterV3' ? 73 : _context3.t0 === 'TensorArrayConcatV3' ? 79 : _context3.t0 === 'TensorArraySplitV3' ? 83 : _context3.t0 === 'TensorArraySizeV3' ? 89 : _context3.t0 === 'TensorArrayCloseV3' ? 92 : _context3.t0 === 'TensorListSetItem' ? 96 : _context3.t0 === 'TensorListGetItem' ? 102 : _context3.t0 === 'TensorListScatterV2' ? 108 : _context3.t0 === 'TensorListScatter' ? 108 : _context3.t0 === 'TensorListReserve' ? 115 : _context3.t0 === 'TensorListGather' ? 121 : _context3.t0 === 'TensorListStack' ? 127 : _context3.t0 === 'TensorListFromTensor' ? 133 : _context3.t0 === 'TensorListConcat' ? 139 : _context3.t0 === 'TensorListPushBack' ? 144 : _context3.t0 === 'TensorListPopBack' ? 149 : _context3.t0 === 'TensorListSplit' ? 154 : 160;\n          break;\n\n        case 3:\n          thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n          elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n          cond = getParamValue('cond', node, tensorMap, context);\n          args = getParamValue('args', node, tensorMap, context);\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(cond.data());\n\n        case 9:\n          condValue = _context3.sent;\n\n          if (!condValue[0]) {\n            _context3.next = 14;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n        case 14:\n          return _context3.abrupt(\"return\", context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(function _callee() {\n            var bodyFunc, condFunc, args, condResult, argIds, condValue, result, _loop;\n\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    bodyFunc = getParamValue('body', node, tensorMap, context);\n                    condFunc = getParamValue('cond', node, tensorMap, context);\n                    args = getParamValue('args', node, tensorMap, context);\n                    _context2.next = 5;\n                    return _regeneratorRuntime.awrap(context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n                  case 5:\n                    condResult = _context2.sent;\n                    argIds = args.map(function (tensor) {\n                      return tensor.id;\n                    });\n                    _context2.next = 9;\n                    return _regeneratorRuntime.awrap(condResult[0].data());\n\n                  case 9:\n                    condValue = _context2.sent;\n                    condResult.forEach(function (tensor) {\n                      if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                      }\n                    });\n                    result = args;\n\n                    _loop = function _loop() {\n                      var origResult, resultIds, condResult;\n                      return _regeneratorRuntime.async(function _loop$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              origResult = result;\n                              _context.next = 3;\n                              return _regeneratorRuntime.awrap(context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n\n                            case 3:\n                              result = _context.sent;\n                              resultIds = result.map(function (tensor) {\n                                return tensor.id;\n                              });\n                              origResult.forEach(function (tensor) {\n                                if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                  tensor.dispose();\n                                }\n                              });\n                              _context.next = 8;\n                              return _regeneratorRuntime.awrap(context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n\n                            case 8:\n                              condResult = _context.sent;\n                              _context.next = 11;\n                              return _regeneratorRuntime.awrap(condResult[0].data());\n\n                            case 11:\n                              condValue = _context.sent;\n                              condResult.forEach(function (tensor) {\n                                if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                  tensor.dispose();\n                                }\n                              });\n\n                            case 13:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    };\n\n                  case 13:\n                    if (!condValue[0]) {\n                      _context2.next = 18;\n                      break;\n                    }\n\n                    _context2.next = 16;\n                    return _regeneratorRuntime.awrap(_loop());\n\n                  case 16:\n                    _context2.next = 13;\n                    break;\n\n                  case 18:\n                    return _context2.abrupt(\"return\", {\n                      v: result\n                    });\n\n                  case 19:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }());\n\n        case 17:\n          _ret = _context3.sent;\n\n          if (!(typeof _ret === \"object\")) {\n            _context3.next = 20;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", _ret.v);\n\n        case 20:\n          pred = getParamValue('pred', node, tensorMap, context);\n          return _context3.abrupt(\"return\", [cloneTensor(pred)]);\n\n        case 22:\n          _pred = getParamValue('pred', node, tensorMap, context);\n          data = getParamValue('data', node, tensorMap, context);\n\n          if (!data.kept) {\n            data = cloneTensor(data);\n          }\n\n          _context3.next = 27;\n          return _regeneratorRuntime.awrap(_pred.data());\n\n        case 27:\n          if (!_context3.sent[0]) {\n            _context3.next = 31;\n            break;\n          }\n\n          _context3.t1 = [undefined, data];\n          _context3.next = 32;\n          break;\n\n        case 31:\n          _context3.t1 = [data, undefined];\n\n        case 32:\n          return _context3.abrupt(\"return\", _context3.t1);\n\n        case 33:\n          inputName = node.inputNames.find(function (name) {\n            return getTensor(name, tensorMap, context) !== undefined;\n          });\n\n          if (!inputName) {\n            _context3.next = 37;\n            break;\n          }\n\n          _data = getTensor(inputName, tensorMap, context);\n          return _context3.abrupt(\"return\", [cloneTensor(_data)]);\n\n        case 37:\n          return _context3.abrupt(\"return\", undefined);\n\n        case 38:\n          frameId = getParamValue('frameName', node, tensorMap, context);\n          _data2 = getParamValue('tensor', node, tensorMap, context);\n          context.enterFrame(frameId);\n          return _context3.abrupt(\"return\", [cloneTensor(_data2)]);\n\n        case 42:\n          _data3 = getParamValue('tensor', node, tensorMap, context);\n          context.exitFrame();\n          return _context3.abrupt(\"return\", [cloneTensor(_data3)]);\n\n        case 45:\n          _data4 = getParamValue('tensor', node, tensorMap, context);\n          context.nextIteration();\n          return _context3.abrupt(\"return\", [cloneTensor(_data4)]);\n\n        case 48:\n          size = getParamValue('size', node, tensorMap, context);\n          dtype = getParamValue('dtype', node, tensorMap, context);\n          elementShape = getParamValue('elementShape', node, tensorMap, context);\n          dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n          clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n          identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n          name = getParamValue('name', node, tensorMap, context);\n          tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n          context.addTensorArray(tensorArray);\n          return _context3.abrupt(\"return\", [tensorArray.idTensor, scalar(1.0)]);\n\n        case 58:\n          id = getParamValue('tensorArrayId', node, tensorMap, context);\n          index = getParamValue('index', node, tensorMap, context);\n          writeTensor = getParamValue('tensor', node, tensorMap, context);\n          writeTensorArray = context.getTensorArray(id.id);\n          writeTensorArray.write(index, writeTensor);\n          return _context3.abrupt(\"return\", [writeTensorArray.idTensor]);\n\n        case 64:\n          readId = getParamValue('tensorArrayId', node, tensorMap, context);\n          readIndex = getParamValue('index', node, tensorMap, context);\n          readTensorArray = context.getTensorArray(readId.id);\n          return _context3.abrupt(\"return\", [readTensorArray.read(readIndex)]);\n\n        case 68:\n          gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n          gatherIndices = getParamValue('indices', node, tensorMap, context);\n          gatherDtype = getParamValue('dtype', node, tensorMap, context);\n          gatherTensorArray = context.getTensorArray(gatherId.id);\n          return _context3.abrupt(\"return\", [gatherTensorArray.gather(gatherIndices, gatherDtype)]);\n\n        case 73:\n          scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n          scatterIndices = getParamValue('indices', node, tensorMap, context);\n          scatterTensor = getParamValue('tensor', node, tensorMap, context);\n          scatterTensorArray = context.getTensorArray(scatterId.id);\n          scatterTensorArray.scatter(scatterIndices, scatterTensor);\n          return _context3.abrupt(\"return\", [scatterTensorArray.idTensor]);\n\n        case 79:\n          concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n          concatTensorArray = context.getTensorArray(concatId.id);\n          concatDtype = getParamValue('dtype', node, tensorMap, context);\n          return _context3.abrupt(\"return\", [concatTensorArray.concat(concatDtype)]);\n\n        case 83:\n          splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n          splitTensor = getParamValue('tensor', node, tensorMap, context);\n          lengths = getParamValue('lengths', node, tensorMap, context);\n          splitTensorArray = context.getTensorArray(splitId.id);\n          splitTensorArray.split(lengths, splitTensor);\n          return _context3.abrupt(\"return\", [splitTensorArray.idTensor]);\n\n        case 89:\n          sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n          sizeTensorArray = context.getTensorArray(sizeId.id);\n          return _context3.abrupt(\"return\", [scalar(sizeTensorArray.size(), 'int32')]);\n\n        case 92:\n          closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n          closeTensorArray = context.getTensorArray(closeId.id);\n          closeTensorArray.clearAndClose();\n          return _context3.abrupt(\"return\", [closeTensorArray.idTensor]);\n\n        case 96:\n          idTensor = getParamValue('tensorListId', node, tensorMap, context);\n          _index = getParamValue('index', node, tensorMap, context);\n          _writeTensor = getParamValue('tensor', node, tensorMap, context);\n          tensorList = context.getTensorList(idTensor.id);\n          tensorList.setItem(_index, _writeTensor);\n          return _context3.abrupt(\"return\", [tensorList.idTensor]);\n\n        case 102:\n          _idTensor = getParamValue('tensorListId', node, tensorMap, context);\n          _readIndex = getParamValue('index', node, tensorMap, context);\n          _elementShape = getParamValue('elementShape', node, tensorMap, context);\n          elementDType = getParamValue('elementDType', node, tensorMap, context);\n          _tensorList = context.getTensorList(_idTensor.id);\n          return _context3.abrupt(\"return\", [_tensorList.getItem(_readIndex, _elementShape, elementDType)]);\n\n        case 108:\n          _scatterIndices = getParamValue('indices', node, tensorMap, context);\n          _scatterTensor = getParamValue('tensor', node, tensorMap, context);\n          _elementShape2 = getParamValue('elementShape', node, tensorMap, context);\n          numElements = getParamValue('numElements', node, tensorMap, context);\n          _tensorList2 = scatter(_scatterTensor, _scatterIndices, _elementShape2, numElements);\n          context.addTensorList(_tensorList2);\n          return _context3.abrupt(\"return\", [_tensorList2.idTensor]);\n\n        case 115:\n          _elementShape3 = getParamValue('elementShape', node, tensorMap, context);\n          elementDtype = getParamValue('elementDType', node, tensorMap, context);\n          _numElements = getParamValue('numElements', node, tensorMap, context);\n          _tensorList3 = reserve(_elementShape3, elementDtype, _numElements);\n          context.addTensorList(_tensorList3);\n          return _context3.abrupt(\"return\", [_tensorList3.idTensor]);\n\n        case 121:\n          _gatherId = getParamValue('tensorListId', node, tensorMap, context);\n          _gatherIndices = getParamValue('indices', node, tensorMap, context);\n          _elementShape4 = getParamValue('elementShape', node, tensorMap, context);\n          _elementDtype = getParamValue('elementDType', node, tensorMap, context);\n          _tensorList4 = context.getTensorList(_gatherId.id);\n          return _context3.abrupt(\"return\", [_tensorList4.gather(_gatherIndices, _elementDtype, _elementShape4)]);\n\n        case 127:\n          _idTensor2 = getParamValue('tensorListId', node, tensorMap, context);\n          _elementShape5 = getParamValue('elementShape', node, tensorMap, context);\n          _elementDtype2 = getParamValue('elementDType', node, tensorMap, context);\n          _numElements2 = getParamValue('numElements', node, tensorMap, context);\n          _tensorList5 = context.getTensorList(_idTensor2.id);\n          return _context3.abrupt(\"return\", [_tensorList5.stack(_elementShape5, _elementDtype2, _numElements2)]);\n\n        case 133:\n          tensor = getParamValue('tensor', node, tensorMap, context);\n          _elementShape6 = getParamValue('elementShape', node, tensorMap, context);\n          _elementDtype3 = getParamValue('elementDType', node, tensorMap, context);\n          _tensorList6 = fromTensor(tensor, _elementShape6, _elementDtype3);\n          context.addTensorList(_tensorList6);\n          return _context3.abrupt(\"return\", [_tensorList6.idTensor]);\n\n        case 139:\n          _concatId = getParamValue('tensorListId', node, tensorMap, context);\n          _tensorList7 = context.getTensorList(_concatId.id);\n          _concatDtype = getParamValue('dtype', node, tensorMap, context);\n          _elementShape7 = getParamValue('elementShape', node, tensorMap, context);\n          return _context3.abrupt(\"return\", [_tensorList7.concat(_concatDtype, _elementShape7)]);\n\n        case 144:\n          _idTensor3 = getParamValue('tensorListId', node, tensorMap, context);\n          _writeTensor2 = getParamValue('tensor', node, tensorMap, context);\n          _tensorList8 = context.getTensorList(_idTensor3.id);\n\n          _tensorList8.pushBack(_writeTensor2);\n\n          return _context3.abrupt(\"return\", [_tensorList8.idTensor]);\n\n        case 149:\n          _idTensor4 = getParamValue('tensorListId', node, tensorMap, context);\n          _elementShape8 = getParamValue('elementShape', node, tensorMap, context);\n          _elementDType = getParamValue('elementDType', node, tensorMap, context);\n          _tensorList9 = context.getTensorList(_idTensor4.id);\n          return _context3.abrupt(\"return\", [_tensorList9.popBack(_elementShape8, _elementDType)]);\n\n        case 154:\n          _splitTensor = getParamValue('tensor', node, tensorMap, context);\n          _elementShape9 = getParamValue('elementShape', node, tensorMap, context);\n          _lengths = getParamValue('lengths', node, tensorMap, context);\n          _tensorList10 = split(_splitTensor, _lengths, _elementShape9);\n          context.addTensorList(_tensorList10);\n          return _context3.abrupt(\"return\", [_tensorList10.idTensor]);\n\n        case 160:\n          throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n\n        case 161:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var CATEGORY = 'control';","map":{"version":3,"sources":["../../../src/operations/executors/control_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = reserve(elementShape, elementDtype, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=control_executor.js.map"]},"metadata":{},"sourceType":"module"}