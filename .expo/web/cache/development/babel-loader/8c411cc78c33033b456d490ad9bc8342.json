{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar, tensor1d } from '@tensorflow/tfjs-core';\nimport { ValueError } from \"../errors\";\nexport function isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\nexport function arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n\n  if (end == null) {\n    end = array.length;\n  }\n\n  var prod = 1;\n\n  for (var i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n\n  return prod;\n}\n\nfunction toArray1D(array) {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n\nexport function min(array) {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\nexport function max(array) {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\nexport function sum(array) {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\nexport function mean(array) {\n  return sum(array) / array.length;\n}\nexport function variance(array) {\n  var demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  var sumSquare = tfc.sum(tfc.mul(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\nexport function median(array) {\n  var arraySorted = array.slice().sort(function (a, b) {\n    return a - b;\n  });\n  var lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  var highIdx = Math.ceil((arraySorted.length - 1) / 2);\n\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\nexport function range(begin, end) {\n  if (end < begin) {\n    throw new ValueError(\"end (\" + end + \") < begin (\" + begin + \") is forbidden.\");\n  }\n\n  var out = [];\n\n  for (var i = begin; i < end; ++i) {\n    out.push(i);\n  }\n\n  return out;\n}","map":{"version":3,"sources":["../../src/utils/math_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar, tensor1d } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    let prod = 1;\n    for (let i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array) {\n    array = Array.isArray(array) ? new Float32Array(array) : array;\n    return tensor1d(array);\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n    return tfc.min(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n    return tfc.max(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n    return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n    return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n    const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n    const sumSquare = tfc.sum(tfc.mul(demeaned, demeaned)).dataSync()[0];\n    return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n    const arraySorted = array.slice().sort((a, b) => a - b);\n    const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n    const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n    if (lowIdx === highIdx) {\n        return arraySorted[lowIdx];\n    }\n    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n    if (end < begin) {\n        throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n    }\n    const out = [];\n    for (let i = begin; i < end; ++i) {\n        out.push(i);\n    }\n    return out;\n}\n//# sourceMappingURL=math_utils.js.map"]},"metadata":{},"sourceType":"module"}