{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Conv3D } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { eitherStridesOrDilationsAreOne } from \"./conv_util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction conv3d_(x, filter, strides, pad) {\n  var dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NDHWC';\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1, 1];\n  var $x = convertToTensor(x, 'x', 'conv3d');\n  var $filter = convertToTensor(filter, 'filter', 'conv3d');\n  var x5D = $x;\n  var reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, function () {\n    return \"Error in conv3d: input must be rank 5, but got rank \" + x5D.rank + \".\";\n  });\n  util.assert($filter.rank === 5, function () {\n    return \"Error in conv3d: filter must be rank 5, but got rank \" + ($filter.rank + \".\");\n  });\n  util.assert(x5D.shape[4] === $filter.shape[3], function () {\n    return \"Error in conv3d: depth of input (\" + x5D.shape[4] + \") must match \" + (\"input depth for filter \" + $filter.shape[3] + \".\");\n  });\n  util.assert(eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in conv3D: Either strides or dilations must be 1. ' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\");\n  });\n  util.assert(dataFormat === 'NDHWC', function () {\n    return \"Error in conv3d: got dataFormat of \" + dataFormat + \" but only NDHWC is currently supported.\";\n  });\n  var inputs = {\n    x: x5D,\n    filter: $filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dataFormat: dataFormat,\n    dilations: dilations\n  };\n  var res = ENGINE.runKernel(Conv3D, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var conv3d = op({\n  conv3d_: conv3d_\n});","map":{"version":3,"sources":["../../src/ops/conv3d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR;AACA,SAAQ,MAAR;AAIA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,8BAAR;AACA,SAAQ,EAAR;AACA,SAAQ,OAAR;;AAkCA,SAAS,OAAT,CACI,CADJ,EACqB,MADrB,EAEI,OAFJ,EAE8C,GAF9C,EAI0D;EAAA,IADtD,UACsD,uEADxB,OACwB;EAAA,IAAtD,SAAsD,uEAAT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAS;EACxD,IAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAA1B;EACA,IAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAA/B;EAEA,IAAI,GAAG,GAAG,EAAV;EACA,IAAI,YAAY,GAAG,KAAnB;;EAEA,IAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;IACjB,YAAY,GAAG,IAAf;IACA,GAAG,GAAG,OAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,EAAE,CAAC,KAAH,CAAS,CAAT,CAAJ,EAAiB,EAAE,CAAC,KAAH,CAAS,CAAT,CAAjB,EAA8B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA9B,EAA2C,EAAE,CAAC,KAAH,CAAS,CAAT,CAA3C,CAAL,CAAb;EACD;;EACD,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CADjB,EAEI;IAAA,gEAA6D,GAAG,CAAC,IAAjE;EAAA,CAFJ;EAGA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CADrB,EAEI;IAAA,OAAM,2DACC,OAAO,CAAC,IADT,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,KAAJ,CAAU,CAAV,MAAiB,OAAO,CAAC,KAAR,CAAc,CAAd,CADrB,EAEI;IAAA,OAAM,sCAAoC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAApC,kDACwB,OAAO,CAAC,KAAR,CAAc,CAAd,CADxB,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,8BAA8B,CAAC,OAAD,EAAU,SAAV,CADlC,EAEI;IAAA,OAAM,+EACa,OADb,wBACuC,SADvC,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,UAAU,KAAK,OADnB,EAEI;IAAA,+CACI,UADJ;EAAA,CAFJ;EAKA,IAAM,MAAM,GAAiB;IAAC,CAAC,EAAE,GAAJ;IAAS,MAAM,EAAE;EAAjB,CAA7B;EAEA,IAAM,KAAK,GAAgB;IAAC,OAAO,EAAP,OAAD;IAAU,GAAG,EAAH,GAAV;IAAe,UAAU,EAAV,UAAf;IAA2B,SAAS,EAAT;EAA3B,CAA3B;EAGA,IAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACI,MADJ,EACY,MADZ,EAEI,KAFJ,CAAZ;;EAIA,IAAI,YAAJ,EAAkB;IAChB,OAAO,OAAO,CACH,GADG,EACE,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,EAA2C,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA3C,CADF,CAAd;EAGD;;EACD,OAAO,GAAP;AACD;;AAED,OAAO,IAAM,MAAM,GAAG,EAAE,CAAC;EAAC,OAAO,EAAP;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { eitherStridesOrDilationsAreOne } from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {\n    const $x = convertToTensor(x, 'x', 'conv3d');\n    const $filter = convertToTensor(filter, 'filter', 'conv3d');\n    let x5D = $x;\n    let reshapedTo5D = false;\n    if ($x.rank === 4) {\n        reshapedTo5D = true;\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n    util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` +\n        `${$filter.rank}.`);\n    util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n        `input depth for filter ${$filter.shape[3]}.`);\n    util.assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);\n    const inputs = { x: x5D, filter: $filter };\n    const attrs = { strides, pad, dataFormat, dilations };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Conv3D, inputs, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const conv3d = op({ conv3d_ });\n//# sourceMappingURL=conv3d.js.map"]},"metadata":{},"sourceType":"module"}