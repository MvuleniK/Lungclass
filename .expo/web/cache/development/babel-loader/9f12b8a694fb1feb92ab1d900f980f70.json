{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { dispose as _dispose, tidy } from \"../globals\";\nimport { add } from \"../ops/add\";\nimport { div } from \"../ops/div\";\nimport { fill } from \"../ops/fill\";\nimport { mul } from \"../ops/mul\";\nimport { sqrt } from \"../ops/sqrt\";\nimport { square } from \"../ops/square\";\nimport { registerClass } from \"../serialization\";\nimport { Optimizer } from \"./optimizer\";\nexport var AdagradOptimizer = function (_Optimizer) {\n  _inherits(AdagradOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdagradOptimizer);\n\n  function AdagradOptimizer(learningRate) {\n    var _this;\n\n    var initialAccumulatorValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.1;\n\n    _classCallCheck(this, AdagradOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.initialAccumulatorValue = initialAccumulatorValue;\n    _this.accumulatedGrads = [];\n    return _this;\n  }\n\n  _createClass(AdagradOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n\n        if (_this2.accumulatedGrads[i] == null) {\n          var trainable = false;\n          _this2.accumulatedGrads[i] = {\n            originalName: name + \"/accumulator\",\n            variable: tidy(function () {\n              return fill(value.shape, _this2.initialAccumulatorValue).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedGrad = _this2.accumulatedGrads[i].variable;\n        tidy(function () {\n          var newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n          accumulatedGrad.assign(newAccumulatedGrad);\n          var newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedGrads != null) {\n        _dispose(this.accumulatedGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function getWeights() {\n      return _regeneratorRuntime.async(function getWeights$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.saveIterations());\n\n            case 2:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(this.accumulatedGrads.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setWeights\",\n    value: function setWeights(weightValues) {\n      var trainable;\n      return _regeneratorRuntime.async(function setWeights$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.extractIterations(weightValues));\n\n            case 2:\n              weightValues = _context2.sent;\n              trainable = false;\n              this.accumulatedGrads = weightValues.map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'initialAccumulatorValue': this.initialAccumulatorValue\n      };\n    }\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n  }]);\n\n  return AdagradOptimizer;\n}(Optimizer);\nAdagradOptimizer.className = 'Adagrad';\nregisterClass(AdagradOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adagrad_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n    constructor(learningRate, initialAccumulatorValue = 0.1) {\n        super();\n        this.learningRate = learningRate;\n        this.initialAccumulatorValue = initialAccumulatorValue;\n        this.accumulatedGrads = [];\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulatedGrads[i] == null) {\n                const trainable = false;\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accumulator`,\n                    variable: tidy(() => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedGrads != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'initialAccumulatorValue': this.initialAccumulatorValue,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n}\n/** @nocollapse */\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\nregisterClass(AdagradOptimizer);\n//# sourceMappingURL=adagrad_optimizer.js.map"]},"metadata":{},"sourceType":"module"}