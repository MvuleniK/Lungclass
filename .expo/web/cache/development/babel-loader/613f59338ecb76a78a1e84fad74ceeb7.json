{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '@tensorflow/tfjs-backend-cpu';\nimport { GPGPUContext, MathBackendWebGL, setWebGLContext } from '@tensorflow/tfjs-backend-webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Buffer } from 'buffer';\nimport { GLView } from 'expo-gl';\nimport RNPlatform from \"react-native-web/dist/exports/Platform\";\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers();\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n    var parts = line.split(':');\n    var key = parts.shift().trim();\n\n    if (key) {\n      var value = parts.join(':').trim();\n      headers.append(key, value);\n    }\n  });\n  return headers;\n}\n\nfunction _fetch(path, init, options) {\n  return _regeneratorRuntime.async(function fetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var request = new Request(path, init);\n            var xhr = new XMLHttpRequest();\n\n            xhr.onload = function () {\n              var reqOptions = {\n                status: xhr.status,\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || ''),\n                url: ''\n              };\n              reqOptions.url = 'responseURL' in xhr ? xhr.responseURL : reqOptions.headers.get('X-Request-URL');\n              var body = 'response' in xhr ? xhr.response : xhr.responseText;\n              resolve(new Response(body, reqOptions));\n            };\n\n            xhr.onerror = function () {\n              return reject(new TypeError('Network request failed'));\n            };\n\n            xhr.ontimeout = function () {\n              return reject(new TypeError('Network request failed'));\n            };\n\n            xhr.open(request.method, request.url, true);\n\n            if (request.credentials === 'include') {\n              xhr.withCredentials = true;\n            } else if (request.credentials === 'omit') {\n              xhr.withCredentials = false;\n            }\n\n            if (options != null && options.isBinary) {\n              xhr.responseType = 'arraybuffer';\n            }\n\n            request.headers.forEach(function (value, name) {\n              xhr.setRequestHeader(name, value);\n            });\n            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { _fetch as fetch };\nexport var PlatformReactNative = function () {\n  function PlatformReactNative() {\n    _classCallCheck(this, PlatformReactNative);\n  }\n\n  _createClass(PlatformReactNative, [{\n    key: \"fetch\",\n    value: function fetch(path, init, options) {\n      return _regeneratorRuntime.async(function fetch$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _fetch(path, init, options));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, encoding) {\n      if (encoding === 'utf-16') {\n        encoding = 'utf16le';\n      }\n\n      return new Uint8Array(Buffer.from(text, encoding));\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes, encoding) {\n      if (encoding === 'utf-16') {\n        encoding = 'utf16le';\n      }\n\n      return Buffer.from(bytes).toString(encoding);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      if (global.nativePerformanceNow) {\n        return global.nativePerformanceNow();\n      }\n\n      return Date.now();\n    }\n  }]);\n\n  return PlatformReactNative;\n}();\n\nfunction setupGlobals() {\n  global.Buffer = Buffer;\n}\n\nfunction registerWebGLBackend() {\n  try {\n    var PRIORITY = 5;\n    tf.registerBackend('rn-webgl', function _callee() {\n      var glContext, getExt, shimGetExt, shimFenceSync, shimClientWaitSync, context, backend;\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(GLView.createContextAsync());\n\n            case 2:\n              glContext = _context3.sent;\n              tf.env().set('WEBGL_BUFFER_SUPPORTED', false);\n              getExt = glContext.getExtension.bind(glContext);\n\n              shimGetExt = function shimGetExt(name) {\n                if (name === 'EXT_color_buffer_float') {\n                  if (RNPlatform.OS === 'ios') {\n                    return null;\n                  } else {\n                    return {};\n                  }\n                }\n\n                if (name === 'EXT_color_buffer_half_float') {\n                  return {};\n                }\n\n                return getExt(name);\n              };\n\n              shimFenceSync = function shimFenceSync() {\n                return {};\n              };\n\n              shimClientWaitSync = function shimClientWaitSync() {\n                return glContext.CONDITION_SATISFIED;\n              };\n\n              glContext.getExtension = shimGetExt.bind(glContext);\n              glContext.fenceSync = shimFenceSync.bind(glContext);\n              glContext.clientWaitSync = shimClientWaitSync.bind(glContext);\n              setWebGLContext(2, glContext);\n              context = new GPGPUContext();\n              backend = new MathBackendWebGL(context);\n              return _context3.abrupt(\"return\", backend);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, PRIORITY);\n    var kernels = tf.getKernelsForBackend('webgl');\n    kernels.forEach(function (kernelConfig) {\n      var newKernelConfig = _extends({}, kernelConfig, {\n        backendName: 'rn-webgl'\n      });\n\n      tf.registerKernel(newKernelConfig);\n    });\n  } catch (e) {\n    throw new Error(\"Failed to register Webgl backend: \" + e.message);\n  }\n}\n\ntf.env().registerFlag('IS_REACT_NATIVE', function () {\n  return navigator && navigator.product === 'ReactNative';\n});\n\nif (tf.env().getBool('IS_REACT_NATIVE')) {\n  setupGlobals();\n  registerWebGLBackend();\n  tf.setPlatform('react-native', new PlatformReactNative());\n}","map":{"version":3,"sources":["../src/platform_react_native.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '@tensorflow/tfjs-backend-cpu';\nimport { GPGPUContext, MathBackendWebGL, setWebGLContext } from '@tensorflow/tfjs-backend-webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Buffer } from 'buffer';\nimport { GLView } from 'expo-gl';\nimport { Platform as RNPlatform } from 'react-native';\n// See implemetation note on fetch\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L421\nfunction parseHeaders(rawHeaders) {\n    const headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or\n    // horizontal tab with a space https://tools.ietf.org/html/rfc7230#section-3.2\n    const preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(line => {\n        const parts = line.split(':');\n        const key = parts.shift().trim();\n        if (key) {\n            const value = parts.join(':').trim();\n            headers.append(key, value);\n        }\n    });\n    return headers;\n}\n// Implementation note: This is a patch of react-native's fetch implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L484\n//\n// The response object supplied by fetch does not implement arrayBuffer()\n// FileReader.readAsArrayBuffer is not implemented.\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/d7a5e3e215eedb7377a86f172e0619403e20c2b8/Libraries/Blob/FileReader.js#L83\n//\n// However if one uses XMLHttpRequest directly and set the responseType\n// correctly before making the request. The returned response object will have\n// a working arrayBuffer method that can be used downstraeam.\n/**\n * Makes an HTTP request.\n * @param path The URL path to make a request to\n * @param init The request init. See init here:\n *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @param options A RequestDetails object.\n *    - __options.isBinary__ boolean indicating whether this request is for a\n *     binary file.\n *\n * @doc {heading: 'Platform helpers', subheading: 'http'}\n */\nexport async function fetch(path, init, options) {\n    return new Promise((resolve, reject) => {\n        const request = new Request(path, init);\n        const xhr = new XMLHttpRequest();\n        xhr.onload = () => {\n            const reqOptions = {\n                status: xhr.status,\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || ''),\n                url: '',\n            };\n            reqOptions.url = 'responseURL' in xhr ?\n                xhr.responseURL :\n                reqOptions.headers.get('X-Request-URL');\n            //@ts-ignore — ts belives the latter case will never occur.\n            const body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, reqOptions));\n        };\n        xhr.onerror = () => reject(new TypeError('Network request failed'));\n        xhr.ontimeout = () => reject(new TypeError('Network request failed'));\n        xhr.open(request.method, request.url, true);\n        if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n        }\n        else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n        }\n        if (options != null && options.isBinary) {\n            // In react native We need to set the response type to arraybuffer when\n            // fetching binary resources in order for `.arrayBuffer` to work correctly\n            // on the response.\n            xhr.responseType = 'arraybuffer';\n        }\n        request.headers.forEach((value, name) => {\n            xhr.setRequestHeader(name, value);\n        });\n        xhr.send(\n        //@ts-ignore\n        typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    });\n}\nexport class PlatformReactNative {\n    /**\n     * Makes an HTTP request.\n     *\n     * see @fetch docs above.\n     */\n    async fetch(path, init, options) {\n        return fetch(path, init, options);\n    }\n    /**\n     * Encode the provided string into an array of bytes using the provided\n     * encoding.\n     */\n    encode(text, encoding) {\n        // See https://www.w3.org/TR/encoding/#utf-16le\n        if (encoding === 'utf-16') {\n            encoding = 'utf16le';\n        }\n        return new Uint8Array(Buffer.from(text, encoding));\n    }\n    /** Decode the provided bytes into a string using the provided encoding. */\n    decode(bytes, encoding) {\n        // See https://www.w3.org/TR/encoding/#utf-16le\n        if (encoding === 'utf-16') {\n            encoding = 'utf16le';\n        }\n        return Buffer.from(bytes).toString(encoding);\n    }\n    now() {\n        //@ts-ignore\n        if (global.nativePerformanceNow) {\n            //@ts-ignore\n            return global.nativePerformanceNow();\n        }\n        return Date.now();\n    }\n}\nfunction setupGlobals() {\n    global.Buffer = Buffer;\n}\nfunction registerWebGLBackend() {\n    try {\n        const PRIORITY = 5;\n        tf.registerBackend('rn-webgl', async () => {\n            const glContext = await GLView.createContextAsync();\n            // ExpoGl getBufferSubData is not implemented yet (throws an exception).\n            tf.env().set('WEBGL_BUFFER_SUPPORTED', false);\n            //\n            // Mock extension support for EXT_color_buffer_float and\n            // EXT_color_buffer_half_float on the expo-gl context object.\n            // In react native we do not have to get a handle to the extension\n            // in order to use the functionality of that extension on the device.\n            //\n            // This code block makes iOS and Android devices pass the extension checks\n            // used in core. After those are done core will actually test whether\n            // we can render/download float or half float textures.\n            //\n            // We can remove this block once we upstream checking for these\n            // extensions in expo.\n            //\n            // TODO look into adding support for checking these extensions in expo-gl\n            //\n            //@ts-ignore\n            const getExt = glContext.getExtension.bind(glContext);\n            const shimGetExt = (name) => {\n                if (name === 'EXT_color_buffer_float') {\n                    if (RNPlatform.OS === 'ios') {\n                        // iOS does not support EXT_color_buffer_float\n                        return null;\n                    }\n                    else {\n                        return {};\n                    }\n                }\n                if (name === 'EXT_color_buffer_half_float') {\n                    return {};\n                }\n                return getExt(name);\n            };\n            //\n            // Manually make 'read' synchronous. glContext has a defined gl.fenceSync\n            // function that throws a \"Not implemented yet\" exception so core\n            // cannot properly detect that it is not supported. We mock\n            // implementations of gl.fenceSync and gl.clientWaitSync\n            // TODO remove once fenceSync and clientWaitSync is implemented upstream.\n            //\n            const shimFenceSync = () => {\n                return {};\n            };\n            const shimClientWaitSync = () => glContext.CONDITION_SATISFIED;\n            // @ts-ignore\n            glContext.getExtension = shimGetExt.bind(glContext);\n            glContext.fenceSync = shimFenceSync.bind(glContext);\n            glContext.clientWaitSync = shimClientWaitSync.bind(glContext);\n            // Set the WebGLContext before flag evaluation\n            setWebGLContext(2, glContext);\n            const context = new GPGPUContext();\n            const backend = new MathBackendWebGL(context);\n            return backend;\n        }, PRIORITY);\n        // Register all the webgl kernels on the rn-webgl backend\n        // TODO: Use tf.copyRegisteredKernels once synced to tfjs-core 2.5.0.\n        // tf.copyRegisteredKernels('webgl', 'rn-webgl');\n        const kernels = tf.getKernelsForBackend('webgl');\n        kernels.forEach(kernelConfig => {\n            const newKernelConfig = Object.assign({}, kernelConfig, { backendName: 'rn-webgl' });\n            tf.registerKernel(newKernelConfig);\n        });\n    }\n    catch (e) {\n        throw (new Error(`Failed to register Webgl backend: ${e.message}`));\n    }\n}\ntf.env().registerFlag('IS_REACT_NATIVE', () => navigator && navigator.product === 'ReactNative');\nif (tf.env().getBool('IS_REACT_NATIVE')) {\n    setupGlobals();\n    registerWebGLBackend();\n    tf.setPlatform('react-native', new PlatformReactNative());\n}\n//# sourceMappingURL=platform_react_native.js.map"]},"metadata":{},"sourceType":"module"}