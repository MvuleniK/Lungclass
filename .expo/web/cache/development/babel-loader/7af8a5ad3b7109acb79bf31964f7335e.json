{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from \"../ops/complex\";\nimport { tensor } from \"../ops/tensor\";\nimport { sizeFromShape } from \"../util\";\nimport { DTYPE_VALUE_SIZE_MAP } from \"./types\";\nvar NUM_BYTES_STRING_LENGTH = 4;\nexport function encodeWeights(tensors, group) {\n  var specs, dataPromises, names, _loop, i, tensorValues;\n\n  return _regeneratorRuntime.async(function encodeWeights$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          specs = [];\n          dataPromises = [];\n          names = Array.isArray(tensors) ? tensors.map(function (tensor) {\n            return tensor.name;\n          }) : Object.keys(tensors);\n\n          _loop = function _loop(i) {\n            var name = names[i];\n            var t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n\n            if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n              throw new Error(\"Unsupported dtype in weight '\" + name + \"': \" + t.dtype);\n            }\n\n            var spec = {\n              name: name,\n              shape: t.shape,\n              dtype: t.dtype\n            };\n\n            if (t.dtype === 'string') {\n              var utf8bytes = new Promise(function _callee(resolve) {\n                var vals, totalNumBytes, bytes, offset, _i, val, bytesOfLength;\n\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _regeneratorRuntime.awrap(t.bytes());\n\n                      case 2:\n                        vals = _context.sent;\n                        totalNumBytes = vals.reduce(function (p, c) {\n                          return p + c.length;\n                        }, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n                        bytes = new Uint8Array(totalNumBytes);\n                        offset = 0;\n\n                        for (_i = 0; _i < vals.length; _i++) {\n                          val = vals[_i];\n                          bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                          bytes.set(bytesOfLength, offset);\n                          offset += NUM_BYTES_STRING_LENGTH;\n                          bytes.set(val, offset);\n                          offset += val.length;\n                        }\n\n                        resolve(bytes);\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n              dataPromises.push(utf8bytes);\n            } else {\n              dataPromises.push(t.data());\n            }\n\n            if (group != null) {\n              spec.group = group;\n            }\n\n            specs.push(spec);\n          };\n\n          for (i = 0; i < names.length; ++i) {\n            _loop(i);\n          }\n\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(Promise.all(dataPromises));\n\n        case 7:\n          tensorValues = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            data: concatenateTypedArrays(tensorValues),\n            specs: specs\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function decodeWeights(buffer, specs) {\n  var out = {};\n  var float16Decode;\n  var offset = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done;) {\n    var spec = _step.value;\n    var name = spec.name;\n    var dtype = spec.dtype;\n    var shape = spec.shape;\n    var size = sizeFromShape(shape);\n    var values = void 0;\n\n    if ('quantization' in spec) {\n      var quantization = spec.quantization;\n\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\"Weight \" + spec.name + \" with quantization \" + quantization.dtype + \" \" + \"doesn't have corresponding metadata min and scale.\");\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\"Weight \" + spec.name + \" is quantized with \" + quantization.dtype + \" \" + (\"which only supports weights of type float32 not \" + dtype + \".\"));\n        }\n      } else {\n        throw new Error(\"Weight \" + spec.name + \" has unknown \" + (\"quantization dtype \" + quantization.dtype + \". \") + \"Supported quantization dtypes are: \" + \"'uint8', 'uint16', and 'float16'.\");\n      }\n\n      var quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      var byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      var quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n\n          for (var i = 0; i < quantizedArray.length; i++) {\n            var v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(\"Unsupported quantization type \" + quantization.dtype + \" \" + \"for weight type float32.\");\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\"Unsupported quantization type \" + quantization.dtype + \" \" + \"for weight type int32.\");\n        }\n\n        values = new Int32Array(quantizedArray.length);\n\n        for (var _i2 = 0; _i2 < quantizedArray.length; _i2++) {\n          var _v = quantizedArray[_i2];\n          values[_i2] = Math.round(_v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(\"Unsupported dtype in weight '\" + name + \"': \" + dtype);\n      }\n\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      var _size = sizeFromShape(spec.shape);\n\n      values = [];\n\n      for (var _i3 = 0; _i3 < _size; _i3++) {\n        var byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        var bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      var dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n\n      var _byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(_byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(_byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(_byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(_byteBuffer);\n        var real = new Float32Array(values.length / 2);\n        var image = new Float32Array(values.length / 2);\n\n        for (var _i4 = 0; _i4 < real.length; _i4++) {\n          real[_i4] = values[_i4 * 2];\n          image[_i4] = values[_i4 * 2 + 1];\n        }\n\n        var realTensor = tensor(real, shape, 'float32');\n        var imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(\"Unsupported dtype in weight '\" + name + \"': \" + dtype);\n      }\n\n      offset += size * dtypeFactor;\n    }\n\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n\n  return out;\n}\nexport function concatenateTypedArrays(xs) {\n  if (xs === null) {\n    throw new Error(\"Invalid input value: \" + JSON.stringify(xs));\n  }\n\n  var totalByteLength = 0;\n  var normalizedXs = [];\n  xs.forEach(function (x) {\n    totalByteLength += x.byteLength;\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(\"Unsupported TypedArray subtype: \" + x.constructor.name);\n    }\n  });\n  var y = new Uint8Array(totalByteLength);\n  var offset = 0;\n  normalizedXs.forEach(function (x) {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n}\nvar useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n\n  return new Blob([str]).size;\n}\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n\n  var buf = new Uint8Array(buffer);\n  var s = '';\n\n  for (var i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n\n  return btoa(s);\n}\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    var buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n\n  var s = atob(str);\n  var buffer = new Uint8Array(s.length);\n\n  for (var i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n\n  return buffer.buffer;\n}\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  var totalByteLength = 0;\n  buffers.forEach(function (buffer) {\n    totalByteLength += buffer.byteLength;\n  });\n  var temp = new Uint8Array(totalByteLength);\n  var offset = 0;\n  buffers.forEach(function (buffer) {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\nexport function basename(path) {\n  var SEPARATOR = '/';\n  path = path.trim();\n\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n\n  var items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n\nfunction computeFloat16MantisaTable() {\n  var convertMantissa = function convertMantissa(i) {\n    var m = i << 13;\n    var e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n\n  var mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n\n  for (var i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n\n  for (var _i5 = 1024; _i5 < 2048; _i5++) {\n    mantisaTable[_i5] = 0x38000000 + (_i5 - 1024 << 13);\n  }\n\n  return mantisaTable;\n}\n\nfunction computeFloat16ExponentTable() {\n  var exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n\n  for (var i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n\n  for (var _i6 = 33; _i6 < 63; _i6++) {\n    exponentTable[_i6] = 0x80000000 + (_i6 - 32 << 23);\n  }\n\n  return exponentTable;\n}\n\nfunction computeFloat16OffsetTable() {\n  var offsetTable = new Uint32Array(64);\n\n  for (var i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n\nexport function getFloat16Decoder() {\n  var mantisaTable = computeFloat16MantisaTable();\n  var exponentTable = computeFloat16ExponentTable();\n  var offsetTable = computeFloat16OffsetTable();\n  return function (quantizedArray) {\n    var buffer = new ArrayBuffer(4 * quantizedArray.length);\n    var bufferUint32View = new Uint32Array(buffer);\n\n    for (var index = 0; index < quantizedArray.length; index++) {\n      var float16Bits = quantizedArray[index];\n      var float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"sources":["../../src/io/io_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const out = {};\n    let float16Decode;\n    let offset = 0;\n    for (const spec of specs) {\n        const name = spec.name;\n        const dtype = spec.dtype;\n        const shape = spec.shape;\n        const size = sizeFromShape(shape);\n        let values;\n        if ('quantization' in spec) {\n            const quantization = spec.quantization;\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                if (!('min' in quantization && 'scale' in quantization)) {\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                        `doesn't have corresponding metadata min and scale.`);\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                if (dtype !== 'float32') {\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                        `which only supports weights of type float32 not ${dtype}.`);\n                }\n            }\n            else {\n                throw new Error(`Weight ${spec.name} has unknown ` +\n                    `quantization dtype ${quantization.dtype}. ` +\n                    `Supported quantization dtypes are: ` +\n                    `'uint8', 'uint16', and 'float16'.`);\n            }\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n            const quantizedArray = (quantization.dtype === 'uint8') ?\n                new Uint8Array(byteBuffer) :\n                new Uint16Array(byteBuffer);\n            if (dtype === 'float32') {\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                    values = new Float32Array(quantizedArray.length);\n                    for (let i = 0; i < quantizedArray.length; i++) {\n                        const v = quantizedArray[i];\n                        values[i] = v * quantization.scale + quantization.min;\n                    }\n                }\n                else if (quantization.dtype === 'float16') {\n                    if (float16Decode === undefined) {\n                        float16Decode = getFloat16Decoder();\n                    }\n                    values = float16Decode(quantizedArray);\n                }\n                else {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type float32.`);\n                }\n            }\n            else if (dtype === 'int32') {\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type int32.`);\n                }\n                values = new Int32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\n                }\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * quantizationSizeFactor;\n        }\n        else if (dtype === 'string') {\n            const size = sizeFromShape(spec.shape);\n            values = [];\n            for (let i = 0; i < size; i++) {\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n                offset += NUM_BYTES_STRING_LENGTH;\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n                values.push(bytes);\n                offset += byteLength;\n            }\n        }\n        else {\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n            if (dtype === 'float32') {\n                values = new Float32Array(byteBuffer);\n            }\n            else if (dtype === 'int32') {\n                values = new Int32Array(byteBuffer);\n            }\n            else if (dtype === 'bool') {\n                values = new Uint8Array(byteBuffer);\n            }\n            else if (dtype === 'complex64') {\n                values = new Float32Array(byteBuffer);\n                const real = new Float32Array(values.length / 2);\n                const image = new Float32Array(values.length / 2);\n                for (let i = 0; i < real.length; i++) {\n                    real[i] = values[i * 2];\n                    image[i] = values[i * 2 + 1];\n                }\n                const realTensor = tensor(real, shape, 'float32');\n                const imageTensor = tensor(image, shape, 'float32');\n                out[name] = complex(realTensor, imageTensor);\n                realTensor.dispose();\n                imageTensor.dispose();\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * dtypeFactor;\n        }\n        if (dtype !== 'complex64') {\n            out[name] = tensor(values, shape, dtype);\n        }\n    }\n    return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str);\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n    if (buffers.length === 1) {\n        return buffers[0];\n    }\n    let totalByteLength = 0;\n    buffers.forEach((buffer) => {\n        totalByteLength += buffer.byteLength;\n    });\n    const temp = new Uint8Array(totalByteLength);\n    let offset = 0;\n    buffers.forEach((buffer) => {\n        temp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n    return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n//# sourceMappingURL=io_utils.js.map"]},"metadata":{},"sourceType":"module"}