{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from \"../batchnorm_gpu\";\nimport { BatchNormPackedProgram } from \"../batchnorm_packed_gpu\";\nexport var batchNorm = function batchNorm(_ref) {\n  var inputs = _ref.inputs,\n      backend = _ref.backend,\n      attrs = _ref.attrs;\n  var x = inputs.x,\n      mean = inputs.mean,\n      variance = inputs.variance,\n      offset = inputs.offset,\n      scale = inputs.scale;\n  util.assert(mean.shape.length === variance.shape.length, function () {\n    return 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.';\n  });\n  util.assert(offset == null || mean.shape.length === offset.shape.length, function () {\n    return 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.';\n  });\n  util.assert(scale == null || mean.shape.length === scale.shape.length, function () {\n    return 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.';\n  });\n  var varianceEpsilon = attrs.varianceEpsilon;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  var finalInputs = [x, mean, variance];\n  var offsetShape = null;\n\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  var scaleShape = null;\n\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  var program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  var output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport var batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"sources":["../../src/kernels/BatchNorm.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAa,cAAb,EAA8G,IAA9G,QAAyH,uBAAzH;AAGA,SAAQ,gBAAR;AACA,SAAQ,sBAAR;AAEA,OAAO,IAAM,SAAS,GAIH,SAJN,SAIM,OAA6B;EAAA,IAA3B,MAA2B,QAA3B,MAA2B;EAAA,IAAnB,OAAmB,QAAnB,OAAmB;EAAA,IAAV,KAAU,QAAV,KAAU;EAC9C,IAAO,CAAP,GAA2C,MAA3C,CAAO,CAAP;EAAA,IAAU,IAAV,GAA2C,MAA3C,CAAU,IAAV;EAAA,IAAgB,QAAhB,GAA2C,MAA3C,CAAgB,QAAhB;EAAA,IAA0B,MAA1B,GAA2C,MAA3C,CAA0B,MAA1B;EAAA,IAAkC,KAAlC,GAA2C,MAA3C,CAAkC,KAAlC;EAEA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,QAAQ,CAAC,KAAT,CAAe,MADzC,EAEI;IAAA,OAAM,qEACF,cADJ;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,MAAM,IAAI,IAAV,IAAkB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,MAAM,CAAC,KAAP,CAAa,MADzD,EAEI;IAAA,OAAM,mEACF,cADJ;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,KAAK,IAAI,IAAT,IAAiB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,KAAK,CAAC,KAAN,CAAY,MADvD,EAEI;IAAA,OAAM,kEACF,cADJ;EAAA,CAFJ;EAKA,IAAK,eAAL,GAAwB,KAAxB,CAAK,eAAL;;EACA,IAAI,eAAe,IAAI,IAAvB,EAA6B;IAC3B,eAAe,GAAG,KAAlB;EACD;;EAED,IAAM,WAAW,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,QAAV,CAApB;EAEA,IAAI,WAAW,GAAG,IAAlB;;EACA,IAAI,MAAM,IAAI,IAAd,EAAoB;IAClB,WAAW,GAAG,MAAM,CAAC,KAArB;IACA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;EACD;;EAED,IAAI,UAAU,GAAG,IAAjB;;EACA,IAAI,KAAK,IAAI,IAAb,EAAmB;IACjB,UAAU,GAAG,KAAK,CAAC,KAAnB;IACA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;EACD;;EAED,IAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,0BAAd,IACZ,IAAI,sBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CADY,GAIZ,IAAI,gBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CAJJ;EAOA,IAAM,MAAM,GACR,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,WAAjC,EAA8C,WAAW,CAAC,CAAD,CAAX,CAAe,KAA7D,CADJ;EAGA,OAAO,MAAP;AACD,CAlDM;AAoDP,OAAO,IAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,cAD+B;EAE3C,WAAW,EAAE,OAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map"]},"metadata":{},"sourceType":"module"}