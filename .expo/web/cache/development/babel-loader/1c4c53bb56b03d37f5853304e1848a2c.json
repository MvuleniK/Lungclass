{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { dispose as _dispose, tidy } from \"../globals\";\nimport { add } from \"../ops/add\";\nimport { div } from \"../ops/div\";\nimport { mul } from \"../ops/mul\";\nimport { pow } from \"../ops/pow\";\nimport { scalar } from \"../ops/scalar\";\nimport { sqrt } from \"../ops/sqrt\";\nimport { square } from \"../ops/square\";\nimport { sub } from \"../ops/sub\";\nimport { zerosLike } from \"../ops/zeros_like\";\nimport { registerClass } from \"../serialization\";\nimport { Optimizer } from \"./optimizer\";\nexport var AdamOptimizer = function (_Optimizer) {\n  _inherits(AdamOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdamOptimizer);\n\n  function AdamOptimizer(learningRate, beta1, beta2) {\n    var _this;\n\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    _classCallCheck(this, AdamOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.beta1 = beta1;\n    _this.beta2 = beta2;\n    _this.epsilon = epsilon;\n    _this.accumulatedFirstMoment = [];\n    _this.accumulatedSecondMoment = [];\n    tidy(function () {\n      _this.accBeta1 = scalar(beta1).variable();\n      _this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    return _this;\n  }\n\n  _createClass(AdamOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var varNames = Array.isArray(variableGradients) ? variableGradients.map(function (v) {\n        return v.name;\n      }) : Object.keys(variableGradients);\n      tidy(function () {\n        var oneMinusAccBeta1 = sub(1, _this2.accBeta1);\n        var oneMinusAccBeta2 = sub(1, _this2.accBeta2);\n        varNames.forEach(function (name, i) {\n          var value = ENGINE.registeredVariables[name];\n          var trainable = false;\n\n          if (_this2.accumulatedFirstMoment[i] == null) {\n            _this2.accumulatedFirstMoment[i] = {\n              originalName: name + \"/m\",\n              variable: tidy(function () {\n                return zerosLike(value).variable(trainable);\n              })\n            };\n          }\n\n          if (_this2.accumulatedSecondMoment[i] == null) {\n            _this2.accumulatedSecondMoment[i] = {\n              originalName: name + \"/v\",\n              variable: tidy(function () {\n                return zerosLike(value).variable(trainable);\n              })\n            };\n          }\n\n          var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n          if (gradient == null) {\n            return;\n          }\n\n          var firstMoment = _this2.accumulatedFirstMoment[i].variable;\n          var secondMoment = _this2.accumulatedSecondMoment[i].variable;\n          var newFirstMoment = add(mul(firstMoment, _this2.beta1), mul(gradient, 1 - _this2.beta1));\n          var newSecondMoment = add(mul(secondMoment, _this2.beta2), mul(square(gradient), 1 - _this2.beta2));\n          var biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n          var biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n          firstMoment.assign(newFirstMoment);\n          secondMoment.assign(newSecondMoment);\n          var newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), _this2.epsilon)), -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n\n        _this2.accBeta1.assign(mul(_this2.accBeta1, _this2.beta1));\n\n        _this2.accBeta2.assign(mul(_this2.accBeta2, _this2.beta2));\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.accBeta1.dispose();\n      this.accBeta2.dispose();\n\n      if (this.accumulatedFirstMoment != null) {\n        _dispose(this.accumulatedFirstMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedSecondMoment != null) {\n        _dispose(this.accumulatedSecondMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function getWeights() {\n      var variables;\n      return _regeneratorRuntime.async(function getWeights$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              variables = [].concat(_toConsumableArray(this.accumulatedFirstMoment), _toConsumableArray(this.accumulatedSecondMoment));\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.saveIterations());\n\n            case 3:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setWeights\",\n    value: function setWeights(weightValues) {\n      var _this3 = this;\n\n      var variableCount, trainable;\n      return _regeneratorRuntime.async(function setWeights$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.extractIterations(weightValues));\n\n            case 2:\n              weightValues = _context2.sent;\n              tidy(function () {\n                _this3.accBeta1.assign(pow(_this3.beta1, _this3.iterations_ + 1));\n\n                _this3.accBeta2.assign(pow(_this3.beta2, _this3.iterations_ + 1));\n              });\n              variableCount = weightValues.length / 2;\n              trainable = false;\n              this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n              this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'beta1': this.beta1,\n        'beta2': this.beta2,\n        'epsilon': this.epsilon\n      };\n    }\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n    }\n  }]);\n\n  return AdamOptimizer;\n}(Optimizer);\nAdamOptimizer.className = 'Adam';\nregisterClass(AdamOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adam_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedSecondMoment = [];\n        tidy(() => {\n            // accB* will be updated by batch.\n            this.accBeta1 = scalar(beta1).variable();\n            this.accBeta2 = scalar(beta2).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const varNames = Array.isArray(variableGradients) ?\n            variableGradients.map(v => v.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const oneMinusAccBeta2 = sub(1, this.accBeta2);\n            varNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                if (this.accumulatedSecondMoment[i] == null) {\n                    this.accumulatedSecondMoment[i] = {\n                        originalName: `${name}/v`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const secondMoment = this.accumulatedSecondMoment[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n                const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n                const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n                firstMoment.assign(newFirstMoment);\n                secondMoment.assign(newSecondMoment);\n                const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n                value.assign(newValue);\n            });\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n            this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedSecondMoment != null) {\n            dispose(this.accumulatedSecondMoment.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        tidy(() => {\n            this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n            this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n        });\n        const variableCount = weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedFirstMoment =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedSecondMoment =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n    }\n}\n/** @nocollapse */\nAdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.\nregisterClass(AdamOptimizer);\n//# sourceMappingURL=adam_optimizer.js.map"]},"metadata":{},"sourceType":"module"}