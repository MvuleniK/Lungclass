{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { sizeFromShape } from \"../util\";\nimport { op } from \"./operation\";\n\nfunction rand_(shape, randFunction, dtype) {\n  var size = sizeFromShape(shape);\n  var values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(\"Unknown data type \" + dtype);\n  }\n\n  for (var i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n\n  return ENGINE.makeTensor(values, shape, dtype);\n}\n\nexport var rand = op({\n  rand_: rand_\n});","map":{"version":3,"sources":["../../src/ops/rand.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AAGA,SAAQ,aAAR;AAEA,SAAQ,EAAR;;AAWA,SAAS,KAAT,CACI,KADJ,EACwB,YADxB,EAEI,KAFJ,EAEoB;EAClB,IAAM,IAAI,GAAG,aAAa,CAAC,KAAD,CAA1B;EACA,IAAI,MAAM,GAAG,IAAb;;EACA,IAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA/B,EAA0C;IACxC,MAAM,GAAG,IAAI,YAAJ,CAAiB,IAAjB,CAAT;EACD,CAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;IAC5B,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;EACD,CAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;IAC3B,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAT;EACD,CAFM,MAEA;IACL,MAAM,IAAI,KAAJ,wBAA+B,KAA/B,CAAN;EACD;;EACD,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;IAC7B,MAAM,CAAC,CAAD,CAAN,GAAY,YAAY,EAAxB;EACD;;EACD,OAAO,MAAM,CAAC,UAAP,CAAkB,MAAlB,EAA0B,KAA1B,EAAiC,KAAjC,CAAP;AACD;;AAED,OAAO,IAAM,IAAI,GAAG,EAAE,CAAC;EAAC,KAAK,EAAL;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { sizeFromShape } from '../util';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\nfunction rand_(shape, randFunction, dtype) {\n    const size = sizeFromShape(shape);\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    for (let i = 0; i < size; i++) {\n        values[i] = randFunction();\n    }\n    return ENGINE.makeTensor(values, shape, dtype);\n}\nexport const rand = op({ rand_ });\n//# sourceMappingURL=rand.js.map"]},"metadata":{},"sourceType":"module"}