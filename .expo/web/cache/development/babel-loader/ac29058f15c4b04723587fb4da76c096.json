{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from \"../kernel_utils/shared\";\nimport { UnaryOpProgram } from \"../unaryop_gpu\";\nimport { UnaryOpPackedProgram } from \"../unaryop_packed_gpu\";\nvar ABS = \"return abs(x);\";\nexport function abs(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var x = inputs.x;\n\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    var xData = backend.texData.get(x.dataId);\n    var outValues = simpleAbsImplCPU(xData.values);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  var program;\n\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport var absConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs\n};","map":{"version":3,"sources":["../../src/kernels/Abs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAwB,GAAxB,QAAoF,uBAApF;AAGA,SAAQ,gBAAR;AACA,SAAQ,cAAR;AACA,SAAQ,oBAAR;AAEA,IAAM,GAAG,mBAAT;AAEA,OAAM,SAAU,GAAV,CAAc,IAAd,EAAkE;EAEtE,IAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;EAAA,IAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;;EAIA,IAAI,OAAO,CAAC,kBAAR,CAA2B,CAAC,CAAD,CAA3B,KAAmC,CAAC,CAAC,KAAF,KAAY,WAAnD,EAAgE;IAC9D,IAAM,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAAd;IACA,IAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,MAAP,CAAlC;IACA,OAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,CAAC,KAAzB,EAAgC,CAAC,CAAC,KAAlC,EAAyC,SAAzC,CAAP;EACD;;EAED,IAAI,OAAJ;;EACA,IAAI,GAAG,GAAG,OAAN,CAAc,6BAAd,CAAJ,EAAkD;IAChD,OAAO,GAAG,IAAI,oBAAJ,CAAyB,CAAC,CAAC,KAA3B,EAAkC,GAAlC,CAAV;EACD,CAFD,MAEO;IACL,OAAO,GAAG,IAAI,cAAJ,CAAmB,CAAC,CAAC,KAArB,EAA4B,GAA5B,CAAV;EACD;;EACD,OAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,CAAjC,EAAsC,CAAC,CAAC,KAAxC,CAAP;AACD;AAED,OAAO,IAAM,SAAS,GAAiB;EACrC,UAAU,EAAE,GADyB;EAErC,WAAW,EAAE,OAFwB;EAGrC,UAAU,EAAE;AAHyB,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    // TODO: handle cases when x is complex. Once the cpu implementation\n    // can handle complex values, refactor to use unaryKernelFunc.\n    if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        const xData = backend.texData.get(x.dataId);\n        const outValues = simpleAbsImplCPU(xData.values);\n        return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, ABS);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, ABS);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'webgl',\n    kernelFunc: abs\n};\n//# sourceMappingURL=Abs.js.map"]},"metadata":{},"sourceType":"module"}