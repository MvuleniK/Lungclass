{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from \"./environment\";\nimport * as base from \"./util_base\";\nexport * from \"./util_base\";\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\n\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n\n  if (Array.isArray(a)) {\n    a = base.flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    var bool = new Uint8Array(a.length);\n\n    for (var i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n\n    return bool;\n  } else {\n    throw new Error(\"Unknown data type \" + dtype);\n  }\n}\nexport function now() {\n  return env().platform.now();\n}\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\nexport function encodeString(s) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\nexport function decodeString(bytes) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR;AAEA,OAAO,KAAK,IAAZ;AACA;AAKA,OAAM,SAAU,iBAAV,CACF,KADE,EACe,KADf,EAC8B;EAClC,IAAI,KAAK,KAAK,QAAd,EAAwB;IACtB,OAAO,YAAY,CAAC,KAAD,CAAnB;EACD;;EAED,OAAO,YAAY,CAAC,CAAC,KAAD,CAAD,EAAU,KAAV,CAAnB;AACD;;AAED,SAAS,kBAAT,CAA4B,CAA5B,EAA2C,KAA3C,EAA0D;EACxD,OAAQ,CAAC,YAAY,YAAb,IAA6B,KAAK,KAAK,SAAxC,IACF,CAAC,YAAY,UAAb,IAA2B,KAAK,KAAK,OADnC,IAEF,CAAC,YAAY,UAAb,IAA2B,KAAK,KAAK,MAF1C;AAGD;;AAED,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAsC,KAAtC,EAAqD;EACzD,IAAI,KAAK,KAAK,QAAd,EAAwB;IACtB,MAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;EACD;;EACD,IAAI,KAAK,CAAC,OAAN,CAAc,CAAd,CAAJ,EAAsB;IACpB,CAAC,GAAG,IAAI,CAAC,OAAL,CAAa,CAAb,CAAJ;EACD;;EAED,IAAI,GAAG,GAAG,OAAN,CAAc,OAAd,CAAJ,EAA4B;IAC1B,IAAI,CAAC,wBAAL,CAA8B,CAA9B,EAA6C,KAA7C;EACD;;EACD,IAAI,kBAAkB,CAAC,CAAD,EAAI,KAAJ,CAAtB,EAAkC;IAChC,OAAO,CAAP;EACD;;EACD,IAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,SAA3B,IAAwC,KAAK,KAAK,WAAtD,EAAmE;IACjE,OAAO,IAAI,YAAJ,CAAiB,CAAjB,CAAP;EACD,CAFD,MAEO,IAAI,KAAK,KAAK,OAAd,EAAuB;IAC5B,OAAO,IAAI,UAAJ,CAAe,CAAf,CAAP;EACD,CAFM,MAEA,IAAI,KAAK,KAAK,MAAd,EAAsB;IAC3B,IAAM,IAAI,GAAG,IAAI,UAAJ,CAAgB,CAAc,CAAC,MAA/B,CAAb;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;MACpC,IAAI,IAAI,CAAC,KAAL,CAAY,CAAc,CAAC,CAAD,CAA1B,MAAmC,CAAvC,EAA0C;QACxC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;MACD;IACF;;IACD,OAAO,IAAP;EACD,CARM,MAQA;IACL,MAAM,IAAI,KAAJ,wBAA+B,KAA/B,CAAN;EACD;AACF;AAaD,OAAM,SAAU,GAAV,GAAa;EACjB,OAAO,GAAG,GAAG,QAAN,CAAe,GAAf,EAAP;AACD;AAkBD,OAAM,SAAU,KAAV,CACF,IADE,EACY,YADZ,EACsC;EAC1C,OAAO,GAAG,GAAG,QAAN,CAAe,KAAf,CAAqB,IAArB,EAA2B,YAA3B,CAAP;AACD;AAUD,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAoD;EAAA,IAAlB,QAAkB,uEAAP,OAAO;EACxD,QAAQ,GAAG,QAAQ,IAAI,OAAvB;EACA,OAAO,GAAG,GAAG,QAAN,CAAe,MAAf,CAAsB,CAAtB,EAAyB,QAAzB,CAAP;AACD;AAUD,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAA4D;EAAA,IAAlB,QAAkB,uEAAP,OAAO;EAChE,QAAQ,GAAG,QAAQ,IAAI,OAAvB;EACA,OAAO,GAAG,GAAG,QAAN,CAAe,MAAf,CAAsB,KAAtB,EAA6B,QAA7B,CAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n    if (dtype === 'string') {\n        return encodeString(value);\n    }\n    return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = base.flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        base.checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}