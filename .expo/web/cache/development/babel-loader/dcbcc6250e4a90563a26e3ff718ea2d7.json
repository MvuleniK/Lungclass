{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var BatchNormProgram = _createClass(function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n  _classCallCheck(this, BatchNormProgram);\n\n  this.outputShape = [];\n  this.variableNames = ['x', 'mean', 'variance'];\n  backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n  backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n  var offsetSnippet = '0.0';\n\n  if (offsetShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n    this.variableNames.push('offset');\n    offsetSnippet = 'getOffsetAtOutCoords()';\n  }\n\n  var scaleSnippet = '1.0';\n\n  if (scaleShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n    this.variableNames.push('scale');\n    scaleSnippet = 'getScaleAtOutCoords()';\n  }\n\n  this.outputShape = xShape;\n  this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \" + offsetSnippet + \";\\n        float scale = \" + scaleSnippet + \";\\n        float inv = scale * inversesqrt(variance + float(\" + varianceEpsilon + \"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/batchnorm_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAGA,WAAa,gBAAb,gBAKE,0BACI,MADJ,EACsB,SADtB,EAC2C,aAD3C,EAEI,WAFJ,EAEgC,UAFhC,EAGI,eAHJ,EAG2B;EAAA;;EAN3B,KAAA,WAAA,GAAwB,EAAxB;EAOE,KAAK,aAAL,GAAqB,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,CAArB;EACA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,SAAhD;EACA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,aAAhD;EAEA,IAAI,aAAa,GAAG,KAApB;;EACA,IAAI,WAAW,IAAI,IAAnB,EAAyB;IACvB,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,WAAhD;IACA,KAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;IACA,aAAa,GAAG,wBAAhB;EACD;;EAED,IAAI,YAAY,GAAG,KAAnB;;EACA,IAAI,UAAU,IAAI,IAAlB,EAAwB;IACtB,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,UAAhD;IACA,KAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;IACA,YAAY,GAAG,uBAAf;EACD;;EAED,KAAK,WAAL,GAAmB,MAAnB;EACA,KAAK,QAAL,4LAKqB,aALrB,iCAMoB,YANpB,oEAOuD,eAPvD;AAWD,CAvCH","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_gpu.js.map"]},"metadata":{},"sourceType":"module"}