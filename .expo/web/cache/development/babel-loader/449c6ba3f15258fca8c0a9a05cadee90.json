{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { Conv2DBackpropInput } from \"../kernel_names\";\nimport * as util from \"../util\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad) {\n  var dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  util.assert(xShape.length === dy.rank, function () {\n    return \"Length of inShape \" + (\"(\" + xShape.length + \") and rank of dy (\" + dy.rank + \") must match\");\n  });\n  var xShape4D = xShape;\n  var dy4D = dy;\n  var reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(xShape4D.length === 4, function () {\n    return \"Error in conv2dDerInput: inShape must be length 4, but got length \" + (xShape4D.length + \".\");\n  });\n  util.assert(dy4D.rank === 4, function () {\n    return \"Error in conv2dDerInput: dy must be rank 4, but got \" + (\"rank \" + dy4D.rank);\n  });\n  util.assert(filter.rank === 4, function () {\n    return \"Error in conv2dDerInput: filter must be rank 4, but got \" + (\"rank \" + filter.rank);\n  });\n  var inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  var outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filter.shape[2], function () {\n    return \"Error in conv2dDerInput: depth of input (\" + inDepth + \") must \" + (\"match input depth for filter \" + filter.shape[2] + \".\");\n  });\n  util.assert(outDepth === filter.shape[3], function () {\n    return \"Error in conv2dDerInput: depth of output (\" + outDepth + \") must \" + (\"match output depth for filter \" + filter.shape[3] + \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in conv2dDerInput: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n    });\n  }\n\n  var inputs = {\n    dy: dy4D,\n    filter: filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dataFormat: dataFormat,\n    dimRoundingMode: dimRoundingMode,\n    inputShape: xShape4D\n  };\n  var res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var conv2DBackpropInput = op({\n  conv2DBackpropInput_: conv2DBackpropInput_\n});","map":{"version":3,"sources":["../../src/ops/conv2d_backprop_input.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n    let xShape4D = xShape;\n    let dy4D = dy;\n    let reshapedTo4D = false;\n    if (dy.rank === 3) {\n        reshapedTo4D = true;\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n        xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n    }\n    util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n        `${xShape4D.length}.`);\n    util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n        `rank ${dy4D.rank}`);\n    util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n        `rank ${filter.rank}`);\n    const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n    util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n        `match input depth for filter ${filter.shape[2]}.`);\n    util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n        `match output depth for filter ${filter.shape[3]}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inputs = { dy: dy4D, filter };\n    const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const conv2DBackpropInput = op({ conv2DBackpropInput_ });\n//# sourceMappingURL=conv2d_backprop_input.js.map"]},"metadata":{},"sourceType":"module"}