{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from \"../utils/fused_utils\";\nimport { add } from \"./Add\";\nimport { batchMatMul } from \"./BatchMatMul\";\nexport function _fusedMatMul(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var a = inputs.a,\n      b = inputs.b,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var transposeA = attrs.transposeA,\n      transposeB = attrs.transposeB,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var current;\n  var addRes;\n  var activationRes;\n  var intermediates = [];\n  var matMulRes = batchMatMul({\n    inputs: {\n      a: a,\n      b: b\n    },\n    attrs: {\n      transposeA: transposeA,\n      transposeB: transposeB\n    },\n    backend: backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend: backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (var _i = 0, _intermediates = intermediates; _i < _intermediates.length; _i++) {\n    var i = _intermediates[_i];\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport var _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"sources":["../../src/kernels/_FusedMatMul.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAAwG,uBAAxG;AAGA,SAAQ,eAAR;AAEA,SAAQ,GAAR;AACA,SAAQ,WAAR;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAA6C,MAA7C,CAAO,CAAP;EAAA,IAAU,CAAV,GAA6C,MAA7C,CAAU,CAAV;EAAA,IAAa,IAAb,GAA6C,MAA7C,CAAa,IAAb;EAAA,IAAmB,sBAAnB,GAA6C,MAA7C,CAAmB,sBAAnB;EACA,IAAO,UAAP,GAA6D,KAA7D,CAAO,UAAP;EAAA,IAAmB,UAAnB,GAA6D,KAA7D,CAAmB,UAAnB;EAAA,IAA+B,UAA/B,GAA6D,KAA7D,CAA+B,UAA/B;EAAA,IAA2C,cAA3C,GAA6D,KAA7D,CAA2C,cAA3C;EAEA,IAAI,OAAJ;EACA,IAAI,MAAJ;EACA,IAAI,aAAJ;EAEA,IAAM,aAAa,GAAiB,EAApC;EAEA,IAAM,SAAS,GACX,WAAW,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAD,CAAD;MAAI,CAAC,EAAD;IAAJ,CAAT;IAAiB,KAAK,EAAE;MAAC,UAAU,EAAV,UAAD;MAAa,UAAU,EAAV;IAAb,CAAxB;IAAkD,OAAO,EAAP;EAAlD,CAAD,CADf;EAEA,OAAO,GAAG,SAAV;;EAEA,IAAI,IAAJ,EAAU;IACR,MAAM,GAAG,GAAG,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,OAAJ;QAAa,CAAC,EAAE;MAAhB,CAAT;MAAgC,OAAO,EAAP;IAAhC,CAAD,CAAZ;IACA,aAAa,CAAC,IAAd,CAAmB,OAAnB;IACA,OAAO,GAAG,MAAV;EACD;;EACD,IAAI,UAAJ,EAAgB;IACd,aAAa,GAAG,eAAe,CAC3B,OAD2B,EAClB,OADkB,EACT,UADS,EACG,sBADH,EAC2B,cAD3B,CAA/B;IAEA,aAAa,CAAC,IAAd,CAAmB,OAAnB;IACA,OAAO,GAAG,aAAV;EACD;;EAED,kCAAgB,aAAhB,oCAA+B;IAA1B,IAAM,CAAC,qBAAP;IACH,OAAO,CAAC,6BAAR,CAAsC,CAAtC;EACD;;EAED,OAAO,OAAP;AACD;AAED,OAAO,IAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YADkC;EAE9C,WAAW,EAAE,KAFiC;EAG9C,UAAU,EAAE;AAHkC,CAAzC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map"]},"metadata":{},"sourceType":"module"}