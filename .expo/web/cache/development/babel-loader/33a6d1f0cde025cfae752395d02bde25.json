{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var MultinomialProgram = function () {\n  function MultinomialProgram(batchSize, numOutcomes, numSamples) {\n    _classCallCheck(this, MultinomialProgram);\n\n    this.variableNames = ['probs'];\n    this.outputShape = [batchSize, numSamples];\n    this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \" + (numOutcomes - 1) + \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\" + (numOutcomes - 1) + \"));\\n      }\\n    \";\n  }\n\n  _createClass(MultinomialProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(seed) {\n      var _this = this;\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.seedLoc == null) {\n          _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n        }\n\n        gpgpu.gl.uniform1f(_this.seedLoc, seed);\n      };\n    }\n  }]);\n\n  return MultinomialProgram;\n}();","map":{"version":3,"sources":["../src/multinomial_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,kBAAb;EAQE,4BAAY,SAAZ,EAA+B,WAA/B,EAAoD,UAApD,EAAsE;IAAA;;IAPtE,KAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;IAQE,KAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,UAAZ,CAAnB;IAEA,KAAK,QAAL,mOAU0B,WAAW,GAAG,CAVxC,4PAoBsB,WAAW,GAAG,CApBpC;EAuBD;;EAlCH;IAAA;IAAA,OAoCE,4BAAmB,IAAnB,EAA+B;MAAA;;MAC7B,OAAO,UAAC,KAAD,EAAsB,YAAtB,EAAoD;QACzD,IAAI,KAAI,CAAC,OAAL,IAAgB,IAApB,EAA0B;UACxB,KAAI,CAAC,OAAL,GAAe,KAAK,CAAC,kBAAN,CAAyB,YAAzB,EAAuC,MAAvC,CAAf;QACD;;QACD,KAAK,CAAC,EAAN,CAAS,SAAT,CAAmB,KAAI,CAAC,OAAxB,EAAiC,IAAjC;MACD,CALD;IAMD;EA3CH;;EAAA;AAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n    getCustomSetupFunc(seed) {\n        return (gpgpu, webGLProgram) => {\n            if (this.seedLoc == null) {\n                this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n            }\n            gpgpu.gl.uniform1f(this.seedLoc, seed);\n        };\n    }\n}\n//# sourceMappingURL=multinomial_gpu.js.map"]},"metadata":{},"sourceType":"module"}