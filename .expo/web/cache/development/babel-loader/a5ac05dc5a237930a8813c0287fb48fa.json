{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { maxImpl } from \"./Max_impl\";\nimport { transposeImpl } from \"./Transpose_impl\";\nexport function max(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var reductionIndices = attrs.reductionIndices,\n      keepDims = attrs.keepDims;\n  var cpuBackend = backend;\n  var xShape = x.shape;\n  var xRank = xShape.length;\n  var origAxes = util.parseAxisParam(reductionIndices, xShape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var xVals = cpuBackend.data.get(x.dataId).values;\n\n  if (permutedAxes != null) {\n    var newShape = new Array(xRank);\n\n    for (var i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(xShape, axes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      maxOutShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  var dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n  var outShape = maxOutShape;\n\n  if (keepDims) {\n    var newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {\n    dataId: dataId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport var maxConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max\n};","map":{"version":3,"sources":["../../src/kernels/Max.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAoB,GAApB,QAA+D,uBAA/D;AACA,SAAQ,YAAR,QAAyC,uBAAzC;AACA,SAAoB,IAApB,QAA+B,uBAA/B;AAGA,SAAQ,gBAAR;AAEA,SAAQ,OAAR;AACA,SAAQ,aAAR;AAEA,OAAM,SAAU,GAAV,CACF,IADE,EACiE;EAErE,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,gBAAP,GAAqC,KAArC,CAAO,gBAAP;EAAA,IAAyB,QAAzB,GAAqC,KAArC,CAAyB,QAAzB;EACA,IAAM,UAAU,GAAG,OAAnB;EACA,IAAI,MAAM,GAAG,CAAC,CAAC,KAAf;EACA,IAAM,KAAK,GAAG,MAAM,CAAC,MAArB;EAEA,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,gBAApB,EAAsC,MAAtC,CAAjB;EACA,IAAI,IAAI,GAAG,QAAX;EACA,IAAM,YAAY,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAArB;EACA,IAAI,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA1C;;EACA,IAAI,YAAY,IAAI,IAApB,EAA0B;IACxB,IAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;MACxC,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAM,CAAC,YAAY,CAAC,CAAD,CAAb,CAApB;IACD;;IAED,KAAK,GAAG,aAAa,CAAC,KAAD,EAAQ,MAAR,EAAgB,CAAC,CAAC,KAAlB,EAAyB,YAAzB,EAAuC,QAAvC,CAArB;IACA,IAAI,GAAG,YAAY,CAAC,gBAAb,CAA8B,IAAI,CAAC,MAAnC,EAA2C,KAA3C,CAAP;IAEA,MAAM,GAAG,QAAT;EACD;;EAED,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;EACA,YAAY,CAAC,0BAAb,CAAwC,KAAxC,EAA+C,IAA/C,EAAqD,KAArD;;EACA,4BACI,YAAY,CAAC,yBAAb,CAAuC,MAAvC,EAA+C,IAA/C,CADJ;EAAA;EAAA,IAAO,WAAP;EAAA,IAAoB,WAApB;;EAGA,IAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;EAEA,IAAM,MAAM,GAAG,OAAO,CAAC,KAAD,EAAQ,UAAR,EAAoB,WAApB,EAAiC,CAAC,CAAC,KAAnC,CAAtB;EACA,IAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,WAAzB,EAAsC,CAAC,CAAC,KAAxC,CAAf;EAEA,IAAI,QAAQ,GAAG,WAAf;;EACA,IAAI,QAAJ,EAAc;IAEZ,IAAM,QAAQ,GAAG,YAAY,CAAC,oBAAb,CAAkC,WAAlC,EAA+C,QAA/C,CAAjB;IACA,QAAQ,GAAG,QAAX;EACD;;EAED,OAAO;IAAC,MAAM,EAAN,MAAD;IAAS,KAAK,EAAE,QAAhB;IAA0B,KAAK,EAAE,CAAC,CAAC;EAAnC,CAAP;AACD;AAED,OAAO,IAAM,SAAS,GAAiB;EACrC,UAAU,EAAE,GADyB;EAErC,WAAW,EAAE,KAFwB;EAGrC,UAAU,EAAE;AAHyB,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const cpuBackend = backend;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xShape = newShape;\n    }\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n        outShape = newShape;\n    }\n    return { dataId, shape: outShape, dtype: x.dtype };\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: max\n};\n//# sourceMappingURL=Max.js.map"]},"metadata":{},"sourceType":"module"}