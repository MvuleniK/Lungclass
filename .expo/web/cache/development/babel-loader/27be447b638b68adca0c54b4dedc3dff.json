{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from \"../backend/common\";\nimport * as K from \"../backend/tfjs_backend\";\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from \"../common\";\nimport { InputSpec } from \"../engine/topology\";\nimport { Layer } from \"../engine/topology\";\nimport { NotImplementedError, ValueError } from \"../errors\";\nimport { convOutputLength } from \"../utils/conv_utils\";\nimport { assertPositiveInteger } from \"../utils/generic_utils\";\nimport { getExactlyOneShape, getExactlyOneTensor } from \"../utils/types_utils\";\nimport { preprocessConv2DInput, preprocessConv3DInput } from \"./convolutional\";\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n\n    if (strides == null) {\n      strides = [1, 1];\n    }\n\n    if (padding == null) {\n      padding = 'valid';\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    x = preprocessConv2DInput(x, dataFormat);\n    var y;\n    var paddingString = padding === 'same' ? 'same' : 'valid';\n\n    if (poolMode === 'max') {\n      y = tfc.maxPool(x, poolSize, strides, paddingString);\n    } else {\n      y = tfc.avgPool(x, poolSize, strides, paddingString);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n\n    if (padding == null) {\n      padding = 'valid';\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    x = preprocessConv3DInput(x, dataFormat);\n    var y;\n    var paddingString = padding === 'same' ? 'same' : 'valid';\n\n    if (poolMode === 'max') {\n      y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n    } else {\n      y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\nexport var Pooling1D = function (_Layer) {\n  _inherits(Pooling1D, _Layer);\n\n  var _super = _createSuper(Pooling1D);\n\n  function Pooling1D(args) {\n    var _this;\n\n    _classCallCheck(this, Pooling1D);\n\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n\n    _this = _super.call(this, args);\n\n    if (typeof args.poolSize === 'number') {\n      _this.poolSize = [args.poolSize];\n    } else if (Array.isArray(args.poolSize) && args.poolSize.length === 1 && typeof args.poolSize[0] === 'number') {\n      _this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\"poolSize for 1D convolutional layer must be a number or an \" + \"Array of a single number, but received \" + (\"\" + JSON.stringify(args.poolSize)));\n    }\n\n    assertPositiveInteger(_this.poolSize, 'poolSize');\n\n    if (args.strides == null) {\n      _this.strides = _this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        _this.strides = [args.strides];\n      } else if (Array.isArray(args.strides) && args.strides.length === 1 && typeof args.strides[0] === 'number') {\n        _this.strides = args.strides;\n      } else {\n        throw new ValueError(\"strides for 1D convolutional layer must be a number or an \" + \"Array of a single number, but received \" + (\"\" + JSON.stringify(args.strides)));\n      }\n    }\n\n    assertPositiveInteger(_this.strides, 'strides');\n    _this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(_this.padding);\n    _this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    return _this;\n  }\n\n  _createClass(Pooling1D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n      return [inputShape[0], length, inputShape[2]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        _this2.invokeCallHook(inputs, kwargs);\n\n        inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n\n        var output = _this2.poolingFunction(getExactlyOneTensor(inputs), [_this2.poolSize[0], 1], [_this2.strides[0], 1], _this2.padding, 'channelsLast');\n\n        return tfc.squeeze(output, [2]);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling1D.prototype), \"getConfig\", this).call(this);\n\n      _extends(config, baseConfig);\n\n      return config;\n    }\n  }]);\n\n  return Pooling1D;\n}(Layer);\nexport var MaxPooling1D = function (_Pooling1D) {\n  _inherits(MaxPooling1D, _Pooling1D);\n\n  var _super2 = _createSuper(MaxPooling1D);\n\n  function MaxPooling1D(args) {\n    _classCallCheck(this, MaxPooling1D);\n\n    return _super2.call(this, args);\n  }\n\n  _createClass(MaxPooling1D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling1D;\n}(Pooling1D);\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport var AveragePooling1D = function (_Pooling1D2) {\n  _inherits(AveragePooling1D, _Pooling1D2);\n\n  var _super3 = _createSuper(AveragePooling1D);\n\n  function AveragePooling1D(args) {\n    _classCallCheck(this, AveragePooling1D);\n\n    return _super3.call(this, args);\n  }\n\n  _createClass(AveragePooling1D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling1D;\n}(Pooling1D);\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\nexport var Pooling2D = function (_Layer2) {\n  _inherits(Pooling2D, _Layer2);\n\n  var _super4 = _createSuper(Pooling2D);\n\n  function Pooling2D(args) {\n    var _this3;\n\n    _classCallCheck(this, Pooling2D);\n\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n\n    _this3 = _super4.call(this, args);\n    _this3.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize];\n\n    if (args.strides == null) {\n      _this3.strides = _this3.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\"If the strides property of a 2D pooling layer is an Array, \" + \"it is expected to have a length of 2, but received length \" + (args.strides.length + \".\"));\n      }\n\n      _this3.strides = args.strides;\n    } else {\n      _this3.strides = [args.strides, args.strides];\n    }\n\n    assertPositiveInteger(_this3.poolSize, 'poolSize');\n    assertPositiveInteger(_this3.strides, 'strides');\n    _this3.padding = args.padding == null ? 'valid' : args.padding;\n    _this3.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this3.dataFormat);\n    checkPaddingMode(_this3.padding);\n    _this3.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    return _this3;\n  }\n\n  _createClass(Pooling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n      var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n      rows = convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n      cols = convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], rows, cols];\n      } else {\n        return [inputShape[0], rows, cols, inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this4 = this;\n\n      return tidy(function () {\n        _this4.invokeCallHook(inputs, kwargs);\n\n        return _this4.poolingFunction(getExactlyOneTensor(inputs), _this4.poolSize, _this4.strides, _this4.padding, _this4.dataFormat);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling2D.prototype), \"getConfig\", this).call(this);\n\n      _extends(config, baseConfig);\n\n      return config;\n    }\n  }]);\n\n  return Pooling2D;\n}(Layer);\nexport var MaxPooling2D = function (_Pooling2D) {\n  _inherits(MaxPooling2D, _Pooling2D);\n\n  var _super5 = _createSuper(MaxPooling2D);\n\n  function MaxPooling2D(args) {\n    _classCallCheck(this, MaxPooling2D);\n\n    return _super5.call(this, args);\n  }\n\n  _createClass(MaxPooling2D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling2D;\n}(Pooling2D);\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport var AveragePooling2D = function (_Pooling2D2) {\n  _inherits(AveragePooling2D, _Pooling2D2);\n\n  var _super6 = _createSuper(AveragePooling2D);\n\n  function AveragePooling2D(args) {\n    _classCallCheck(this, AveragePooling2D);\n\n    return _super6.call(this, args);\n  }\n\n  _createClass(AveragePooling2D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling2D;\n}(Pooling2D);\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\nexport var Pooling3D = function (_Layer3) {\n  _inherits(Pooling3D, _Layer3);\n\n  var _super7 = _createSuper(Pooling3D);\n\n  function Pooling3D(args) {\n    var _this5;\n\n    _classCallCheck(this, Pooling3D);\n\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n\n    _this5 = _super7.call(this, args);\n    _this5.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize, args.poolSize];\n\n    if (args.strides == null) {\n      _this5.strides = _this5.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(\"If the strides property of a 3D pooling layer is an Array, \" + \"it is expected to have a length of 3, but received length \" + (args.strides.length + \".\"));\n      }\n\n      _this5.strides = args.strides;\n    } else {\n      _this5.strides = [args.strides, args.strides, args.strides];\n    }\n\n    assertPositiveInteger(_this5.poolSize, 'poolSize');\n    assertPositiveInteger(_this5.strides, 'strides');\n    _this5.padding = args.padding == null ? 'valid' : args.padding;\n    _this5.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this5.dataFormat);\n    checkPaddingMode(_this5.padding);\n    _this5.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n    return _this5;\n  }\n\n  _createClass(Pooling3D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n      var rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n      var cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n      depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n      rows = convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n      cols = convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], depths, rows, cols];\n      } else {\n        return [inputShape[0], depths, rows, cols, inputShape[4]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this6 = this;\n\n      return tidy(function () {\n        _this6.invokeCallHook(inputs, kwargs);\n\n        return _this6.poolingFunction(getExactlyOneTensor(inputs), _this6.poolSize, _this6.strides, _this6.padding, _this6.dataFormat);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        poolSize: this.poolSize,\n        padding: this.padding,\n        strides: this.strides,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Pooling3D.prototype), \"getConfig\", this).call(this);\n\n      _extends(config, baseConfig);\n\n      return config;\n    }\n  }]);\n\n  return Pooling3D;\n}(Layer);\nexport var MaxPooling3D = function (_Pooling3D) {\n  _inherits(MaxPooling3D, _Pooling3D);\n\n  var _super8 = _createSuper(MaxPooling3D);\n\n  function MaxPooling3D(args) {\n    _classCallCheck(this, MaxPooling3D);\n\n    return _super8.call(this, args);\n  }\n\n  _createClass(MaxPooling3D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n  }]);\n\n  return MaxPooling3D;\n}(Pooling3D);\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport var AveragePooling3D = function (_Pooling3D2) {\n  _inherits(AveragePooling3D, _Pooling3D2);\n\n  var _super9 = _createSuper(AveragePooling3D);\n\n  function AveragePooling3D(args) {\n    _classCallCheck(this, AveragePooling3D);\n\n    return _super9.call(this, args);\n  }\n\n  _createClass(AveragePooling3D, [{\n    key: \"poolingFunction\",\n    value: function poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n      checkDataFormat(dataFormat);\n      checkPaddingMode(padding);\n      return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n  }]);\n\n  return AveragePooling3D;\n}(Pooling3D);\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\nexport var GlobalPooling1D = function (_Layer4) {\n  _inherits(GlobalPooling1D, _Layer4);\n\n  var _super10 = _createSuper(GlobalPooling1D);\n\n  function GlobalPooling1D(args) {\n    var _this7;\n\n    _classCallCheck(this, GlobalPooling1D);\n\n    _this7 = _super10.call(this, args);\n    _this7.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    return _this7;\n  }\n\n  _createClass(GlobalPooling1D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return [inputShape[0], inputShape[2]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      throw new NotImplementedError();\n    }\n  }]);\n\n  return GlobalPooling1D;\n}(Layer);\nexport var GlobalAveragePooling1D = function (_GlobalPooling1D) {\n  _inherits(GlobalAveragePooling1D, _GlobalPooling1D);\n\n  var _super11 = _createSuper(GlobalAveragePooling1D);\n\n  function GlobalAveragePooling1D(args) {\n    _classCallCheck(this, GlobalAveragePooling1D);\n\n    return _super11.call(this, args || {});\n  }\n\n  _createClass(GlobalAveragePooling1D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        return tfc.mean(input, 1);\n      });\n    }\n  }]);\n\n  return GlobalAveragePooling1D;\n}(GlobalPooling1D);\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport var GlobalMaxPooling1D = function (_GlobalPooling1D2) {\n  _inherits(GlobalMaxPooling1D, _GlobalPooling1D2);\n\n  var _super12 = _createSuper(GlobalMaxPooling1D);\n\n  function GlobalMaxPooling1D(args) {\n    _classCallCheck(this, GlobalMaxPooling1D);\n\n    return _super12.call(this, args || {});\n  }\n\n  _createClass(GlobalMaxPooling1D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        return tfc.max(input, 1);\n      });\n    }\n  }]);\n\n  return GlobalMaxPooling1D;\n}(GlobalPooling1D);\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\nexport var GlobalPooling2D = function (_Layer5) {\n  _inherits(GlobalPooling2D, _Layer5);\n\n  var _super13 = _createSuper(GlobalPooling2D);\n\n  function GlobalPooling2D(args) {\n    var _this8;\n\n    _classCallCheck(this, GlobalPooling2D);\n\n    _this8 = _super13.call(this, args);\n    _this8.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this8.dataFormat);\n    _this8.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    return _this8;\n  }\n\n  _createClass(GlobalPooling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = inputShape;\n\n      if (this.dataFormat === 'channelsLast') {\n        return [inputShape[0], inputShape[3]];\n      } else {\n        return [inputShape[0], inputShape[1]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      throw new NotImplementedError();\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(GlobalPooling2D.prototype), \"getConfig\", this).call(this);\n\n      _extends(config, baseConfig);\n\n      return config;\n    }\n  }]);\n\n  return GlobalPooling2D;\n}(Layer);\nexport var GlobalAveragePooling2D = function (_GlobalPooling2D) {\n  _inherits(GlobalAveragePooling2D, _GlobalPooling2D);\n\n  var _super14 = _createSuper(GlobalAveragePooling2D);\n\n  function GlobalAveragePooling2D() {\n    _classCallCheck(this, GlobalAveragePooling2D);\n\n    return _super14.apply(this, arguments);\n  }\n\n  _createClass(GlobalAveragePooling2D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this9.dataFormat === 'channelsLast') {\n          return tfc.mean(input, [1, 2]);\n        } else {\n          return tfc.mean(input, [2, 3]);\n        }\n      });\n    }\n  }]);\n\n  return GlobalAveragePooling2D;\n}(GlobalPooling2D);\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport var GlobalMaxPooling2D = function (_GlobalPooling2D2) {\n  _inherits(GlobalMaxPooling2D, _GlobalPooling2D2);\n\n  var _super15 = _createSuper(GlobalMaxPooling2D);\n\n  function GlobalMaxPooling2D() {\n    _classCallCheck(this, GlobalMaxPooling2D);\n\n    return _super15.apply(this, arguments);\n  }\n\n  _createClass(GlobalMaxPooling2D, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this10 = this;\n\n      return tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this10.dataFormat === 'channelsLast') {\n          return tfc.max(input, [1, 2]);\n        } else {\n          return tfc.max(input, [2, 3]);\n        }\n      });\n    }\n  }]);\n\n  return GlobalMaxPooling2D;\n}(GlobalPooling2D);\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);","map":{"version":3,"sources":["../../src/layers/pooling.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = preprocessConv3DInput(x, dataFormat);\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport class Pooling1D extends Layer {\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        super(args);\n        if (typeof args.poolSize === 'number') {\n            this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            this.poolSize = args.poolSize;\n        }\n        else {\n            throw new ValueError(`poolSize for 1D convolutional layer must be a number or an ` +\n                `Array of a single number, but received ` +\n                `${JSON.stringify(args.poolSize)}`);\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                this.strides = args.strides;\n            }\n            else {\n                throw new ValueError(`strides for 1D convolutional layer must be a number or an ` +\n                    `Array of a single number, but received ` +\n                    `${JSON.stringify(args.strides)}`);\n            }\n        }\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n            const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport class AveragePooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport class Pooling2D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new ValueError(`If the strides property of a 2D pooling layer is an Array, ` +\n                    `it is expected to have a length of 2, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport class AveragePooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport class Pooling3D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new ValueError(`If the strides property of a 3D pooling layer is an Array, ` +\n                    `it is expected to have a length of 3, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport class AveragePooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport class GlobalPooling1D extends Layer {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n}\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport class GlobalPooling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n    getConfig() {\n        const config = { dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);\n//# sourceMappingURL=pooling.js.map"]},"metadata":{},"sourceType":"module"}