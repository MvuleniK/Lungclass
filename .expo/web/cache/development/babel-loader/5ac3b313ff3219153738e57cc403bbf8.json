{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from \"../utils/fused_utils\";\nimport { add } from \"./Add\";\nimport { depthwiseConv2dNative } from \"./DepthwiseConv2dNative\";\nexport function fusedDepthwiseConv2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation,\n      leakyreluAlpha = attrs.leakyreluAlpha;\n  var result = depthwiseConv2dNative({\n    inputs: {\n      x: x,\n      filter: filter\n    },\n    backend: backend,\n    attrs: {\n      strides: strides,\n      pad: pad,\n      dataFormat: dataFormat,\n      dilations: dilations,\n      dimRoundingMode: dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    var oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  if (activation) {\n    var _oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(_oldResult);\n  }\n\n  return result;\n}\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"sources":["../../src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,oBAAR,QAAgI,uBAAhI;AAGA,SAAQ,eAAR;AACA,SAAQ,GAAR;AACA,SAAQ,qBAAR;AAEA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAkD,MAAlD,CAAO,CAAP;EAAA,IAAU,MAAV,GAAkD,MAAlD,CAAU,MAAV;EAAA,IAAkB,IAAlB,GAAkD,MAAlD,CAAkB,IAAlB;EAAA,IAAwB,sBAAxB,GAAkD,MAAlD,CAAwB,sBAAxB;EACA,IACE,OADF,GAQI,KARJ,CACE,OADF;EAAA,IAEE,GAFF,GAQI,KARJ,CAEE,GAFF;EAAA,IAGE,UAHF,GAQI,KARJ,CAGE,UAHF;EAAA,IAIE,SAJF,GAQI,KARJ,CAIE,SAJF;EAAA,IAKE,eALF,GAQI,KARJ,CAKE,eALF;EAAA,IAME,UANF,GAQI,KARJ,CAME,UANF;EAAA,IAOE,cAPF,GAQI,KARJ,CAOE,cAPF;EAUA,IAAI,MAAM,GAAG,qBAAqB,CAAC;IACjC,MAAM,EAAE;MAAC,CAAC,EAAD,CAAD;MAAI,MAAM,EAAN;IAAJ,CADyB;IAEjC,OAAO,EAAP,OAFiC;IAGjC,KAAK,EAAE;MAAC,OAAO,EAAP,OAAD;MAAU,GAAG,EAAH,GAAV;MAAe,UAAU,EAAV,UAAf;MAA2B,SAAS,EAAT,SAA3B;MAAsC,eAAe,EAAf;IAAtC;EAH0B,CAAD,CAAlC;;EAMA,IAAI,IAAJ,EAAU;IACR,IAAM,SAAS,GAAG,MAAlB;IACA,MAAM,GAAG,GAAG,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,MAAJ;QAAY,CAAC,EAAE;MAAf,CAAT;MAA+B,OAAO,EAAP;IAA/B,CAAD,CAAZ;IACA,OAAO,CAAC,6BAAR,CAAsC,SAAtC;EACD;;EACD,IAAI,UAAJ,EAAgB;IACd,IAAM,UAAS,GAAG,MAAlB;IACA,MAAM,GAAG,eAAe,CACpB,OADoB,EACX,MADW,EACH,UADG,EACS,sBADT,EACiC,cADjC,CAAxB;IAEA,OAAO,CAAC,6BAAR,CAAsC,UAAtC;EACD;;EAED,OAAO,MAAP;AACD;AAED,OAAO,IAAM,0BAA0B,GAAiB;EACtD,UAAU,EAAE,oBAD0C;EAEtD,WAAW,EAAE,KAFyC;EAGtD,UAAU,EAAE;AAH0C,CAAjD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = depthwiseConv2dNative({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const oldResult = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    if (activation) {\n        const oldResult = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedDepthwiseConv2D\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map"]},"metadata":{},"sourceType":"module"}