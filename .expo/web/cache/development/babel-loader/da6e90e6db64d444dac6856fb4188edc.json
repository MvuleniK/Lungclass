{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { pool } from \"../utils/pool_utils\";\nimport { identity } from \"./Identity\";\nexport function maxPool(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  assertNotComplex(x, 'maxPool');\n  var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in maxPool: Either strides or dilations must be 1. ' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\");\n  });\n  var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  var res;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n  } else {\n    var xValues = backend.data.get(x.dataId).values;\n\n    var _strides = util.computeStrides(x.shape);\n\n    var buffer = pool(xValues, x.shape, x.dtype, _strides, convInfo, 'max');\n    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n  }\n\n  return res;\n}\nexport var maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool\n};","map":{"version":3,"sources":["../../src/kernels/MaxPool.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,YAAR,EAAgD,OAAhD,EAA8G,IAA9G,QAAyH,uBAAzH;AAGA,SAAQ,gBAAR;AACA,SAAQ,IAAR;AACA,SAAQ,QAAR;AAEA,OAAM,SAAU,OAAV,CACF,IADE,EAEuE;EAE3E,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,gBAAgB,CAAC,CAAD,EAAI,SAAJ,CAAhB;EACA,IAAO,UAAP,GAAoD,KAApD,CAAO,UAAP;EAAA,IAAmB,OAAnB,GAAoD,KAApD,CAAmB,OAAnB;EAAA,IAA4B,GAA5B,GAAoD,KAApD,CAA4B,GAA5B;EAAA,IAAiC,eAAjC,GAAoD,KAApD,CAAiC,eAAjC;EACA,IAAM,SAAS,GAAG,CAAlB;EAEA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI;IAAA,OAAM,gFACa,OADb,wBACuC,SADvC,OAAN;EAAA,CAFJ;EAKA,IAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,EAEG,eAFH,CAAjB;EAGA,IAAI,GAAJ;;EAEA,IAAI,QAAQ,CAAC,WAAT,KAAyB,CAAzB,IAA8B,QAAQ,CAAC,YAAT,KAA0B,CAAxD,IACA,IAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,QAAQ,CAAC,QAA5C,CADJ,EAC2D;IACzD,GAAG,GAAG,QAAQ,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAD;MAAD,CAAT;MAAc,OAAO,EAAP;IAAd,CAAD,CAAd;EACD,CAHD,MAGO;IACL,IAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;;IACA,IAAM,QAAO,GAAG,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CAAhB;;IACA,IAAM,MAAM,GAAG,IAAI,CAAC,OAAD,EAAU,CAAC,CAAC,KAAZ,EAAmB,CAAC,CAAC,KAArB,EAA4B,QAA5B,EAAqC,QAArC,EAA+C,KAA/C,CAAnB;IACA,GAAG,GAAG,OAAO,CAAC,cAAR,CACF,QAAQ,CAAC,QADP,EACiB,CAAC,CAAC,KADnB,EAC0B,MAAM,CAAC,MADjC,CAAN;EAED;;EACD,OAAO,GAAP;AACD;AAED,OAAO,IAAM,aAAa,GAAiB;EACzC,UAAU,EAAE,OAD6B;EAEzC,WAAW,EAAE,KAF4B;EAGzC,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'cpu',\n    kernelFunc: maxPool\n};\n//# sourceMappingURL=MaxPool.js.map"]},"metadata":{},"sourceType":"module"}