{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n\n(function (PackingScheme) {\n  PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n  PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\n\nexport var TextureUsage;\n\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\n\nexport var PhysicalTextureType;\n\n(function (PhysicalTextureType) {\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns * 4, rows];\n}\nexport function getDenseTexShape(shape) {\n  var size = util.sizeFromShape(shape);\n  var texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\"unpackedSize (\" + unpackedSize + \") must be a multiple of \" + (\"\" + channelsPerTexture));\n  }\n\n  return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n  var requiredSize = unpackedArray.length * channels / 4;\n\n  if (matrix.length < requiredSize) {\n    throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n  }\n\n  var dst = 0;\n\n  for (var src = 0; src < unpackedArray.length; src += 4) {\n    for (var c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  var _getPackedMatrixTextu = getPackedMatrixTextureShapeWidthHeight(rows, columns),\n      _getPackedMatrixTextu2 = _slicedToArray(_getPackedMatrixTextu, 2),\n      w = _getPackedMatrixTextu2[0],\n      h = _getPackedMatrixTextu2[1];\n\n  return w * h * 4;\n}\nexport function getTextureConfig(gl, textureHalfFloatExtension) {\n  var glany = gl;\n  var internalFormatFloat;\n  var internalFormatHalfFloat;\n  var internalFormatPackedHalfFloat;\n  var internalFormatPackedFloat;\n  var textureFormatFloat;\n  var downloadTextureFormat;\n  var downloadUnpackNumChannels;\n  var defaultNumChannels;\n  var textureTypeHalfFloat;\n  var textureTypeFloat;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n  }\n\n  downloadTextureFormat = gl.RGBA;\n  return {\n    internalFormatFloat: internalFormatFloat,\n    internalFormatHalfFloat: internalFormatHalfFloat,\n    internalFormatPackedHalfFloat: internalFormatPackedHalfFloat,\n    internalFormatPackedFloat: internalFormatPackedFloat,\n    textureFormatFloat: textureFormatFloat,\n    downloadTextureFormat: downloadTextureFormat,\n    downloadUnpackNumChannels: downloadUnpackNumChannels,\n    defaultNumChannels: defaultNumChannels,\n    textureTypeHalfFloat: textureTypeHalfFloat,\n    textureTypeFloat: textureTypeFloat\n  };\n}","map":{"version":3,"sources":["../src/tex_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n//# sourceMappingURL=tex_util.js.map"]},"metadata":{},"sourceType":"module"}