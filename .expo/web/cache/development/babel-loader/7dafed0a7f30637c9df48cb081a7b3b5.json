{"ast":null,"code":"import { convertToTensor } from \"../../tensor_util_env\";\nimport { assertShapesMatch } from \"../../util\";\nimport { Reduction } from \"../loss_ops_utils\";\nimport { mul } from \"../mul\";\nimport { op } from \"../operation\";\nimport { relu } from \"../relu\";\nimport { scalar } from \"../scalar\";\nimport { sub } from \"../sub\";\nimport { computeWeightedLoss } from \"./compute_weighted_loss\";\n\nfunction hingeLoss_(labels, predictions, weights) {\n  var reduction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  var $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  var $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  var $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n  var one = scalar(1);\n  $labels = sub(mul(scalar(2), $labels), one);\n  var losses = relu(sub(one, mul($labels, $predictions)));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport var hingeLoss = op({\n  hingeLoss_: hingeLoss_\n});","map":{"version":3,"sources":["../../../src/ops/losses/hinge_loss.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR;AAEA,SAAQ,iBAAR;AACA,SAAQ,SAAR;AACA,SAAQ,GAAR;AACA,SAAQ,EAAR;AACA,SAAQ,IAAR;AACA,SAAQ,MAAR;AACA,SAAQ,GAAR;AAEA,SAAQ,mBAAR;;AAiBA,SAAS,UAAT,CACI,MADJ,EAC0B,WAD1B,EAEI,OAFJ,EAGgD;EAAA,IAA5C,SAA4C,uEAAhC,SAAS,CAAC,sBAAsB;EAC9C,IAAI,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAA7B;EACA,IAAM,YAAY,GAAG,eAAe,CAAC,WAAD,EAAc,aAAd,EAA6B,WAA7B,CAApC;EACA,IAAI,QAAQ,GAAW,IAAvB;;EACA,IAAI,OAAO,IAAI,IAAf,EAAqB;IACnB,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,WAArB,CAA1B;EACD;;EACD,iBAAiB,CAAC,OAAO,CAAC,KAAT,EAAgB,YAAY,CAAC,KAA7B,EAAoC,sBAApC,CAAjB;EAEA,IAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;EAEA,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,OAAZ,CAAJ,EAA0B,GAA1B,CAAb;EACA,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAD,EAAM,GAAG,CAAC,OAAD,EAAU,YAAV,CAAT,CAAJ,CAAnB;EACA,OAAO,mBAAmB,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAA1B;AACD;;AACD,OAAO,IAAM,SAAS,GAAG,EAAE,CAAC;EAAC,UAAU,EAAV;AAAD,CAAD,CAApB","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n    const one = scalar(1);\n    // Convert binary labels to (-1, 1)\n    $labels = sub(mul(scalar(2), $labels), one);\n    const losses = relu(sub(one, mul($labels, $predictions)));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({ hingeLoss_ });\n//# sourceMappingURL=hinge_loss.js.map"]},"metadata":{},"sourceType":"module"}