{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from \"./Transpose_impl\";\nimport { transposeImplCPU as cpuTranspose } from \"./Transpose_impl\";\nexport function transpose(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var perm = attrs.perm;\n  var webglBackend = backend;\n  var xRank = x.shape.length;\n  var newShape = new Array(xRank);\n\n  for (var i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  var out;\n\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    var xTexData = webglBackend.texData.get(x.dataId);\n    var values = xTexData.values;\n    var outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    var outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n\n  return out;\n}\nexport var transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,SAA9C,QAA2G,uBAA3G;AAIA,SAAQ,aAAR;AACA,SAAQ,gBAAgB,IAAI,YAA5B;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,IAAP,GAAe,KAAf,CAAO,IAAP;EACA,IAAM,YAAY,GAAG,OAArB;EAEA,IAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;EAEA,IAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,CAAC,KAAF,CAAQ,IAAI,CAAC,CAAD,CAAZ,CAAd;EACD;;EAED,IAAI,GAAJ;;EACA,IAAI,YAAY,CAAC,kBAAb,CAAgC,CAAC,CAAD,CAAhC,CAAJ,EAA0C;IACxC,IAAM,QAAQ,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAyB,CAAC,CAAC,MAA3B,CAAjB;IACA,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAxB;IACA,IAAM,SAAS,GAAG,YAAY,CAAC,MAAD,EAAS,CAAC,CAAC,KAAX,EAAkB,CAAC,CAAC,KAApB,EAA2B,IAA3B,EAAiC,QAAjC,CAA9B;IAEA,GAAG,GAAG,YAAY,CAAC,cAAb,CAA4B,QAA5B,EAAsC,CAAC,CAAC,KAAxC,CAAN;IACA,IAAM,OAAO,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAyB,GAAG,CAAC,MAA7B,CAAhB;IACA,OAAO,CAAC,MAAR,GAAiB,SAAjB;EACD,CARD,MAQO;IACL,GAAG,GAAG,aAAa,CAAC,CAAD,EAAI,IAAJ,EAAU,YAAV,CAAnB;EACD;;EACD,OAAO,GAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,SAD+B;EAE3C,WAAW,EAAE,OAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    let out;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n        const xTexData = webglBackend.texData.get(x.dataId);\n        const values = xTexData.values;\n        const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n        out = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const outData = webglBackend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'webgl',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map"]},"metadata":{},"sourceType":"module"}