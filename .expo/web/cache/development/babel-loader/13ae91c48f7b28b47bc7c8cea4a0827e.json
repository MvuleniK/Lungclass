{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { OneHot } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { op } from \"./operation\";\n\nfunction oneHot_(indices, depth) {\n  var onValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var offValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (depth < 2) {\n    throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\n  }\n\n  var $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  var inputs = {\n    indices: $indices\n  };\n  var attrs = {\n    depth: depth,\n    onValue: onValue,\n    offValue: offValue\n  };\n  return ENGINE.runKernel(OneHot, inputs, attrs);\n}\n\nexport var oneHot = op({\n  oneHot_: oneHot_\n});","map":{"version":3,"sources":["../../src/ops/one_hot.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,MAAR;AAIA,SAAQ,eAAR;AAGA,SAAQ,EAAR;;AAqBA,SAAS,OAAT,CACI,OADJ,EACgC,KADhC,EAEgB;EAAA,IAD+B,OAC/B,uEADyC,CACzC;EAAA,IAAZ,QAAY,uEAAD,CAAC;;EACd,IAAI,KAAK,GAAG,CAAZ,EAAe;IACb,MAAM,IAAI,KAAJ,oDAA2D,KAA3D,CAAN;EACD;;EACD,IAAM,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,QAArB,EAA+B,OAA/B,CAAhC;EAEA,IAAM,MAAM,GAAiB;IAAC,OAAO,EAAE;EAAV,CAA7B;EACA,IAAM,KAAK,GAAgB;IAAC,KAAK,EAAL,KAAD;IAAQ,OAAO,EAAP,OAAR;IAAiB,QAAQ,EAAR;EAAjB,CAA3B;EAEA,OAAO,MAAM,CAAC,SAAP,CACH,MADG,EACK,MADL,EAEH,KAFG,CAAP;AAGD;;AAED,OAAO,IAAM,MAAM,GAAG,EAAE,CAAC;EAAC,OAAO,EAAP;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\n    if (depth < 2) {\n        throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n    }\n    const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n    const inputs = { indices: $indices };\n    const attrs = { depth, onValue, offValue };\n    return ENGINE.runKernel(OneHot, inputs, attrs);\n}\nexport const oneHot = op({ oneHot_ });\n//# sourceMappingURL=one_hot.js.map"]},"metadata":{},"sourceType":"module"}