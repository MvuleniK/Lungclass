{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\nexport var DataStorage = function () {\n  function DataStorage(backend, dataMover) {\n    _classCallCheck(this, DataStorage);\n\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  _createClass(DataStorage, [{\n    key: \"get\",\n    value: function get(dataId) {\n      if (!this.data.has(dataId)) {\n        this.dataMover.moveData(this.backend, dataId);\n      }\n\n      return this.data.get(dataId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(dataId, value) {\n      this.dataIdsCount++;\n      this.data.set(dataId, value);\n    }\n  }, {\n    key: \"has\",\n    value: function has(dataId) {\n      return this.data.has(dataId);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(dataId) {\n      this.dataIdsCount--;\n      return this.data.delete(dataId);\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.dataIdsCount;\n    }\n  }]);\n\n  return DataStorage;\n}();\nexport var KernelBackend = function () {\n  function KernelBackend() {\n    _classCallCheck(this, KernelBackend);\n  }\n\n  _createClass(KernelBackend, [{\n    key: \"decComplexRef\",\n    value: function decComplexRef(dataId) {\n      return;\n    }\n  }, {\n    key: \"time\",\n    value: function time(f) {\n      return notYetImplemented('time');\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      return notYetImplemented('read');\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      return notYetImplemented('readSync');\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return notYetImplemented('numDataIds');\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      return notYetImplemented('disposeData');\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      return notYetImplemented('write');\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      return notYetImplemented('move');\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return notYetImplemented('memory');\n    }\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return notYetImplemented('floatPrecision');\n    }\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"batchMatMul\",\n    value: function batchMatMul(a, b, transposeA, transposeB) {\n      return notYetImplemented('batchMatMul');\n    }\n  }, {\n    key: \"fusedBatchMatMul\",\n    value: function fusedBatchMatMul(_ref) {\n      var a = _ref.a,\n          b = _ref.b,\n          transposeA = _ref.transposeA,\n          transposeB = _ref.transposeB,\n          bias = _ref.bias,\n          activation = _ref.activation,\n          preluActivationWeights = _ref.preluActivationWeights;\n      return notYetImplemented('fusedBatchMatMul');\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(x, begin, size) {\n      return notYetImplemented('slice');\n    }\n  }, {\n    key: \"stridedSlice\",\n    value: function stridedSlice(x, begin, end, strides) {\n      return notYetImplemented('stridedSlice');\n    }\n  }, {\n    key: \"unstack\",\n    value: function unstack(x, axis) {\n      return notYetImplemented('unstack');\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(a, axis) {\n      return notYetImplemented('reverse');\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(tensors, axis) {\n      return notYetImplemented('concat');\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(a) {\n      return notYetImplemented('neg');\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      return notYetImplemented('add');\n    }\n  }, {\n    key: \"addN\",\n    value: function addN(tensors) {\n      return notYetImplemented('addN');\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      return notYetImplemented('subtract');\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return notYetImplemented('multiply');\n    }\n  }, {\n    key: \"realDivide\",\n    value: function realDivide(a, b) {\n      return notYetImplemented('realDivide');\n    }\n  }, {\n    key: \"floorDiv\",\n    value: function floorDiv(a, b) {\n      return notYetImplemented('floorDiv');\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(x, axes) {\n      return notYetImplemented('sum');\n    }\n  }, {\n    key: \"prod\",\n    value: function prod(x, axes) {\n      return notYetImplemented('prod');\n    }\n  }, {\n    key: \"unsortedSegmentSum\",\n    value: function unsortedSegmentSum(x, segmentIds, numSegments) {\n      return notYetImplemented('unsortedSegmentSum');\n    }\n  }, {\n    key: \"argMin\",\n    value: function argMin(x, axis) {\n      return notYetImplemented('argMin');\n    }\n  }, {\n    key: \"argMax\",\n    value: function argMax(x, axis) {\n      return notYetImplemented('argMax');\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(a, b) {\n      return notYetImplemented('equal');\n    }\n  }, {\n    key: \"notEqual\",\n    value: function notEqual(a, b) {\n      return notYetImplemented('notEqual');\n    }\n  }, {\n    key: \"less\",\n    value: function less(a, b) {\n      return notYetImplemented('less');\n    }\n  }, {\n    key: \"lessEqual\",\n    value: function lessEqual(a, b) {\n      return notYetImplemented('lessEqual');\n    }\n  }, {\n    key: \"greater\",\n    value: function greater(a, b) {\n      return notYetImplemented('greater');\n    }\n  }, {\n    key: \"greaterEqual\",\n    value: function greaterEqual(a, b) {\n      return notYetImplemented('greaterEqual');\n    }\n  }, {\n    key: \"logicalNot\",\n    value: function logicalNot(a) {\n      return notYetImplemented('logicalNot');\n    }\n  }, {\n    key: \"logicalAnd\",\n    value: function logicalAnd(a, b) {\n      return notYetImplemented('logicalAnd');\n    }\n  }, {\n    key: \"logicalOr\",\n    value: function logicalOr(a, b) {\n      return notYetImplemented('logicalOr');\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      return notYetImplemented('where');\n    }\n  }, {\n    key: \"select\",\n    value: function select(condition, a, b) {\n      return notYetImplemented('select');\n    }\n  }, {\n    key: \"topk\",\n    value: function topk(x, k, sorted) {\n      return notYetImplemented('topk');\n    }\n  }, {\n    key: \"min\",\n    value: function min(x, axes) {\n      return notYetImplemented('min');\n    }\n  }, {\n    key: \"minimum\",\n    value: function minimum(a, b) {\n      return notYetImplemented('minimum');\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(a, b) {\n      return notYetImplemented('mod');\n    }\n  }, {\n    key: \"max\",\n    value: function max(x, axes) {\n      return notYetImplemented('max');\n    }\n  }, {\n    key: \"maximum\",\n    value: function maximum(a, b) {\n      return notYetImplemented('maximum');\n    }\n  }, {\n    key: \"all\",\n    value: function all(x, axes) {\n      return notYetImplemented('all');\n    }\n  }, {\n    key: \"any\",\n    value: function any(x, axes) {\n      return notYetImplemented('any');\n    }\n  }, {\n    key: \"squaredDifference\",\n    value: function squaredDifference(a, b) {\n      return notYetImplemented('squaredDifference');\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(x) {\n      return notYetImplemented('ceil');\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(x) {\n      return notYetImplemented('floor');\n    }\n  }, {\n    key: \"round\",\n    value: function round(x) {\n      return notYetImplemented('round');\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(x) {\n      return notYetImplemented('sign');\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN(x) {\n      return notYetImplemented('isNaN');\n    }\n  }, {\n    key: \"isInf\",\n    value: function isInf(x) {\n      return notYetImplemented('isInf');\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite(x) {\n      return notYetImplemented('isFinite');\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      return notYetImplemented('pow');\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(x) {\n      return notYetImplemented('exp');\n    }\n  }, {\n    key: \"expm1\",\n    value: function expm1(x) {\n      return notYetImplemented('expm1');\n    }\n  }, {\n    key: \"softmax\",\n    value: function softmax(x, dim) {\n      return notYetImplemented('softmax');\n    }\n  }, {\n    key: \"log\",\n    value: function log(x) {\n      return notYetImplemented('log');\n    }\n  }, {\n    key: \"log1p\",\n    value: function log1p(x) {\n      return notYetImplemented('log1p');\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(x) {\n      return notYetImplemented('sqrt');\n    }\n  }, {\n    key: \"rsqrt\",\n    value: function rsqrt(x) {\n      return notYetImplemented('rsqrt');\n    }\n  }, {\n    key: \"square\",\n    value: function square(x) {\n      return notYetImplemented('square');\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal(x) {\n      return notYetImplemented('reciprocal');\n    }\n  }, {\n    key: \"relu\",\n    value: function relu(x) {\n      return notYetImplemented('relu');\n    }\n  }, {\n    key: \"relu6\",\n    value: function relu6(x) {\n      return notYetImplemented('relu6');\n    }\n  }, {\n    key: \"prelu\",\n    value: function prelu(x, a) {\n      return notYetImplemented('prelu');\n    }\n  }, {\n    key: \"elu\",\n    value: function elu(x) {\n      return notYetImplemented('elu');\n    }\n  }, {\n    key: \"eluDer\",\n    value: function eluDer(dy, y) {\n      return notYetImplemented('eluDer');\n    }\n  }, {\n    key: \"selu\",\n    value: function selu(x) {\n      return notYetImplemented('selu');\n    }\n  }, {\n    key: \"int\",\n    value: function int(x) {\n      return notYetImplemented('int');\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(x, min, max) {\n      return notYetImplemented('clip');\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      return notYetImplemented('abs');\n    }\n  }, {\n    key: \"complexAbs\",\n    value: function complexAbs(x) {\n      return notYetImplemented('complexAbs');\n    }\n  }, {\n    key: \"sigmoid\",\n    value: function sigmoid(x) {\n      return notYetImplemented('sigmoid');\n    }\n  }, {\n    key: \"softplus\",\n    value: function softplus(x) {\n      return notYetImplemented('softplus');\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(x) {\n      return notYetImplemented('sin');\n    }\n  }, {\n    key: \"cos\",\n    value: function cos(x) {\n      return notYetImplemented('cos');\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(x) {\n      return notYetImplemented('tan');\n    }\n  }, {\n    key: \"asin\",\n    value: function asin(x) {\n      return notYetImplemented('asin');\n    }\n  }, {\n    key: \"acos\",\n    value: function acos(x) {\n      return notYetImplemented('acos');\n    }\n  }, {\n    key: \"atan\",\n    value: function atan(x) {\n      return notYetImplemented('atan');\n    }\n  }, {\n    key: \"atan2\",\n    value: function atan2(a, b) {\n      return notYetImplemented('atan2');\n    }\n  }, {\n    key: \"sinh\",\n    value: function sinh(x) {\n      return notYetImplemented('sinh');\n    }\n  }, {\n    key: \"cosh\",\n    value: function cosh(x) {\n      return notYetImplemented('cosh');\n    }\n  }, {\n    key: \"tanh\",\n    value: function tanh(x) {\n      return notYetImplemented('tanh');\n    }\n  }, {\n    key: \"asinh\",\n    value: function asinh(x) {\n      return notYetImplemented('asinh');\n    }\n  }, {\n    key: \"acosh\",\n    value: function acosh(x) {\n      return notYetImplemented('acosh');\n    }\n  }, {\n    key: \"atanh\",\n    value: function atanh(x) {\n      return notYetImplemented('atanh');\n    }\n  }, {\n    key: \"erf\",\n    value: function erf(x) {\n      return notYetImplemented('erf');\n    }\n  }, {\n    key: \"step\",\n    value: function step(x, alpha) {\n      return notYetImplemented('step');\n    }\n  }, {\n    key: \"fusedConv2d\",\n    value: function fusedConv2d(_ref2) {\n      var input = _ref2.input,\n          filter = _ref2.filter,\n          convInfo = _ref2.convInfo,\n          bias = _ref2.bias,\n          activation = _ref2.activation,\n          preluActivationWeights = _ref2.preluActivationWeights;\n      return notYetImplemented('fusedConv2d');\n    }\n  }, {\n    key: \"conv2d\",\n    value: function conv2d(x, filter, convInfo) {\n      return notYetImplemented('conv2d');\n    }\n  }, {\n    key: \"conv2dDerInput\",\n    value: function conv2dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv2dDerInput');\n    }\n  }, {\n    key: \"conv2dDerFilter\",\n    value: function conv2dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv2dDerFilter');\n    }\n  }, {\n    key: \"fusedDepthwiseConv2D\",\n    value: function fusedDepthwiseConv2D(_ref3) {\n      var input = _ref3.input,\n          filter = _ref3.filter,\n          convInfo = _ref3.convInfo,\n          bias = _ref3.bias,\n          activation = _ref3.activation,\n          preluActivationWeights = _ref3.preluActivationWeights;\n      return notYetImplemented('fusedDepthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2D\",\n    value: function depthwiseConv2D(input, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2DDerInput\",\n    value: function depthwiseConv2DDerInput(dy, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerInput');\n    }\n  }, {\n    key: \"depthwiseConv2DDerFilter\",\n    value: function depthwiseConv2DDerFilter(x, dY, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n  }, {\n    key: \"conv3d\",\n    value: function conv3d(x, filter, convInfo) {\n      return notYetImplemented('conv3d');\n    }\n  }, {\n    key: \"conv3dDerInput\",\n    value: function conv3dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv3dDerInput');\n    }\n  }, {\n    key: \"conv3dDerFilter\",\n    value: function conv3dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv3dDerFilter');\n    }\n  }, {\n    key: \"maxPool\",\n    value: function maxPool(x, convInfo) {\n      return notYetImplemented('maxPool');\n    }\n  }, {\n    key: \"maxPoolBackprop\",\n    value: function maxPoolBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPoolBackprop');\n    }\n  }, {\n    key: \"avgPool\",\n    value: function avgPool(x, convInfo) {\n      return notYetImplemented('avgPool');\n    }\n  }, {\n    key: \"avgPoolBackprop\",\n    value: function avgPoolBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPoolBackprop');\n    }\n  }, {\n    key: \"avgPool3d\",\n    value: function avgPool3d(x, convInfo) {\n      return notYetImplemented('avgPool3d');\n    }\n  }, {\n    key: \"avgPool3dBackprop\",\n    value: function avgPool3dBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPool3dBackprop');\n    }\n  }, {\n    key: \"maxPool3d\",\n    value: function maxPool3d(x, convInfo) {\n      return notYetImplemented('maxPool3d');\n    }\n  }, {\n    key: \"maxPool3dBackprop\",\n    value: function maxPool3dBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPool3dBackprop');\n    }\n  }, {\n    key: \"reshape\",\n    value: function reshape(x, shape) {\n      return notYetImplemented('reshape');\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(x, dtype) {\n      return notYetImplemented('cast');\n    }\n  }, {\n    key: \"tile\",\n    value: function tile(x, reps) {\n      return notYetImplemented('tile');\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(x, paddings, constantValue) {\n      return notYetImplemented('pad');\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose(x, perm) {\n      return notYetImplemented('transpose');\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(x, indices, axis) {\n      var batchDims = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return notYetImplemented('gather');\n    }\n  }, {\n    key: \"gatherND\",\n    value: function gatherND(x, indices) {\n      return notYetImplemented('gatherND');\n    }\n  }, {\n    key: \"scatterND\",\n    value: function scatterND(indices, updates, shape) {\n      return notYetImplemented('scatterND');\n    }\n  }, {\n    key: \"batchToSpaceND\",\n    value: function batchToSpaceND(x, blockShape, crops) {\n      return notYetImplemented('batchToSpaceND');\n    }\n  }, {\n    key: \"spaceToBatchND\",\n    value: function spaceToBatchND(x, blockShape, paddings) {\n      return notYetImplemented('spaceToBatchND');\n    }\n  }, {\n    key: \"resizeBilinear\",\n    value: function resizeBilinear(x, newHeight, newWidth, alignCorners, halfPixelCenters) {\n      return notYetImplemented('resizeBilinear');\n    }\n  }, {\n    key: \"resizeBilinearBackprop\",\n    value: function resizeBilinearBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeBilinearBackprop');\n    }\n  }, {\n    key: \"resizeNearestNeighbor\",\n    value: function resizeNearestNeighbor(x, newHEight, newWidth, alignCorners, halfPixelCenters) {\n      return notYetImplemented('resizeNearestNeighbor');\n    }\n  }, {\n    key: \"resizeNearestNeighborBackprop\",\n    value: function resizeNearestNeighborBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n  }, {\n    key: \"batchNorm\",\n    value: function batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n      return notYetImplemented('batchNorm');\n    }\n  }, {\n    key: \"localResponseNormalization4D\",\n    value: function localResponseNormalization4D(x, radius, bias, alpha, beta) {\n      return notYetImplemented('localResponseNormalization4D');\n    }\n  }, {\n    key: \"LRNGrad\",\n    value: function LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n      return notYetImplemented('LRNGrad');\n    }\n  }, {\n    key: \"multinomial\",\n    value: function multinomial(logits, normalized, numSamples, seed) {\n      return notYetImplemented('multinomial');\n    }\n  }, {\n    key: \"oneHot\",\n    value: function oneHot(indices, depth, onValue, offValue) {\n      return notYetImplemented('oneHot');\n    }\n  }, {\n    key: \"cumsum\",\n    value: function cumsum(x, axis, exclusive, reverse) {\n      return notYetImplemented('cumsum');\n    }\n  }, {\n    key: \"nonMaxSuppression\",\n    value: function nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n      return notYetImplemented('nonMaxSuppression');\n    }\n  }, {\n    key: \"fft\",\n    value: function fft(x) {\n      return notYetImplemented('fft');\n    }\n  }, {\n    key: \"ifft\",\n    value: function ifft(x) {\n      return notYetImplemented('ifft');\n    }\n  }, {\n    key: \"complex\",\n    value: function complex(real, imag) {\n      return notYetImplemented('complex');\n    }\n  }, {\n    key: \"real\",\n    value: function real(input) {\n      return notYetImplemented('real');\n    }\n  }, {\n    key: \"imag\",\n    value: function imag(input) {\n      return notYetImplemented('imag');\n    }\n  }, {\n    key: \"cropAndResize\",\n    value: function cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n      return notYetImplemented('cropAndResize');\n    }\n  }, {\n    key: \"depthToSpace\",\n    value: function depthToSpace(x, blockSize, dataFormat) {\n      return notYetImplemented('depthToSpace');\n    }\n  }, {\n    key: \"split\",\n    value: function split(value, sizeSplits, axis) {\n      return notYetImplemented('split');\n    }\n  }, {\n    key: \"sparseToDense\",\n    value: function sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n      return notYetImplemented('sparseToDense');\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(x) {\n      return notYetImplemented('diag');\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(shape, value, dtype) {\n      return notYetImplemented('fill');\n    }\n  }, {\n    key: \"onesLike\",\n    value: function onesLike(x) {\n      return notYetImplemented('onesLike');\n    }\n  }, {\n    key: \"zerosLike\",\n    value: function zerosLike(x) {\n      return notYetImplemented('zerosLike');\n    }\n  }, {\n    key: \"linspace\",\n    value: function linspace(start, stop, num) {\n      return notYetImplemented('linspace');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return notYetImplemented('dispose');\n    }\n  }]);\n\n  return KernelBackend;\n}();\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(\"'\" + kernelName + \"' not yet implemented or not found in the registry. \" + \"This kernel may not be supported by the tfjs backend you have chosen\");\n}","map":{"version":3,"sources":["../../src/backends/backend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    /**\n     * Decrease the complex ref count for the dataId, this is useful for WebGL\n     * backend to keep the real and imag components of the complex tensor in sync\n     * with the engine. WASM and node do not have internal ref count, they will\n     * use on the default implementation.\n     * @param dataId\n     */\n    decComplexRef(dataId) {\n        return;\n    }\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        return notYetImplemented('batchMatMul');\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedBatchMatMul');\n    }\n    slice(x, begin, size) {\n        return notYetImplemented('slice');\n    }\n    stridedSlice(x, begin, end, strides) {\n        return notYetImplemented('stridedSlice');\n    }\n    unstack(x, axis) {\n        return notYetImplemented('unstack');\n    }\n    reverse(a, axis) {\n        return notYetImplemented('reverse');\n    }\n    concat(tensors, axis) {\n        return notYetImplemented('concat');\n    }\n    neg(a) {\n        return notYetImplemented('neg');\n    }\n    add(a, b) {\n        return notYetImplemented('add');\n    }\n    addN(tensors) {\n        return notYetImplemented('addN');\n    }\n    subtract(a, b) {\n        return notYetImplemented('subtract');\n    }\n    multiply(a, b) {\n        return notYetImplemented('multiply');\n    }\n    realDivide(a, b) {\n        return notYetImplemented('realDivide');\n    }\n    floorDiv(a, b) {\n        return notYetImplemented('floorDiv');\n    }\n    sum(x, axes) {\n        return notYetImplemented('sum');\n    }\n    prod(x, axes) {\n        return notYetImplemented('prod');\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        return notYetImplemented('unsortedSegmentSum');\n    }\n    argMin(x, axis) {\n        return notYetImplemented('argMin');\n    }\n    argMax(x, axis) {\n        return notYetImplemented('argMax');\n    }\n    equal(a, b) {\n        return notYetImplemented('equal');\n    }\n    notEqual(a, b) {\n        return notYetImplemented('notEqual');\n    }\n    less(a, b) {\n        return notYetImplemented('less');\n    }\n    lessEqual(a, b) {\n        return notYetImplemented('lessEqual');\n    }\n    greater(a, b) {\n        return notYetImplemented('greater');\n    }\n    greaterEqual(a, b) {\n        return notYetImplemented('greaterEqual');\n    }\n    logicalNot(a) {\n        return notYetImplemented('logicalNot');\n    }\n    logicalAnd(a, b) {\n        return notYetImplemented('logicalAnd');\n    }\n    logicalOr(a, b) {\n        return notYetImplemented('logicalOr');\n    }\n    where(condition) {\n        return notYetImplemented('where');\n    }\n    select(condition, a, b) {\n        return notYetImplemented('select');\n    }\n    topk(x, k, sorted) {\n        return notYetImplemented('topk');\n    }\n    min(x, axes) {\n        return notYetImplemented('min');\n    }\n    minimum(a, b) {\n        return notYetImplemented('minimum');\n    }\n    mod(a, b) {\n        return notYetImplemented('mod');\n    }\n    max(x, axes) {\n        return notYetImplemented('max');\n    }\n    maximum(a, b) {\n        return notYetImplemented('maximum');\n    }\n    all(x, axes) {\n        return notYetImplemented('all');\n    }\n    any(x, axes) {\n        return notYetImplemented('any');\n    }\n    squaredDifference(a, b) {\n        return notYetImplemented('squaredDifference');\n    }\n    ceil(x) {\n        return notYetImplemented('ceil');\n    }\n    floor(x) {\n        return notYetImplemented('floor');\n    }\n    round(x) {\n        return notYetImplemented('round');\n    }\n    sign(x) {\n        return notYetImplemented('sign');\n    }\n    isNaN(x) {\n        return notYetImplemented('isNaN');\n    }\n    isInf(x) {\n        return notYetImplemented('isInf');\n    }\n    isFinite(x) {\n        return notYetImplemented('isFinite');\n    }\n    pow(a, b) {\n        return notYetImplemented('pow');\n    }\n    exp(x) {\n        return notYetImplemented('exp');\n    }\n    expm1(x) {\n        return notYetImplemented('expm1');\n    }\n    softmax(x, dim) {\n        return notYetImplemented('softmax');\n    }\n    log(x) {\n        return notYetImplemented('log');\n    }\n    log1p(x) {\n        return notYetImplemented('log1p');\n    }\n    sqrt(x) {\n        return notYetImplemented('sqrt');\n    }\n    rsqrt(x) {\n        return notYetImplemented('rsqrt');\n    }\n    square(x) {\n        return notYetImplemented('square');\n    }\n    reciprocal(x) {\n        return notYetImplemented('reciprocal');\n    }\n    relu(x) {\n        return notYetImplemented('relu');\n    }\n    relu6(x) {\n        return notYetImplemented('relu6');\n    }\n    prelu(x, a) {\n        return notYetImplemented('prelu');\n    }\n    elu(x) {\n        return notYetImplemented('elu');\n    }\n    eluDer(dy, y) {\n        return notYetImplemented('eluDer');\n    }\n    selu(x) {\n        return notYetImplemented('selu');\n    }\n    int(x) {\n        return notYetImplemented('int');\n    }\n    clip(x, min, max) {\n        return notYetImplemented('clip');\n    }\n    abs(x) {\n        return notYetImplemented('abs');\n    }\n    complexAbs(x) {\n        return notYetImplemented('complexAbs');\n    }\n    sigmoid(x) {\n        return notYetImplemented('sigmoid');\n    }\n    softplus(x) {\n        return notYetImplemented('softplus');\n    }\n    sin(x) {\n        return notYetImplemented('sin');\n    }\n    cos(x) {\n        return notYetImplemented('cos');\n    }\n    tan(x) {\n        return notYetImplemented('tan');\n    }\n    asin(x) {\n        return notYetImplemented('asin');\n    }\n    acos(x) {\n        return notYetImplemented('acos');\n    }\n    atan(x) {\n        return notYetImplemented('atan');\n    }\n    atan2(a, b) {\n        return notYetImplemented('atan2');\n    }\n    sinh(x) {\n        return notYetImplemented('sinh');\n    }\n    cosh(x) {\n        return notYetImplemented('cosh');\n    }\n    tanh(x) {\n        return notYetImplemented('tanh');\n    }\n    asinh(x) {\n        return notYetImplemented('asinh');\n    }\n    acosh(x) {\n        return notYetImplemented('acosh');\n    }\n    atanh(x) {\n        return notYetImplemented('atanh');\n    }\n    erf(x) {\n        return notYetImplemented('erf');\n    }\n    step(x, alpha) {\n        return notYetImplemented('step');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedConv2d');\n    }\n    conv2d(x, filter, convInfo) {\n        return notYetImplemented('conv2d');\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv2dDerInput');\n    }\n    conv2dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv2dDerFilter');\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedDepthwiseConv2D');\n    }\n    depthwiseConv2D(input, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2D');\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerInput');\n    }\n    depthwiseConv2DDerFilter(x, dY, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n    conv3d(x, filter, convInfo) {\n        return notYetImplemented('conv3d');\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv3dDerInput');\n    }\n    conv3dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv3dDerFilter');\n    }\n    maxPool(x, convInfo) {\n        return notYetImplemented('maxPool');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPoolBackprop');\n    }\n    avgPool(x, convInfo) {\n        return notYetImplemented('avgPool');\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPoolBackprop');\n    }\n    avgPool3d(x, convInfo) {\n        return notYetImplemented('avgPool3d');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPool3dBackprop');\n    }\n    maxPool3d(x, convInfo) {\n        return notYetImplemented('maxPool3d');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPool3dBackprop');\n    }\n    reshape(x, shape) {\n        return notYetImplemented('reshape');\n    }\n    cast(x, dtype) {\n        return notYetImplemented('cast');\n    }\n    tile(x, reps) {\n        return notYetImplemented('tile');\n    }\n    pad(x, paddings, constantValue) {\n        return notYetImplemented('pad');\n    }\n    transpose(x, perm) {\n        return notYetImplemented('transpose');\n    }\n    gather(x, indices, axis, batchDims = 0) {\n        return notYetImplemented('gather');\n    }\n    gatherND(x, indices) {\n        return notYetImplemented('gatherND');\n    }\n    scatterND(indices, updates, shape) {\n        return notYetImplemented('scatterND');\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        return notYetImplemented('batchToSpaceND');\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        return notYetImplemented('spaceToBatchND');\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        return notYetImplemented('resizeBilinear');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeBilinearBackprop');\n    }\n    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners, halfPixelCenters) {\n        return notYetImplemented('resizeNearestNeighbor');\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        return notYetImplemented('batchNorm');\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        return notYetImplemented('localResponseNormalization4D');\n    }\n    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        return notYetImplemented('LRNGrad');\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        return notYetImplemented('multinomial');\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        return notYetImplemented('oneHot');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        return notYetImplemented('cumsum');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        return notYetImplemented('nonMaxSuppression');\n    }\n    fft(x) {\n        return notYetImplemented('fft');\n    }\n    ifft(x) {\n        return notYetImplemented('ifft');\n    }\n    complex(real, imag) {\n        return notYetImplemented('complex');\n    }\n    real(input) {\n        return notYetImplemented('real');\n    }\n    imag(input) {\n        return notYetImplemented('imag');\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        return notYetImplemented('cropAndResize');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        return notYetImplemented('depthToSpace');\n    }\n    // Aligns with the \"SplitV\" kernel in TensorFlow.\n    split(value, sizeSplits, axis) {\n        return notYetImplemented('split');\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        return notYetImplemented('sparseToDense');\n    }\n    diag(x) {\n        return notYetImplemented('diag');\n    }\n    fill(shape, value, dtype) {\n        return notYetImplemented('fill');\n    }\n    onesLike(x) {\n        return notYetImplemented('onesLike');\n    }\n    zerosLike(x) {\n        return notYetImplemented('zerosLike');\n    }\n    linspace(start, stop, num) {\n        return notYetImplemented('linspace');\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}