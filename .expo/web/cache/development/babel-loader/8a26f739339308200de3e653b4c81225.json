{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from \"./utils\";\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        var n = getParamValue('n', node, tensorMap, context);\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [tfOps.concat(inputs, axis)];\n      }\n\n    case 'Gather':\n      {\n        var input = getParamValue('x', node, tensorMap, context);\n        var indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n      }\n\n    case 'GatherV2':\n      {\n        var _axis = getParamValue('axis', node, tensorMap, context);\n\n        var batchDims = getParamValue('batchDims', node, tensorMap, context);\n\n        var _input = getParamValue('x', node, tensorMap, context);\n\n        var _indices = getParamValue('indices', node, tensorMap, context);\n\n        return [tfOps.gather(_input, tfOps.cast(_indices, 'int32'), _axis, batchDims)];\n      }\n\n    case 'Reverse':\n      {\n        var dims = getParamValue('dims', node, tensorMap, context);\n        var _axis2 = [];\n\n        for (var i = 0; i < dims.length; i++) {\n          if (dims[i]) {\n            _axis2.push(i);\n          }\n        }\n\n        var _input2 = getParamValue('x', node, tensorMap, context);\n\n        return [tfOps.reverse(_input2, _axis2)];\n      }\n\n    case 'ReverseV2':\n      {\n        var _axis3 = getParamValue('axis', node, tensorMap, context);\n\n        var _input3 = getParamValue('x', node, tensorMap, context);\n\n        return [tfOps.reverse(_input3, _axis3)];\n      }\n\n    case 'Slice':\n      {\n        var begin = getParamValue('begin', node, tensorMap, context);\n        var size = getParamValue('size', node, tensorMap, context);\n        return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n\n    case 'StridedSlice':\n      {\n        var _begin = getParamValue('begin', node, tensorMap, context);\n\n        var end = getParamValue('end', node, tensorMap, context);\n        var strides = getParamValue('strides', node, tensorMap, context);\n        var beginMask = getParamValue('beginMask', node, tensorMap, context);\n        var endMask = getParamValue('endMask', node, tensorMap, context);\n        var ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        var newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        var shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        var tensor = getParamValue('x', node, tensorMap, context);\n        return [tfOps.stridedSlice(tensor, _begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n\n    case 'Pack':\n      {\n        return tidy(function () {\n          var axis = getParamValue('axis', node, tensorMap, context);\n          var tensors = getParamValue('tensors', node, tensorMap, context);\n          var shape = tensors[0].shape;\n          var squeezedShape = tfOps.squeeze(tensors[0]).shape;\n          var mapped = tensors.map(function (tensor) {\n            var sameShape = util.arraysEqual(tensor.shape, shape);\n\n            if (!sameShape && !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n\n            return sameShape ? tensor : tfOps.reshape(tensor, shape);\n          });\n          return [tfOps.stack(mapped, axis)];\n        });\n      }\n\n    case 'Unpack':\n      {\n        var _axis4 = getParamValue('axis', node, tensorMap, context);\n\n        var _tensor = getParamValue('tensor', node, tensorMap, context);\n\n        return tfOps.unstack(_tensor, _axis4);\n      }\n\n    case 'Tile':\n      {\n        var reps = getParamValue('reps', node, tensorMap, context);\n        return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n\n    case 'Split':\n    case 'SplitV':\n      {\n        var _axis5 = getParamValue('axis', node, tensorMap, context);\n\n        var numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n\n        var _tensor2 = getParamValue('x', node, tensorMap, context);\n\n        return tfOps.split(_tensor2, numOrSizeSplits, _axis5);\n      }\n\n    case 'ScatterNd':\n      {\n        var _indices2 = getParamValue('indices', node, tensorMap, context);\n\n        var values = getParamValue('values', node, tensorMap, context);\n        var shape = getParamValue('shape', node, tensorMap, context);\n        return [tfOps.scatterND(_indices2, values, shape)];\n      }\n\n    case 'GatherNd':\n      {\n        var x = getParamValue('x', node, tensorMap, context);\n\n        var _indices3 = getParamValue('indices', node, tensorMap, context);\n\n        return [tfOps.gatherND(x, _indices3)];\n      }\n\n    case 'SparseToDense':\n      {\n        var _indices4 = getParamValue('sparseIndices', node, tensorMap, context);\n\n        var _shape = getParamValue('outputShape', node, tensorMap, context);\n\n        var sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        var defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [tfOps.sparseToDense(_indices4, sparseValues, _shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];\n      }\n\n    default:\n      throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n  }\n};\nexport var CATEGORY = 'slice_join';","map":{"version":3,"sources":["../../../src/operations/executors/slice_join_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,IAAlC,EAAwC,IAAxC,QAAmD,uBAAnD;AAEA,OAAO,KAAK,KAAZ,MAAuB,kDAAvB;AAMA,SAAQ,aAAR;AAEA,OAAO,IAAM,SAAS,GAClB,SADS,SACT,CAAC,IAAD,EAAa,SAAb,EACC,OADD,EACwC;EACtC,QAAQ,IAAI,CAAC,EAAb;IACE,KAAK,UAAL;IACA,KAAK,QAAL;MAAe;QACb,IAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;QACA,IAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;QAEA,IAAI,MAAM,GACN,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;QAEA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAT;QACA,OAAO,CAAC,KAAK,CAAC,MAAN,CAAa,MAAb,EAAqB,IAArB,CAAD,CAAP;MACD;;IACD,KAAK,QAAL;MAAe;QACb,IAAM,KAAK,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA3B;QACA,IAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;QAEA,OAAO,CAAC,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,KAAK,CAAC,IAAN,CAAW,OAAX,EAAoB,OAApB,CAApB,EAAkD,CAAlD,CAAD,CAAP;MACD;;IACD,KAAK,UAAL;MAAiB;QACf,IAAM,KAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;;QAEA,IAAM,SAAS,GACX,aAAa,CAAC,WAAD,EAAc,IAAd,EAAoB,SAApB,EAA+B,OAA/B,CADjB;;QAEA,IAAM,MAAK,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA3B;;QACA,IAAM,QAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;;QAEA,OAAO,CAAC,KAAK,CAAC,MAAN,CACJ,MADI,EACG,KAAK,CAAC,IAAN,CAAW,QAAX,EAAoB,OAApB,CADH,EACiC,KADjC,EACuC,SADvC,CAAD,CAAP;MAED;;IACD,KAAK,SAAL;MAAgB;QACd,IAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;QAEA,IAAM,MAAI,GAAG,EAAb;;QACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;UACpC,IAAI,IAAI,CAAC,CAAD,CAAR,EAAa;YACX,MAAI,CAAC,IAAL,CAAU,CAAV;UACD;QACF;;QACD,IAAM,OAAK,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA3B;;QACA,OAAO,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,EAAqB,MAArB,CAAD,CAAP;MACD;;IACD,KAAK,WAAL;MAAkB;QAChB,IAAM,MAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;;QAEA,IAAM,OAAK,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA3B;;QACA,OAAO,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,EAAqB,MAArB,CAAD,CAAP;MACD;;IACD,KAAK,OAAL;MAAc;QAEZ,IAAM,KAAK,GAAG,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CAA3B;QAEA,IAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAA1B;QACA,OAAO,CAAC,KAAK,CAAC,KAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EACoD,KADpD,EAEJ,IAFI,CAAD,CAAP;MAGD;;IACD,KAAK,cAAL;MAAqB;QACnB,IAAM,MAAK,GACP,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;;QAEA,IAAM,GAAG,GACL,aAAa,CAAC,KAAD,EAAQ,IAAR,EAAc,SAAd,EAAyB,OAAzB,CADjB;QAEA,IAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;QAEA,IAAM,SAAS,GACX,aAAa,CAAC,WAAD,EAAc,IAAd,EAAoB,SAApB,EAA+B,OAA/B,CADjB;QAEA,IAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;QAEA,IAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;QAEA,IAAM,WAAW,GACb,aAAa,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,OAAjC,CADjB;QAEA,IAAM,cAAc,GAChB,aAAa,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,SAAzB,EAAoC,OAApC,CADjB;QAGA,IAAM,MAAM,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA5B;QAEA,OAAO,CAAC,KAAK,CAAC,YAAN,CACJ,MADI,EACI,MADJ,EACW,GADX,EACgB,OADhB,EACyB,SADzB,EACoC,OADpC,EAC6C,YAD7C,EAEJ,WAFI,EAES,cAFT,CAAD,CAAP;MAGD;;IACD,KAAK,MAAL;MAAa;QACX,OAAO,IAAI,CAAC,YAAK;UACf,IAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;UAEA,IAAM,OAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;UAIA,IAAM,KAAK,GAAG,OAAO,CAAC,CAAD,CAAP,CAAW,KAAzB;UACA,IAAM,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,CAAD,CAArB,EAA0B,KAAhD;UACA,IAAM,MAAM,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,MAAM,EAAG;YAClC,IAAM,SAAS,GAAG,IAAI,CAAC,WAAL,CAAiB,MAAM,CAAC,KAAxB,EAA+B,KAA/B,CAAlB;;YACA,IAAI,CAAC,SAAD,IACA,CAAC,IAAI,CAAC,WAAL,CACG,KAAK,CAAC,OAAN,CAAc,MAAd,EAAsB,KADzB,EACgC,aADhC,CADL,EAEqD;cACnD,MAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;YACD;;YACD,OAAO,SAAS,GAAG,MAAH,GAAY,KAAK,CAAC,OAAN,CAAc,MAAd,EAAsB,KAAtB,CAA5B;UACD,CARc,CAAf;UASA,OAAO,CAAC,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,IAApB,CAAD,CAAP;QACD,CAnBU,CAAX;MAoBD;;IACD,KAAK,QAAL;MAAe;QACb,IAAM,MAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;;QAEA,IAAM,OAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;;QAEA,OAAO,KAAK,CAAC,OAAN,CAAc,OAAd,EAAsB,MAAtB,CAAP;MACD;;IACD,KAAK,MAAL;MAAa;QACX,IAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;QAEA,OAAO,CAAC,KAAK,CAAC,IAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EACoD,IADpD,CAAD,CAAP;MAED;;IACD,KAAK,OAAL;IACA,KAAK,QAAL;MAAe;QACb,IAAM,MAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;;QAEA,IAAM,eAAe,GACjB,aAAa,CAAC,iBAAD,EAAoB,IAApB,EAA0B,SAA1B,EAAqC,OAArC,CADjB;;QAIA,IAAM,QAAM,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAA5B;;QAEA,OAAO,KAAK,CAAC,KAAN,CAAY,QAAZ,EAAoB,eAApB,EAAqC,MAArC,CAAP;MACD;;IACD,KAAK,WAAL;MAAkB;QAChB,IAAM,SAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;;QAEA,IAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;QAEA,IAAM,KAAK,GACP,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;QAEA,OAAO,CAAC,KAAK,CAAC,SAAN,CAAgB,SAAhB,EAAyB,MAAzB,EAAiC,KAAjC,CAAD,CAAP;MACD;;IACD,KAAK,UAAL;MAAiB;QACf,IAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;;QACA,IAAM,SAAO,GACT,aAAa,CAAC,SAAD,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,OAA7B,CADjB;;QAEA,OAAO,CAAC,KAAK,CAAC,QAAN,CAAe,CAAf,EAAkB,SAAlB,CAAD,CAAP;MACD;;IACD,KAAK,eAAL;MAAsB;QACpB,IAAM,SAAO,GACT,aAAa,CAAC,eAAD,EAAkB,IAAlB,EAAwB,SAAxB,EAAmC,OAAnC,CADjB;;QAGA,IAAM,MAAK,GACP,aAAa,CAAC,aAAD,EAAgB,IAAhB,EAAsB,SAAtB,EAAiC,OAAjC,CADjB;;QAGA,IAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;QAEA,IAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;QAEA,OAAO,CAAC,KAAK,CAAC,aAAN,CACJ,SADI,EACK,YADL,EACmB,MADnB,EAEJ,YAAY,CAAC,KAAb,KAAuB,YAAY,CAAC,KAApC,GACI,YADJ,GAEI,KAAK,CAAC,IAAN,CAAW,YAAX,EAAyB,YAAY,CAAC,KAAtC,CAJA,CAAD,CAAP;MAKD;;IACD;MACE,MAAM,SAAS,gBAAc,IAAI,CAAC,EAAnB,yBAAf;EA/JJ;AAiKD,CApKE;AAsKP,OAAO,IAAM,QAAQ,GAAG,YAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n            const n = getParamValue('n', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            let inputs = getParamValue('tensors', node, tensorMap, context);\n            inputs = inputs.slice(0, n);\n            return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const batchDims = getParamValue('batchDims', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n            const dims = getParamValue('dims', node, tensorMap, context);\n            const axis = [];\n            for (let i = 0; i < dims.length; i++) {\n                if (dims[i]) {\n                    axis.push(i);\n                }\n            }\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n            // tslint:disable-next-line:no-any\n            const begin = getParamValue('begin', node, tensorMap, context);\n            // tslint:disable-next-line:no-any\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n        }\n        case 'StridedSlice': {\n            const begin = getParamValue('begin', node, tensorMap, context);\n            const end = getParamValue('end', node, tensorMap, context);\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\n            const endMask = getParamValue('endMask', node, tensorMap, context);\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n            return tidy(() => {\n                const axis = getParamValue('axis', node, tensorMap, context);\n                const tensors = getParamValue('tensors', node, tensorMap, context);\n                // Reshape the tensors to the first tensor's shape if they don't\n                // match.\n                const shape = tensors[0].shape;\n                const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n                const mapped = tensors.map(tensor => {\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\n                    if (!sameShape &&\n                        !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n                        throw new Error('the input tensors shape does not match');\n                    }\n                    return sameShape ? tensor : tfOps.reshape(tensor, shape);\n                });\n                return [tfOps.stack(mapped, axis)];\n            });\n        }\n        case 'Unpack': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n            const reps = getParamValue('reps', node, tensorMap, context);\n            return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const shape = getParamValue('shape', node, tensorMap, context);\n            return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\n                    defaultValue :\n                    tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'slice_join';\n//# sourceMappingURL=slice_join_executor.js.map"]},"metadata":{},"sourceType":"module"}