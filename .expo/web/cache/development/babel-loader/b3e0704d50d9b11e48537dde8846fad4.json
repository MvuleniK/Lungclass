{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from \"../conv_gpu\";\nimport { conv2dByMatMul, conv2dWithIm2Row } from \"./Conv2D_impl\";\nimport { reshape } from \"./Reshape\";\nexport function conv2d(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n  var out;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x: x,\n      filter: filter,\n      convInfo: convInfo,\n      backend: backend\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x: x,\n      filter: filter,\n      convInfo: convInfo,\n      backend: backend\n    });\n  } else {\n    var program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  var outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend: backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport var conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d\n};","map":{"version":3,"sources":["../../src/kernels/Conv2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,MAAtB,EAAyD,GAAzD,QAAyG,uBAAzG;AAGA,SAAQ,aAAR;AACA,SAAQ,cAAR,EAAwB,gBAAxB;AACA,SAAQ,OAAR;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EAEuE;EAC3E,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAoB,MAApB,CAAO,CAAP;EAAA,IAAU,MAAV,GAAoB,MAApB,CAAU,MAAV;EACA,IAAO,OAAP,GAA+D,KAA/D,CAAO,OAAP;EAAA,IAAgB,GAAhB,GAA+D,KAA/D,CAAgB,GAAhB;EAAA,IAAqB,UAArB,GAA+D,KAA/D,CAAqB,UAArB;EAAA,IAAiC,SAAjC,GAA+D,KAA/D,CAAiC,SAAjC;EAAA,IAA4C,eAA5C,GAA+D,KAA/D,CAA4C,eAA5C;EAEA,IAAM,WAAW,GAAG,YAAY,CAAC,uBAAb,CAAqC,UAArC,CAApB;EACA,IAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EAEb,MAAM,CAAC,KAFM,EAEqC,OAFrC,EAE8C,SAF9C,EAEyD,GAFzD,EAGb,eAHa,EAGI,KAHJ,EAG2B,WAH3B,CAAjB;EAIA,IAAI,GAAJ;;EAEA,IAAI,QAAQ,CAAC,YAAT,KAA0B,CAA1B,IAA+B,QAAQ,CAAC,WAAT,KAAyB,CAAxD,IACA,QAAQ,CAAC,cAAT,KAA4B,CAD5B,IACiC,QAAQ,CAAC,aAAT,KAA2B,CAD5D,IAEA,QAAQ,CAAC,YAAT,KAA0B,CAF1B,IAE+B,QAAQ,CAAC,WAAT,KAAyB,CAFxD,KAGC,QAAQ,CAAC,OAAT,CAAiB,IAAjB,KAA0B,MAA1B,IAAoC,QAAQ,CAAC,OAAT,CAAiB,IAAjB,KAA0B,OAH/D,CAAJ,EAG6E;IAC3E,GAAG,GAAG,cAAc,CAAC;MAAC,CAAC,EAAD,CAAD;MAAI,MAAM,EAAN,MAAJ;MAAY,QAAQ,EAAR,QAAZ;MAAsB,OAAO,EAAP;IAAtB,CAAD,CAApB;EACD,CALD,MAKO,IAAI,GAAG,GAAG,OAAN,CAAc,mBAAd,KAAsC,CAAC,CAAC,KAAF,CAAQ,CAAR,MAAe,CAAzD,EAA4D;IACjE,GAAG,GAAG,gBAAgB,CAAC;MAAC,CAAC,EAAD,CAAD;MAAI,MAAM,EAAN,MAAJ;MAAY,QAAQ,EAAR,QAAZ;MAAsB,OAAO,EAAP;IAAtB,CAAD,CAAtB;EACD,CAFM,MAEA;IACL,IAAM,OAAO,GAAG,IAAI,aAAJ,CAAkB,QAAlB,CAAhB;IACA,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,EAA8C,SAA9C,CAAN;EACD;;EAED,IAAM,WAAW,GACb,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAmB,OAAO,EAAP,OAAnB;IAA4B,KAAK,EAAE;MAAC,KAAK,EAAE,QAAQ,CAAC;IAAjB;EAAnC,CAAD,CADX;EAEA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;EAEA,OAAO,WAAP;AACD;AAED,OAAO,IAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,OAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({ x, filter, convInfo, backend });\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n        out = conv2dWithIm2Row({ x, filter, convInfo, backend });\n    }\n    else {\n        const program = new Conv2DProgram(convInfo);\n        out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'webgl',\n    kernelFunc: conv2d,\n};\n//# sourceMappingURL=Conv2D.js.map"]},"metadata":{},"sourceType":"module"}