{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Asset } from 'expo-asset';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { fetch } from \"./platform_react_native\";\n\nvar BundleResourceHandler = function () {\n  function BundleResourceHandler(modelJson, modelWeightsId) {\n    _classCallCheck(this, BundleResourceHandler);\n\n    this.modelJson = modelJson;\n    this.modelWeightsId = modelWeightsId;\n\n    if (modelJson == null || modelWeightsId == null) {\n      throw new Error('Must pass the model json object and the model weights path.');\n    }\n\n    if (Array.isArray(modelWeightsId)) {\n      throw new Error('Bundle resource IO handler does not currently support loading ' + 'sharded weights');\n    }\n  }\n\n  _createClass(BundleResourceHandler, [{\n    key: \"save\",\n    value: function save() {\n      return _regeneratorRuntime.async(function save$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error('Bundle resource IO handler does not support saving. ' + 'Consider using asyncStorageIO instead');\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var modelJson, weightsAsset;\n      return _regeneratorRuntime.async(function load$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              modelJson = this.modelJson;\n\n              if (!(modelJson.weightsManifest.length > 1)) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error('Bundle resource IO handler does not currently support loading ' + 'sharded weights and the modelJson indicates that this model has ' + 'sharded weights (more than one weights file).');\n\n            case 3:\n              weightsAsset = Asset.fromModule(this.modelWeightsId);\n\n              if (!weightsAsset.uri.match('^http')) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this.loadViaHttp(weightsAsset));\n\n            case 8:\n              return _context2.abrupt(\"return\", this.loadLocalAsset(weightsAsset));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"loadViaHttp\",\n    value: function loadViaHttp(weightsAsset) {\n      var modelJson, url, requestInit, response, weightData, modelArtifacts;\n      return _regeneratorRuntime.async(function loadViaHttp$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              modelJson = this.modelJson;\n              url = weightsAsset.uri;\n              requestInit = undefined;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(fetch(url, requestInit, {\n                isBinary: true\n              }));\n\n            case 5:\n              response = _context3.sent;\n              _context3.next = 8;\n              return _regeneratorRuntime.awrap(response.arrayBuffer());\n\n            case 8:\n              weightData = _context3.sent;\n              modelArtifacts = _extends({}, modelJson);\n              modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n              delete modelArtifacts.weightManifest;\n              modelArtifacts.weightData = weightData;\n              return _context3.abrupt(\"return\", modelArtifacts);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"loadLocalAsset\",\n    value: function loadLocalAsset(weightsAsset) {\n      var RNFS, modelJson, base64Weights, fileName, weightData, modelArtifacts;\n      return _regeneratorRuntime.async(function loadLocalAsset$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              RNFS = require('react-native-fs');\n              modelJson = this.modelJson;\n\n              if (!(Platform.OS === 'android')) {\n                _context4.next = 15;\n                break;\n              }\n\n              fileName = weightsAsset.uri + \".\" + weightsAsset.type;\n              _context4.prev = 4;\n              _context4.next = 7;\n              return _regeneratorRuntime.awrap(RNFS.readFileRes(fileName, 'base64'));\n\n            case 7:\n              base64Weights = _context4.sent;\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](4);\n              throw new Error(\"Error reading resource \" + fileName + \". Make sure the file is\\n            in located in the res/raw folder of the bundle\");\n\n            case 13:\n              _context4.next = 24;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.next = 18;\n              return _regeneratorRuntime.awrap(RNFS.readFile(weightsAsset.uri, 'base64'));\n\n            case 18:\n              base64Weights = _context4.sent;\n              _context4.next = 24;\n              break;\n\n            case 21:\n              _context4.prev = 21;\n              _context4.t1 = _context4[\"catch\"](15);\n              throw new Error(\"Error reading resource \" + weightsAsset.uri + \".\");\n\n            case 24:\n              weightData = util.encodeString(base64Weights, 'base64').buffer;\n              modelArtifacts = _extends({}, modelJson);\n              modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n              delete modelArtifacts.weightManifest;\n              modelArtifacts.weightData = weightData;\n              return _context4.abrupt(\"return\", modelArtifacts);\n\n            case 30:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[4, 10], [15, 21]], Promise);\n    }\n  }]);\n\n  return BundleResourceHandler;\n}();\n\nexport function bundleResourceIO(modelJson, modelWeightsId) {\n  if (typeof modelJson !== 'object') {\n    throw new Error('modelJson must be a JavaScript object (and not a string).\\n' + 'Have you wrapped yor asset path in a require() statment?');\n  }\n\n  if (typeof modelWeightsId !== 'number') {\n    throw new Error('modelWeightsID must be a number.\\n' + 'Have you wrapped yor asset path in a require() statment?');\n  }\n\n  return new BundleResourceHandler(modelJson, modelWeightsId);\n}","map":{"version":3,"sources":["../src/bundle_resource_io.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Asset } from 'expo-asset';\nimport { Platform } from 'react-native';\nimport { fetch } from './platform_react_native';\nclass BundleResourceHandler {\n    constructor(modelJson, modelWeightsId) {\n        this.modelJson = modelJson;\n        this.modelWeightsId = modelWeightsId;\n        if (modelJson == null || modelWeightsId == null) {\n            throw new Error('Must pass the model json object and the model weights path.');\n        }\n        if (Array.isArray(modelWeightsId)) {\n            throw new Error('Bundle resource IO handler does not currently support loading ' +\n                'sharded weights');\n        }\n    }\n    /**\n     * Save model artifacts. This IO handler cannot support writing to the\n     * packaged bundle at runtime and is exclusively for loading a model\n     * that is already packages with the app.\n     */\n    async save() {\n        throw new Error('Bundle resource IO handler does not support saving. ' +\n            'Consider using asyncStorageIO instead');\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const modelJson = this.modelJson;\n        if (modelJson.weightsManifest.length > 1) {\n            throw new Error('Bundle resource IO handler does not currently support loading ' +\n                'sharded weights and the modelJson indicates that this model has ' +\n                'sharded weights (more than one weights file).');\n        }\n        const weightsAsset = Asset.fromModule(this.modelWeightsId);\n        if (weightsAsset.uri.match('^http')) {\n            // In debug/dev mode RN will serve these assets over HTTP\n            return this.loadViaHttp(weightsAsset);\n        }\n        else {\n            // In release mode the assets will be on the file system.\n            return this.loadLocalAsset(weightsAsset);\n        }\n    }\n    async loadViaHttp(weightsAsset) {\n        const modelJson = this.modelJson;\n        // Load the weights\n        const url = weightsAsset.uri;\n        const requestInit = undefined;\n        const response = await fetch(url, requestInit, { isBinary: true });\n        const weightData = await response.arrayBuffer();\n        const modelArtifacts = Object.assign({}, modelJson);\n        modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n        //@ts-ignore\n        delete modelArtifacts.weightManifest;\n        modelArtifacts.weightData = weightData;\n        return modelArtifacts;\n    }\n    async loadLocalAsset(weightsAsset) {\n        // Use a dynamic import here because react-native-fs is not compatible\n        // with managed expo workflow. However the managed expo workflow should\n        // never hit this code path.\n        // tslint:disable-next-line: no-require-imports\n        const RNFS = require('react-native-fs');\n        const modelJson = this.modelJson;\n        let base64Weights;\n        if (Platform.OS === 'android') {\n            // On android we get a resource id instead of a regular path. We need\n            // to load the weights from the res/raw folder using this id.\n            const fileName = `${weightsAsset.uri}.${weightsAsset.type}`;\n            try {\n                base64Weights = await RNFS.readFileRes(fileName, 'base64');\n            }\n            catch (e) {\n                throw new Error(`Error reading resource ${fileName}. Make sure the file is\n            in located in the res/raw folder of the bundle`);\n            }\n        }\n        else {\n            try {\n                base64Weights = await RNFS.readFile(weightsAsset.uri, 'base64');\n            }\n            catch (e) {\n                throw new Error(`Error reading resource ${weightsAsset.uri}.`);\n            }\n        }\n        const weightData = util.encodeString(base64Weights, 'base64').buffer;\n        const modelArtifacts = Object.assign({}, modelJson);\n        modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n        //@ts-ignore\n        delete modelArtifacts.weightManifest;\n        modelArtifacts.weightData = weightData;\n        return modelArtifacts;\n    }\n}\n/**\n * Factory function for BundleResource IOHandler.\n *\n * This `IOHandler` only supports `load`. It is designed to support\n * loading models that have been statically bundled (at compile time)\n * with an app.\n *\n * This IOHandler is not compatible with managed expo apps.\n *\n * ```js\n *  const modelJson = require('../path/to/model.json');\n *  const modelWeights = require('../path/to/model_weights.bin');\n *  async function bundleResourceIOExample() {\n *    const model =\n *      await tf.loadLayersModel(bundleResourceIO(modelJson, modelWeights));\n *\n *     const res = model.predict(tf.randomNormal([1, 28, 28, 1])) as tf.Tensor;\n *  }\n * ```\n *\n * @param modelJson The JSON object for the serialized model.\n * @param modelWeightsId An identifier for the model weights file. This is\n * generally a resourceId or a path to the resource in the app package.\n * This is typically obtained with a `require` statement.\n *\n * See\n * facebook.github.io/react-native/docs/images#static-non-image-resources\n * for more details on how to include static resources into your react-native\n * app including how to configure `metro` to bundle `.bin` files.\n *\n * @returns An instance of `IOHandler`\n *\n * @doc {heading: 'Models', subheading: 'IOHandlers'}\n */\nexport function bundleResourceIO(modelJson, modelWeightsId) {\n    if (typeof modelJson !== 'object') {\n        throw new Error('modelJson must be a JavaScript object (and not a string).\\n' +\n            'Have you wrapped yor asset path in a require() statment?');\n    }\n    if (typeof modelWeightsId !== 'number') {\n        throw new Error('modelWeightsID must be a number.\\n' +\n            'Have you wrapped yor asset path in a require() statment?');\n    }\n    return new BundleResourceHandler(modelJson, modelWeightsId);\n}\n//# sourceMappingURL=bundle_resource_io.js.map"]},"metadata":{},"sourceType":"module"}