{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from \"../argminmax_gpu\";\nimport { ArgMinMaxPackedProgram } from \"../argminmax_packed_gpu\";\nimport { reshape } from \"../kernels/Reshape\";\n\nfunction argReduce(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var batchSize = x.shape[0];\n  var inSize = x.shape[1];\n\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var reduceInfo = {\n    windowSize: windowSize,\n    inSize: inSize,\n    batchSize: batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  var program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  var inputs = [x];\n\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n\n  var output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  var result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  var inSize = inShape[inShape.length - 1];\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  var inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  var output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape.length === x.shape.length) {\n    var result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n\n  return output;\n}\n\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  var axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    var intermediateTensorInfos = [];\n\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(x.shape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        outShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var inSize = util.sizeFromShape(reduceShape);\n    var a2D = reshape({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    var reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    var reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return reshaped;\n  }\n\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"sources":["../../src/kernel_utils/arg_min_max.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n//# sourceMappingURL=arg_min_max.js.map"]},"metadata":{},"sourceType":"module"}