{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from \"../cpu_util\";\nimport { zeros } from \"../utils/zeros_impl\";\nimport { cast } from \"./Cast\";\nimport { identity } from \"./Identity\";\nimport { reshape } from \"./Reshape\";\nimport { transpose } from \"./Transpose\";\nexport function sum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  assertNotComplex(x, 'sum');\n  var $x;\n\n  if (x.dtype === 'bool') {\n    $x = cast({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        dtype: 'int32'\n      }\n    });\n  } else {\n    $x = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n  }\n\n  var xRank = $x.shape.length;\n  var axes = util.parseAxisParam(axis, $x.shape);\n  var permutation = backend_util.getAxesPermutation(axes, xRank);\n  var reductionAxes = axes;\n  var permutedX = $x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: $x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  var result = zeros(backend, outShape, resultDtype);\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var vals = backend.data.get(result.dataId).values;\n  var aVals = backend.data.get(permutedX.dataId).values;\n\n  for (var i = 0; i < vals.length; ++i) {\n    var offset = i * reduceSize;\n    var _sum = 0;\n\n    for (var j = 0; j < reduceSize; ++j) {\n      _sum += aVals[offset + j];\n    }\n\n    vals[i] = _sum;\n  }\n\n  if (keepDims) {\n    var newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    var oldResult = result;\n    result = reshape({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\nexport var sumConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum\n};","map":{"version":3,"sources":["../../src/kernels/Sum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'sum');\n    let $x;\n    if (x.dtype === 'bool') {\n        $x = cast({ inputs: { x }, backend, attrs: { dtype: 'int32' } });\n    }\n    else {\n        $x = identity({ inputs: { x }, backend });\n    }\n    const xRank = $x.shape.length;\n    const axes = util.parseAxisParam(axis, $x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = $x;\n    if (permutation != null) {\n        permutedX =\n            transpose({ inputs: { x: $x }, backend, attrs: { perm: permutation } });\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n    const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n    let result = zeros(backend, outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = backend.data.get(result.dataId).values;\n    const aVals = backend.data.get(permutedX.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let sum = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            sum += aVals[offset + j];\n        }\n        vals[i] = sum;\n    }\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n        const oldResult = result;\n        result = reshape({ inputs: { x: result }, backend, attrs: { shape: newShape } });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    backend.disposeIntermediateTensorInfo($x);\n    if (permutation != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return result;\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'cpu',\n    kernelFunc: sum\n};\n//# sourceMappingURL=Sum.js.map"]},"metadata":{},"sourceType":"module"}