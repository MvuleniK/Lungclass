{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from \"./canvas_util\";\nimport * as gpgpu_util from \"./gpgpu_util\";\nimport * as tex_util from \"./tex_util\";\nimport * as webgl_util from \"./webgl_util\";\nexport var GPGPUContext = function () {\n  function GPGPUContext(gl) {\n    _classCallCheck(this, GPGPUContext);\n\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    var glVersion = env().getNumber('WEBGL_VERSION');\n\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n\n    var COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    var COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      var TEXTURE_FLOAT = 'OES_texture_float';\n      var TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  _createClass(GPGPUContext, [{\n    key: \"debug\",\n    get: function get() {\n      return env().getBool('DEBUG');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n\n      if (this.disposed) {\n        return;\n      }\n\n      if (this.program != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n      }\n\n      if (this.outputTexture != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n      }\n\n      var gl = this.gl;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.finish();\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteFramebuffer(_this.framebuffer);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteBuffer(_this.indexBuffer);\n      });\n      this.disposed = true;\n    }\n  }, {\n    key: \"createFloat32MatrixTexture\",\n    value: function createFloat32MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16MatrixTexture\",\n    value: function createFloat16MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createUnsignedBytesMatrixTexture\",\n    value: function createUnsignedBytesMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"uploadPixelDataToTexture\",\n    value: function uploadPixelDataToTexture(texture, pixels) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n  }, {\n    key: \"uploadDenseMatrixToTexture\",\n    value: function uploadDenseMatrixToTexture(texture, width, height, data) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16PackedMatrixTexture\",\n    value: function createFloat16PackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createPackedMatrixTexture\",\n    value: function createPackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"deleteMatrixTexture\",\n    value: function deleteMatrixTexture(texture) {\n      var _this2 = this;\n\n      this.throwIfDisposed();\n\n      if (this.outputTexture === texture) {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        this.outputTexture = null;\n      }\n\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this2.gl.deleteTexture(texture);\n      });\n    }\n  }, {\n    key: \"downloadByteEncodedFloatMatrixFromOutputTexture\",\n    value: function downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n      var _this3 = this;\n\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(_this3.gl, rows, columns, _this3.textureConfig);\n      });\n    }\n  }, {\n    key: \"downloadPackedMatrixFromBuffer\",\n    value: function downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n      return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n  }, {\n    key: \"downloadFloat32MatrixFromBuffer\",\n    value: function downloadFloat32MatrixFromBuffer(buffer, size) {\n      return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n  }, {\n    key: \"createBufferFromTexture\",\n    value: function createBufferFromTexture(texture, rows, columns) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"createAndWaitForFence\",\n    value: function createAndWaitForFence() {\n      var fenceContext = this.createFence(this.gl);\n      return this.pollFence(fenceContext);\n    }\n  }, {\n    key: \"createFence\",\n    value: function createFence(gl) {\n      var _this4 = this;\n\n      var query;\n      var isFencePassed;\n\n      if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n        var gl2 = gl;\n        var sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n        gl.flush();\n\n        isFencePassed = function isFencePassed() {\n          var status = gl2.clientWaitSync(sync, 0, 0);\n          return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n        };\n\n        query = sync;\n      } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n        query = this.beginQuery();\n        this.endQuery();\n\n        isFencePassed = function isFencePassed() {\n          return _this4.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        };\n      } else {\n        isFencePassed = function isFencePassed() {\n          return true;\n        };\n      }\n\n      return {\n        query: query,\n        isFencePassed: isFencePassed\n      };\n    }\n  }, {\n    key: \"downloadMatrixFromPackedTexture\",\n    value: function downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n      var _this5 = this;\n\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this5.gl, physicalRows, physicalCols);\n      });\n    }\n  }, {\n    key: \"createProgram\",\n    value: function createProgram(fragmentShaderSource) {\n      this.throwIfDisposed();\n      var gl = this.gl;\n      var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n      var vertexShader = gpgpu_util.createVertexShader(gl);\n      var program = webgl_util.createProgram(gl);\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, vertexShader);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, fragmentShader);\n      });\n      webgl_util.linkProgram(gl, program);\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program);\n      }\n\n      if (!this.vertexAttrsAreBound) {\n        this.setProgram(program);\n        this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n      }\n\n      return program;\n    }\n  }, {\n    key: \"deleteProgram\",\n    value: function deleteProgram(program) {\n      var _this6 = this;\n\n      this.throwIfDisposed();\n\n      if (program === this.program) {\n        this.program = null;\n      }\n\n      if (program != null) {\n        webgl_util.callAndCheck(this.gl, function () {\n          return _this6.gl.deleteProgram(program);\n        });\n      }\n    }\n  }, {\n    key: \"setProgram\",\n    value: function setProgram(program) {\n      var _this7 = this;\n\n      this.throwIfDisposed();\n      this.program = program;\n\n      if (this.program != null && this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this7.gl.useProgram(program);\n      });\n    }\n  }, {\n    key: \"getUniformLocation\",\n    value: function getUniformLocation(program, uniformName) {\n      var shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      this.throwIfDisposed();\n\n      if (shouldThrow) {\n        return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n      } else {\n        return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n      }\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(program, attribute) {\n      var _this8 = this;\n\n      this.throwIfDisposed();\n      return webgl_util.callAndCheck(this.gl, function () {\n        return _this8.gl.getAttribLocation(program, attribute);\n      });\n    }\n  }, {\n    key: \"getUniformLocationNoThrow\",\n    value: function getUniformLocationNoThrow(program, uniformName) {\n      this.throwIfDisposed();\n      return this.gl.getUniformLocation(program, uniformName);\n    }\n  }, {\n    key: \"setInputMatrixTexture\",\n    value: function setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n  }, {\n    key: \"setOutputMatrixTexture\",\n    value: function setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n      this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixTexture\",\n    value: function setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n      this.throwIfDisposed();\n\n      var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n          _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2),\n          width = _tex_util$getPackedMa2[0],\n          height = _tex_util$getPackedMa2[1];\n\n      this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegion\",\n    value: function setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixWriteRegion\",\n    value: function setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n  }, {\n    key: \"debugValidate\",\n    value: function debugValidate() {\n      if (this.program != null) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }, {\n    key: \"executeProgram\",\n    value: function executeProgram() {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      var gl = this.gl;\n\n      if (this.debug) {\n        this.debugValidate();\n      }\n\n      webgl_util.callAndCheck(gl, function () {\n        return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      });\n    }\n  }, {\n    key: \"blockUntilAllProgramsCompleted\",\n    value: function blockUntilAllProgramsCompleted() {\n      var _this9 = this;\n\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this9.gl.finish();\n      });\n    }\n  }, {\n    key: \"getQueryTimerExtension\",\n    value: function getQueryTimerExtension() {\n      if (this.disjointQueryTimerExtension == null) {\n        this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n      }\n\n      return this.disjointQueryTimerExtension;\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL2\",\n    value: function getQueryTimerExtensionWebGL2() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL1\",\n    value: function getQueryTimerExtensionWebGL1() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"beginQuery\",\n    value: function beginQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n\n        var _ext = this.getQueryTimerExtensionWebGL2();\n\n        var _query = gl2.createQuery();\n\n        gl2.beginQuery(_ext.TIME_ELAPSED_EXT, _query);\n        return _query;\n      }\n\n      var ext = this.getQueryTimerExtensionWebGL1();\n      var query = ext.createQueryEXT();\n      ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n  }, {\n    key: \"endQuery\",\n    value: function endQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n\n        var _ext2 = this.getQueryTimerExtensionWebGL2();\n\n        gl2.endQuery(_ext2.TIME_ELAPSED_EXT);\n        return;\n      }\n\n      var ext = this.getQueryTimerExtensionWebGL1();\n      ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n  }, {\n    key: \"waitForQueryAndGetTime\",\n    value: function waitForQueryAndGetTime(query) {\n      var _this10 = this;\n\n      return _regeneratorRuntime.async(function waitForQueryAndGetTime$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(util.repeatedTry(function () {\n                return _this10.disposed || _this10.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n              }));\n\n            case 2:\n              return _context.abrupt(\"return\", this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getQueryTime\",\n    value: function getQueryTime(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return null;\n      }\n\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n        return timeElapsedNanos / 1000000;\n      } else {\n        var ext = this.getQueryTimerExtensionWebGL1();\n\n        var _timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n\n        return _timeElapsedNanos / 1000000;\n      }\n    }\n  }, {\n    key: \"isQueryAvailable\",\n    value: function isQueryAvailable(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return true;\n      }\n\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var ext = this.getQueryTimerExtensionWebGL2();\n        var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n        }\n\n        return available && !this.disjoint;\n      } else {\n        var _ext3 = this.getQueryTimerExtensionWebGL1();\n\n        var _available = _ext3.getQueryObjectEXT(query, _ext3.QUERY_RESULT_AVAILABLE_EXT);\n\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(_ext3.GPU_DISJOINT_EXT);\n        }\n\n        return _available && !this.disjoint;\n      }\n    }\n  }, {\n    key: \"pollFence\",\n    value: function pollFence(fenceContext) {\n      var _this11 = this;\n\n      return new Promise(function (resolve) {\n        _this11.addItemToPoll(function () {\n          return fenceContext.isFencePassed();\n        }, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"pollItems\",\n    value: function pollItems() {\n      var index = linearSearchLastTrue(this.itemsToPoll.map(function (x) {\n        return x.isDoneFn;\n      }));\n\n      for (var i = 0; i <= index; ++i) {\n        var resolveFn = this.itemsToPoll[i].resolveFn;\n        resolveFn();\n      }\n\n      this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n  }, {\n    key: \"addItemToPoll\",\n    value: function addItemToPoll(isDoneFn, resolveFn) {\n      var _this12 = this;\n\n      this.itemsToPoll.push({\n        isDoneFn: isDoneFn,\n        resolveFn: resolveFn\n      });\n\n      if (this.itemsToPoll.length > 1) {\n        return;\n      }\n\n      util.repeatedTry(function () {\n        _this12.pollItems();\n\n        return _this12.itemsToPoll.length === 0;\n      });\n    }\n  }, {\n    key: \"bindTextureToFrameBuffer\",\n    value: function bindTextureToFrameBuffer(texture) {\n      this.throwIfDisposed();\n      webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    }\n  }, {\n    key: \"unbindTextureToFrameBuffer\",\n    value: function unbindTextureToFrameBuffer() {\n      if (this.outputTexture != null) {\n        webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n\n        if (this.debug) {\n          webgl_util.validateFramebuffer(this.gl);\n        }\n      } else {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      }\n    }\n  }, {\n    key: \"downloadMatrixDriver\",\n    value: function downloadMatrixDriver(texture, downloadAndDecode) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = downloadAndDecode();\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"setOutputMatrixTextureDriver\",\n    value: function setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n      this.throwIfDisposed();\n      var gl = this.gl;\n      webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n\n      if (this.debug) {\n        webgl_util.validateFramebuffer(gl);\n      }\n\n      this.outputTexture = outputMatrixTextureMaybePacked;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.viewport(0, 0, width, height);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.scissor(0, 0, width, height);\n      });\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegionDriver\",\n    value: function setOutputMatrixWriteRegionDriver(x, y, width, height) {\n      var _this13 = this;\n\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this13.gl.scissor(x, y, width, height);\n      });\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.disposed) {\n        throw new Error('Attempted to use disposed GPGPUContext.');\n      }\n    }\n  }, {\n    key: \"throwIfNoProgram\",\n    value: function throwIfNoProgram() {\n      if (this.program == null) {\n        throw new Error('No GPU program is currently set.');\n      }\n    }\n  }]);\n\n  return GPGPUContext;\n}();\nexport function linearSearchLastTrue(arr) {\n  var i = 0;\n\n  for (; i < arr.length; ++i) {\n    var isDone = arr[i]();\n\n    if (!isDone) {\n      break;\n    }\n  }\n\n  return i - 1;\n}","map":{"version":3,"sources":["../src/gpgpu_context.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShaderSource) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n        const vertexShader = gpgpu_util.createVertexShader(gl);\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        });\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n//# sourceMappingURL=gpgpu_context.js.map"]},"metadata":{},"sourceType":"module"}