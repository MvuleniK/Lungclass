{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nvar getBroadcastDims = backend_util.getBroadcastDims;\nimport { getGlslDifferences } from \"./glsl_version\";\nimport * as shader_util from \"./shader_compiler_util\";\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n  var prefixSnippets = [];\n  inputsInfo.forEach(function (x) {\n    var size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \" + x.name + (size > 1 ? \"[\" + size + \"]\" : '') + \";\");\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \" + x.name + \";\");\n      prefixSnippets.push(\"uniform int offset\" + x.name + \";\");\n    }\n  });\n  var inputPrefixSnippet = prefixSnippets.join('\\n');\n  var inputSamplingSnippet = inputsInfo.map(function (x) {\n    return getInputSamplingSnippet(x, outputShape, usesPackedTextures);\n  }).join('\\n');\n  var outTexShape = outputShape.texShape;\n  var glsl = getGlslDifferences();\n  var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  var outputSamplingSnippet;\n  var floatTextureSetOutputSnippet;\n  var shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  var source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo) {\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n\n    case 1:\n      return getSampler1D(inInfo);\n\n    case 2:\n      return getSampler2D(inInfo);\n\n    case 3:\n      return getSampler3D(inInfo);\n\n    case 4:\n      return getSampler4D(inInfo);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(shape.length + \"-D input sampling\" + \" is not yet supported\");\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo) {\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo);\n\n    case 2:\n      return getPackedSampler2D(inInfo);\n\n    case 3:\n      return getPackedSampler3D(inInfo);\n\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  var usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  var inShape = inInfo.shapeInfo.logicalShape;\n  var outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(outShape.length + \"-D output sampling is not yet supported\");\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \" + glsl.texture2D + \"(textureSampler, uv).r;\\n    }\\n  \";\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \" + glsl.output + \" = vec4(val, 0, 0, 0);\\n    }\\n  \";\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \" + glsl.output + \" = val;\\n    }\\n  \";\n}\n\nfunction getShaderPrefix(glsl) {\n  var SHADER_PREFIX = glsl.version + \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \" + glsl.varyingFs + \" vec2 resultUV;\\n    \" + glsl.defineOutput + \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \" + glsl.defineSpecialNaN + \"\\n    \" + glsl.defineSpecialInf + \"\\n    \" + glsl.defineRound + \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \" + SAMPLE_1D_SNIPPET + \"\\n    \" + SAMPLE_2D_SNIPPET + \"\\n    \" + SAMPLE_3D_SNIPPET + \"\\n  \";\n  return SHADER_PREFIX;\n}\n\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\n\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\n\nfunction getOutputPacked1DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \" + packedTexShape[1] + \".0);\\n      }\\n    \";\n  }\n\n  if (packedTexShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \" + packedTexShape[0] + \".0);\\n      }\\n    \";\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + packedTexShape[0] + \", \" + packedTexShape[1] + \"));\\n      return 2 * (resTexRC.x * \" + packedTexShape[1] + \" + resTexRC.y);\\n    }\\n  \";\n}\n\nfunction getOutput1DCoords(shape, texShape) {\n  if (texShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + texShape[1] + \".0);\\n      }\\n    \";\n  }\n\n  if (texShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + texShape[0] + \".0);\\n      }\\n    \";\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      return resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n    }\\n  \";\n}\n\nfunction getOutputPacked3DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + packedTexShape[0] + \", \" + packedTexShape[1] + \"));\\n      int index = resTexRC.x * \" + packedTexShape[1] + \" + resTexRC.y;\\n\\n      int b = index / \" + texelsInBatch + \";\\n      index -= b * \" + texelsInBatch + \";\\n\\n      int r = 2 * (index / \" + texelsInLogicalRow + \");\\n      int c = imod(index, \" + texelsInLogicalRow + \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n}\n\nfunction getOutput3DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      \" + coordsFromIndexSnippet + \"\\n      return ivec3(r, c, d);\\n    }\\n  \";\n}\n\nfunction getOutputPackedNDCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  var texelsInBatchN = texelsInBatch;\n  var batches = \"\";\n  var coords = 'b, r, c';\n\n  for (var b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\" + b + \" = index / \" + texelsInBatchN + \";\\n      index -= b\" + b + \" * \" + texelsInBatchN + \";\\n    \" + batches;\n    coords = \"b\" + b + \", \" + coords;\n  }\n\n  return \"\\n    ivec\" + shape.length + \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + packedTexShape[0] + \", \" + packedTexShape[1] + \"));\\n      int index = resTexRC.x * \" + packedTexShape[1] + \" + resTexRC.y;\\n\\n      \" + batches + \"\\n\\n      int b = index / \" + texelsInBatch + \";\\n      index -= b * \" + texelsInBatch + \";\\n\\n      int r = 2 * (index / \" + texelsInLogicalRow + \");\\n      int c = imod(index, \" + texelsInLogicalRow + \") * 2;\\n\\n      return ivec\" + shape.length + \"(\" + coords + \");\\n    }\\n  \";\n}\n\nfunction getOutput4DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      \" + coordsFromIndexSnippet + \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\" + texShape[0] + \",\\n                             \" + texShape[1] + \"));\\n\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      \" + coordsFromIndexSnippet + \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \";\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      \" + coordsFromIndexSnippet + \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \";\n}\n\nfunction getOutputPacked2DCoords(shape, texShape) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\" + packedTexShape[0] + \", \" + packedTexShape[1] + \"));\\n      }\\n    \";\n  }\n\n  var texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + packedTexShape[0] + \", \" + packedTexShape[1] + \"));\\n\\n      int index = resTexRC.x * \" + packedTexShape[1] + \" + resTexRC.y;\\n      int r = 2 * (index / \" + texelsInLogicalRow + \");\\n      int c = imod(index, \" + texelsInLogicalRow + \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n}\n\nfunction getOutput2DCoords(shape, texShape) {\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      }\\n    \";\n  }\n\n  if (shape[1] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n  }\n\n  if (shape[0] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n  }\n\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + shape[1] + \";\\n      int c = index - r * \" + shape[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\" + texName;\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \" + funcName + \"() {\\n      return \" + glsl.texture2D + \"(\" + texName + \", halfCR);\\n    }\\n  \";\n}\n\nfunction getSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \" + funcName + \"() {return \" + texName + \";}\";\n  }\n\n  var _inputInfo$shapeInfo$ = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      texNumR = _inputInfo$shapeInfo$[0],\n      texNumC = _inputInfo$shapeInfo$[1];\n\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \" + funcName + \"() {\\n        return sampleTexture(\" + texName + \", halfCR);\\n      }\\n    \";\n  }\n\n  var _inputInfo$shapeInfo$2 = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      tNumR = _inputInfo$shapeInfo$2[0],\n      tNumC = _inputInfo$shapeInfo$2[1];\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \" + funcName + \"() {\\n      vec2 uv = uvFromFlat(\" + tNumR + \", \" + tNumC + \", \" + offset + \");\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getPackedSampler1D(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \" + funcName + \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \" + packedTexShape[0] + \", \" + packedTexShape[1] + \", index);\\n      return \" + glsl.texture2D + \"(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler1D(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int index) {\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var tNumR = texShape[0];\n  var tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \" + funcName + \"(int index) {\\n        return sampleTexture(\" + texName + \", halfCR);\\n      }\\n    \";\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \" + offset + \") + 0.5) / \" + tNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  if (tNumR === 1) {\n    return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2((float(index + \" + offset + \") + 0.5) / \" + tNumC + \".0, 0.5);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  return \"\\n    float \" + funcName + \"(int index) {\\n      vec2 uv = uvFromFlat(\" + tNumR + \", \" + tNumC + \", index + \" + offset + \");\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getPackedSampler2D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return \"\\n      vec4 \" + funcName + \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n\\n        return \" + glsl.texture2D + \"(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \" + funcName + \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\" + valuesPerRow + \", \" + packedTexShape[0] + \", \" + packedTexShape[1] + \", row, col);\\n      return \" + glsl.texture2D + \"(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler2D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    var _texNumR = texShape[0];\n    var _texNumC = texShape[1];\n    return \"\\n    float \" + funcName + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + _texNumC + \".0, \" + _texNumR + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n  }\n\n  var _util$squeezeShape = util.squeezeShape(shape),\n      newShape = _util$squeezeShape.newShape,\n      keptDims = _util$squeezeShape.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col'];\n    return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\" + shape[1] + \", 1)));\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    return \"\\n    float \" + funcName + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + offset + \"), vec3(\" + shape[1] + \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \" + texNumR + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n  }\n\n  if (texNumR === 1) {\n    return \"\\n    float \" + funcName + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + offset + \"), vec3(\" + shape[1] + \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \" + texNumC + \".0, 0.5);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n  }\n\n  return \"\\n  float \" + funcName + \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \" + shape[1] + \" + col + \" + offset + \";\\n    vec2 uv = uvFromFlat(\" + texNumR + \", \" + texNumC + \", index);\\n    return sampleTexture(\" + texName + \", uv);\\n  }\\n\";\n}\n\nfunction getPackedSampler3D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    var squeezedShape = shape.slice(1);\n    var keptDims = [1, 2];\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['b', 'row', 'col'];\n    return \"\\n        \" + getPackedSamplerFromInInfo(newInputInfo) + \"\\n        vec4 \" + funcName + \"(int b, int row, int col) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n  }\n\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \" + funcName + \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \" + texNumR + \", \" + texNumC + \", \" + texelsInBatch + \", \" + valuesPerRow + \", b, row, col);\\n      return \" + glsl.texture2D + \"(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler3D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride0 = shape[1] * shape[2];\n  var stride1 = shape[2];\n\n  var _util$squeezeShape2 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape2.newShape,\n      keptDims = _util$squeezeShape2.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col', 'depth'];\n    return \"\\n        \" + getSamplerFromInInfo(newInputInfo) + \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\" + stride0 + \", \" + stride1 + \", 1)));\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    return \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\" + stride1 + \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n          return sampleTexture(\" + texName + \", uv);\\n        }\\n      \";\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\" + shape[1] + \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \" + stride0 + \" + col * \" + stride1 + \" + depth + \" + offset + \";\\n        vec2 uv = uvFromFlat(\" + texNumR + \", \" + texNumC + \", index);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n  \";\n}\n\nfunction getPackedSamplerND(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var rank = shape.length;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  var params = \"int b, int row, int col\";\n  var index = \"b * \" + texelsInBatch + \" + (row / 2) * \" + valuesPerRow + \" + (col / 2)\";\n\n  for (var b = 2; b < rank - 1; b++) {\n    params = \"int b\" + b + \", \" + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\" + b + \" * \" + texelsInBatch + \" + \" + index;\n  }\n\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \" + funcName + \"(\" + params + \") {\\n      int index = \" + index + \";\\n      int texR = index / \" + texNumC + \";\\n      int texC = index - texR * \" + texNumC + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \", \" + texNumR + \");\\n      return \" + glsl.texture2D + \"(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler4D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride2 = shape[3];\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape3 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape3.newShape,\n      keptDims = _util$squeezeShape3.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\" + stride0 + \", \" + stride1 + \", \" + stride2 + \", 1)));\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\" + stride1 + \", \" + stride2 + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\" + shape[1] * shape[2] + \", \" + shape[2] + \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + stride0 + \" + col * \" + stride1 + \" +\\n          depth * \" + stride2 + \" + depth2;\\n      vec2 uv = uvFromFlat(\" + texNumR + \", \" + texNumC + \", index + \" + offset + \");\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler5D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride3 = shape[4];\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape4 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape4.newShape,\n      keptDims = _util$squeezeShape4.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + stride0 + \", \" + stride1 + \", \" + stride2 + \", \" + stride3 + \")) +\\n          depth3;\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\" + stride1 + \", \" + stride2 + \", \" + stride3 + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + shape[1] * shape[2] * shape[3] + \",\\n               \" + shape[2] * shape[3] + \", \" + shape[3] + \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + stride0 + \" + col * \" + stride1 + \" + depth * \" + stride2 + \" +\\n          depth2 * \" + stride3 + \" + depth3 + \" + offset + \";\\n      vec2 uv = uvFromFlat(\" + texNumR + \", \" + texNumC + \", index);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getSampler6D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  var _util$squeezeShape5 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape5.newShape,\n      keptDims = _util$squeezeShape5.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n  }\n\n  var stride4 = shape[5];\n  var stride3 = shape[4] * stride4;\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + stride0 + \", \" + stride1 + \", \" + stride2 + \", \" + stride3 + \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\" + stride4 + \", 1)));\\n        \" + getUniformSampler(inputInfo) + \"\\n      }\\n    \";\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\" + stride1 + \", \" + stride2 + \", \" + stride3 + \", \" + stride4 + \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\" + shape[1] * shape[2] * shape[3] * shape[4] + \",\\n               \" + shape[2] * shape[3] * shape[4] + \",\\n               \" + shape[3] * shape[4] + \",\\n               \" + shape[4] + \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \" + funcName + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + stride0 + \" + col * \" + stride1 + \" + depth * \" + stride2 + \" +\\n          depth2 * \" + stride3 + \" + depth3 * \" + stride4 + \" + depth4 + \" + offset + \";\\n      vec2 uv = uvFromFlat(\" + texNumR + \", \" + texNumC + \", index);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\n\nfunction getUniformSampler(inputInfo) {\n  var texName = inputInfo.name;\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return \"return \" + texName + \";\";\n  }\n\n  return \"\\n    for (int i = 0; i < \" + inSize + \"; i++) {\\n      if (i == index) {\\n        return \" + texName + \"[i];\\n      }\\n    }\\n  \";\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var type = getCoordsDataType(outRank);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\" + fields[d + rankDiff] + \" = 0;\";\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\" + fields[i + rankDiff];\n    }).join(', ');\n  }\n\n  var output = \"return outputValue;\";\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  var isInputScalar = inSize === 1;\n  var outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  var isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    var rows = inRank - 2;\n    var cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n\n  return \"\\n    vec4 \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      vec4 outputValue = get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n      \" + output + \"\\n    }\\n  \";\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var outTexShape = outShapeInfo.texShape;\n  var inTexShape = inputInfo.shapeInfo.texShape;\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \" + funcName + \"() {\\n        return sampleTexture(\" + texName + \", resultUV);\\n      }\\n    \";\n  }\n\n  var type = getCoordsDataType(outRank);\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\" + fields[d + rankDiff] + \" = 0;\";\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\" + fields[i + rankDiff];\n    }).join(', ');\n  }\n\n  return \"\\n    float \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      return get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n    }\\n  \";\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \" + rank + \" is not yet supported\");\n  }\n}\n\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n  var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(function (d) {\n    return params[d];\n  }).join(', ');\n}","map":{"version":3,"sources":["../src/shader_compiler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n    });\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (usesPackedTextures) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo);\n        case 2:\n            return getPackedSampler2D(inInfo);\n        case 3:\n            return getPackedSampler3D(inInfo);\n        default:\n            return getPackedSamplerND(inInfo);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n//# sourceMappingURL=shader_compiler.js.map"]},"metadata":{},"sourceType":"module"}