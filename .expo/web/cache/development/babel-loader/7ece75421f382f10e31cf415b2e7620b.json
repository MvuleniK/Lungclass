{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport var DepthwiseConvPacked2DProgram = _createClass(function DepthwiseConvPacked2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  _classCallCheck(this, DepthwiseConvPacked2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = convInfo.outShape;\n  var xNumRows = convInfo.inHeight;\n  var xNumCols = convInfo.inWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var texelsAcross = filterWidth;\n  var mainLoop = \"int xR; int xC; int xCOffset;\";\n\n  for (var r = 0; r < filterHeight; r++) {\n    for (var c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n          vec4 xTexelR\" + r + \"C\" + c * 2 + \" = vec4(0.);\\n          vec4 wR\" + r + \"C\" + c + \" = vec4(0.);\\n          vec4 xR\" + r + \"C\" + c + \" = vec4(0.);\";\n    }\n  }\n\n  for (var _r = 0; _r < filterHeight; _r++) {\n    for (var texelC = 0; texelC < texelsAcross; texelC++) {\n      var _c = texelC * 2;\n\n      mainLoop += \"\\n          xR = xRCorner + \" + _r * dilationHeight + \";\\n          xC = xCCorner + \" + _c * dilationWidth + \";\\n        \";\n\n      if (strideWidth === 1) {\n        if (_c < filterWidth) {\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \" + xNumRows + \" && xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + _c + \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + xNumCols + \") {\\n                    xTexelR\" + _r + \"C\" + _c + \".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\" + _r + \"C\" + _c + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \" + xNumRows + \" && xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + xNumCols + \") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\" + _r + \"C\" + _c + \" = vec4(previous.zw, xTexelR\" + _r + \"C\" + _c + \".xy);\\n                } else {\\n                  xR\" + _r + \"C\" + _c + \" = vec4(0, 0, xTexelR\" + _r + \"C\" + _c + \".xy);\\n                }\\n              \";\n          } else {\n            mainLoop += \"\\n                if(xR >= 0 && xR < \" + xNumRows + \" && xC >= 0 && xC < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + _c + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + _r + \"C\" + _c + \" = vec4(0.);\\n                }\\n\\n                xR\" + _r + \"C\" + _c + \" = xTexelR\" + _r + \"C\" + _c + \";\\n              \";\n          }\n\n          if (_c + 1 < filterWidth) {\n            var nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += \"\\n                  xCOffset = xC + \" + padLeft % 2 + \" + \" + nextTexelOffset + \";\\n\\n                  if(xR >= 0 && xR < \" + xNumRows + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                    xTexelR\" + _r + \"C\" + (_c + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \";\n\n              if (dilationWidth > 1) {\n                mainLoop += \"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \" + xNumRows + \" &&\\n                      xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                      xTexelR\" + _r + \"C\" + _c + \" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\" + _r + \"C\" + _c + \" = vec4(0.);\\n                    }\\n                  \";\n              }\n\n              mainLoop += \"\\n                  xR\" + _r + \"C\" + (_c + 1) + \" = vec4(\\n                    xTexelR\" + _r + \"C\" + _c + \".zw, xTexelR\" + _r + \"C\" + (_c + 2) + \".xy);\\n                \";\n            } else {\n              mainLoop += \"\\n                  xCOffset = xC + \" + nextTexelOffset + \";\\n\\n                  if(xR >= 0 && xR < \" + xNumRows + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                    xTexelR\" + _r + \"C\" + (_c + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\" + _r + \"C\" + (_c + 1) + \" = xTexelR\" + _r + \"C\" + (_c + 2) + \";\\n                \";\n            }\n          }\n        }\n      } else {\n        if (_c < filterWidth) {\n          mainLoop += \"\\n              if(xR >= 0 && xR < \" + xNumRows + \") {\\n            \";\n\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                xCOffset = xC + 1 - \" + strideWidth + \";\\n                if(xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + _c + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + _r + \"C\" + _c + \" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + (_c + 2) + \" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\" + _r + \"C\" + (_c + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + _r + \"C\" + _c + \" = vec4(\\n                  xTexelR\" + _r + \"C\" + _c + \".zw, xTexelR\" + _r + \"C\" + (_c + 2) + \".zw);\\n              \";\n\n            if (_c + 1 < filterWidth) {\n              mainLoop += \"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \" + strideWidth + \";\\n                  if(xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\" + _r + \"C\" + (_c + 1) + \" = vec4(xTexelR\" + _r + \"C\" + (_c + 2) + \".xy, final.xy);\\n                \";\n            }\n          } else {\n            mainLoop += \"\\n                if(xC >= 0 && xC < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + _c + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + _r + \"C\" + _c + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \" + strideWidth + \";\\n                if(xCOffset >= 0 && xCOffset < \" + xNumCols + \") {\\n                  xTexelR\" + _r + \"C\" + (_c + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + _r + \"C\" + (_c + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + _r + \"C\" + _c + \" = vec4(\\n                  xTexelR\" + _r + \"C\" + _c + \".xy, xTexelR\" + _r + \"C\" + (_c + 2) + \".xy);\\n              \";\n\n            if (_c + 1 < filterWidth) {\n              mainLoop += \"\\n                  xR\" + _r + \"C\" + (_c + 1) + \" = vec4(\\n                    xTexelR\" + _r + \"C\" + _c + \".zw, xTexelR\" + _r + \"C\" + (_c + 2) + \".zw);\\n                \";\n            }\n          }\n\n          mainLoop += \"}\";\n        }\n      }\n\n      if (_c < filterWidth) {\n        mainLoop += \"\\n            vec4 wTexelR\" + _r + \"C\" + _c + \" = getW(\" + _r + \", \" + _c + \", d1, q);\\n            wR\" + _r + \"C\" + _c + \" = vec4(wTexelR\" + _r + \"C\" + _c + \".xz, wTexelR\" + _r + \"C\" + _c + \".xz);\\n          \";\n\n        if (_c + 1 < filterWidth) {\n          mainLoop += \"\\n              vec4 wTexelR\" + _r + \"C\" + (_c + 1) + \" = getW(\" + _r + \", \" + (_c + 1) + \", d1, q);\\n              wR\" + _r + \"C\" + (_c + 1) + \" =\\n                vec4(wTexelR\" + _r + \"C\" + (_c + 1) + \".xz, wTexelR\" + _r + \"C\" + (_c + 1) + \".xz);\";\n        }\n      }\n    }\n  }\n\n  for (var _r2 = 0; _r2 < filterHeight; _r2++) {\n    for (var _c2 = 0; _c2 < filterWidth; _c2++) {\n      mainLoop += \"dotProd += xR\" + _r2 + \"C\" + _c2 + \" * wR\" + _r2 + \"C\" + _c2 + \";\";\n    }\n  }\n\n  var activationSnippet = '',\n      applyActivationSnippet = '';\n\n  if (activation) {\n    if (hasPreluActivation) {\n      activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \" + activation + \"\\n        }\";\n    } else if (hasLeakyReluAlpha) {\n      activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          \" + activation + \"\\n        }\";\n    } else {\n      activationSnippet = \"vec4 activation(vec4 x) {\\n          \" + activation + \"\\n        }\";\n    }\n\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n\n  if (hasPreluActivation) {\n    this.variableNames.push('preluActivationWeights');\n  }\n\n  if (hasLeakyReluAlpha) {\n    this.variableNames.push('leakyreluAlpha');\n  }\n\n  this.userCode = \"\\n      \" + activationSnippet + \"\\n\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \" + mainLoop + \"\\n\\n        vec4 result = dotProd;\\n        \" + addBiasSnippet + \"\\n        \" + applyActivationSnippet + \"\\n        setOutput(result);\\n      }\\n    \";\n});","map":{"version":3,"sources":["../src/conv_packed_gpu_depthwise.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `int xR; int xC; int xCOffset;`;\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n            }\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        for (let r = 0; r < filterHeight; r++) {\n            for (let texelC = 0; texelC < texelsAcross; texelC++) {\n                const c = texelC * 2;\n                mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n                if (strideWidth === 1) {\n                    if (c < filterWidth) {\n                        // If padding is odd, the outer texels have to be composed.\n                        if (padLeft % 2 === 1) {\n                            // TODO: Ensure vec4 previous does not result in redundant sample,\n                            // and avoid setting xTexelRC's that exceed the boundary in the\n                            // first place rather than resetting them to vec4(0)).\n                            // To compute xCOffset:\n                            // - If padding is odd, we must add 1 to ensure we ask for an\n                            // even-numbered row.\n                            // - We subtract 2 to access the previous texel.\n                            mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n                        }\n                        else {\n                            // Padding is even, so xRC corresponds to a single texel.\n                            mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n                        }\n                        if (c + 1 < filterWidth) {\n                            // If dilation is even, the second entry should match the first\n                            // (either both are composed or both are single samples). But if\n                            // dilation is odd, then the second entry should be the opposite\n                            // of the first (if the first is composed, the second is a single\n                            // sample, and vice versa.)\n                            const nextTexelOffset = padLeft % 2 === 0 ?\n                                util.nearestLargerEven(dilationWidth) :\n                                dilationWidth;\n                            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n                                // If dilation > 1 then the xRC's will not be able to share any\n                                // values, so each xRC will require two unique calls to getX.\n                                if (dilationWidth > 1) {\n                                    mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                                }\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n                            }\n                            else {\n                                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n                            }\n                        }\n                    }\n                }\n                else { // stride > 1\n                    if (c < filterWidth) {\n                        mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n                        // Depending on whether padLeft is even or odd, we want either the\n                        // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n                        // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n                        // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n                        // need to come from the xy channels of a new texel, hence the `vec4\n                        // final` initialized below.\n                        if (padLeft % 2 === 1) {\n                            mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n                            }\n                        }\n                        else {\n                            mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n                            }\n                        }\n                        mainLoop += `}`;\n                    }\n                }\n                if (c < filterWidth) {\n                    mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n                    if (c + 1 < filterWidth) {\n                        mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n                    }\n                }\n            }\n        }\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n            }\n        }\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_packed_gpu_depthwise.js.map"]},"metadata":{},"sourceType":"module"}