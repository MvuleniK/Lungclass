{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env, tensor, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from \"./lazy_iterator\";\nexport var MicrophoneIterator = function (_LazyIterator) {\n  _inherits(MicrophoneIterator, _LazyIterator);\n\n  var _super = _createSuper(MicrophoneIterator);\n\n  function MicrophoneIterator(microphoneConfig) {\n    var _this;\n\n    _classCallCheck(this, MicrophoneIterator);\n\n    _this = _super.call(this);\n    _this.microphoneConfig = microphoneConfig;\n    _this.isClosed = false;\n    _this.fftSize = microphoneConfig.fftSize || 1024;\n    var fftSizeLog2 = Math.log2(_this.fftSize);\n\n    if (_this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 || !Number.isInteger(fftSizeLog2)) {\n      throw new Error(\"Invalid fftSize: it must be a power of 2 between \" + (\"2 to 4 and 2 to 14, but got \" + _this.fftSize));\n    }\n\n    _this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n    _this.sampleRateHz = microphoneConfig.sampleRateHz;\n    _this.columnTruncateLength = microphoneConfig.columnTruncateLength || _this.fftSize;\n    _this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n    _this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n    _this.includeSpectrogram = microphoneConfig.includeSpectrogram === false ? false : true;\n    _this.includeWaveform = microphoneConfig.includeWaveform === true ? true : false;\n\n    if (!_this.includeSpectrogram && !_this.includeWaveform) {\n      throw new Error('Both includeSpectrogram and includeWaveform are false. ' + 'At least one type of data should be returned.');\n    }\n\n    return _this;\n  }\n\n  _createClass(MicrophoneIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return \"microphone\";\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var ctxConstructor, streamSource;\n      return _regeneratorRuntime.async(function start$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({\n                audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints,\n                video: false\n              }));\n\n            case 3:\n              this.stream = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              throw new Error(\"Error thrown while initializing video stream: \" + _context.t0.message);\n\n            case 9:\n              if (this.stream) {\n                _context.next = 11;\n                break;\n              }\n\n              throw new Error('Could not obtain audio from microphone.');\n\n            case 11:\n              ctxConstructor = window.AudioContext || window.webkitAudioContext;\n              this.audioContext = new ctxConstructor();\n\n              if (this.sampleRateHz) {\n                _context.next = 17;\n                break;\n              }\n\n              this.sampleRateHz = this.audioContext.sampleRate;\n              _context.next = 19;\n              break;\n\n            case 17:\n              if (!(this.audioContext.sampleRate !== this.sampleRateHz)) {\n                _context.next = 19;\n                break;\n              }\n\n              throw new Error(\"Mismatch in sampling rate: \" + (\"Expected: \" + this.sampleRateHz + \"; \") + (\"Actual: \" + this.audioContext.sampleRate));\n\n            case 19:\n              streamSource = this.audioContext.createMediaStreamSource(this.stream);\n              this.analyser = this.audioContext.createAnalyser();\n              this.analyser.fftSize = this.fftSize * 2;\n              this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n              streamSource.connect(this.analyser);\n              this.freqData = new Float32Array(this.fftSize);\n              this.timeData = new Float32Array(this.fftSize);\n              return _context.abrupt(\"return\");\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 6]], Promise);\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var spectrogramTensor, waveformTensor, audioDataQueue, freqData, timeData;\n      return _regeneratorRuntime.async(function next$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.isClosed) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                value: null,\n                done: true\n              });\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(this.getAudioData());\n\n            case 4:\n              audioDataQueue = _context2.sent;\n\n              if (this.includeSpectrogram) {\n                freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n                spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n              }\n\n              if (this.includeWaveform) {\n                timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n                waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n              }\n\n              return _context2.abrupt(\"return\", {\n                value: {\n                  'spectrogram': spectrogramTensor,\n                  'waveform': waveformTensor\n                },\n                done: false\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"capture\",\n    value: function capture() {\n      return _regeneratorRuntime.async(function capture$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.next());\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent.value);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getAudioData\",\n    value: function getAudioData() {\n      var _this2 = this;\n\n      var freqDataQueue, timeDataQueue, currentFrames;\n      return _regeneratorRuntime.async(function getAudioData$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              freqDataQueue = [];\n              timeDataQueue = [];\n              currentFrames = 0;\n              return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                var intervalID = setInterval(function () {\n                  if (_this2.includeSpectrogram) {\n                    _this2.analyser.getFloatFrequencyData(_this2.freqData);\n\n                    if (_this2.freqData[0] === -Infinity) {\n                      resolve({\n                        freqDataQueue: freqDataQueue,\n                        timeDataQueue: timeDataQueue\n                      });\n                    }\n\n                    freqDataQueue.push(_this2.freqData.slice(0, _this2.columnTruncateLength));\n                  }\n\n                  if (_this2.includeWaveform) {\n                    _this2.analyser.getFloatTimeDomainData(_this2.timeData);\n\n                    timeDataQueue.push(_this2.timeData.slice());\n                  }\n\n                  if (++currentFrames === _this2.numFrames) {\n                    clearInterval(intervalID);\n                    resolve({\n                      freqDataQueue: freqDataQueue,\n                      timeDataQueue: timeDataQueue\n                    });\n                  }\n                }, _this2.fftSize / _this2.sampleRateHz * 1e3);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.isClosed) {\n        this.isClosed = true;\n        this.analyser.disconnect();\n        this.audioContext.close();\n\n        if (this.stream != null && this.stream.getTracks().length > 0) {\n          this.stream.getTracks()[0].stop();\n        }\n      }\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      throw new Error('Can not convert infinite audio stream to array.');\n    }\n  }, {\n    key: \"getSampleRate\",\n    value: function getSampleRate() {\n      return this.sampleRateHz;\n    }\n  }, {\n    key: \"flattenQueue\",\n    value: function flattenQueue(queue) {\n      var frameSize = queue[0].length;\n      var freqData = new Float32Array(queue.length * frameSize);\n      queue.forEach(function (data, i) {\n        return freqData.set(data, i * frameSize);\n      });\n      return freqData;\n    }\n  }, {\n    key: \"getTensorFromAudioDataArray\",\n    value: function getTensorFromAudioDataArray(freqData, shape) {\n      var vals = new Float32Array(util.sizeFromShape(shape));\n      vals.set(freqData, vals.length - freqData.length);\n      return tensor(vals, shape);\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var microphoneConfig,\n          microphoneIterator,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function create$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              microphoneConfig = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n\n              if (!env().get('IS_NODE')) {\n                _context5.next = 3;\n                break;\n              }\n\n              throw new Error('microphone API is only supported in browser environment.');\n\n            case 3:\n              microphoneIterator = new MicrophoneIterator(microphoneConfig);\n              _context5.next = 6;\n              return _regeneratorRuntime.awrap(microphoneIterator.start());\n\n            case 6:\n              return _context5.abrupt(\"return\", microphoneIterator);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return MicrophoneIterator;\n}(LazyIterator);","map":{"version":3,"sources":["../../src/iterators/microphone_iterator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env, tensor, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of tensors from microphone audio stream. The tensors are\n * representing audio data as frequency-domain spectrogram generated with\n * browser's native FFT. Tensors representing time-domain waveform is available\n * based on configuration. Only works in browser environment.\n */\nexport class MicrophoneIterator extends LazyIterator {\n    constructor(microphoneConfig) {\n        super();\n        this.microphoneConfig = microphoneConfig;\n        this.isClosed = false;\n        this.fftSize = microphoneConfig.fftSize || 1024;\n        const fftSizeLog2 = Math.log2(this.fftSize);\n        if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 ||\n            !Number.isInteger(fftSizeLog2)) {\n            throw new Error(`Invalid fftSize: it must be a power of 2 between ` +\n                `2 to 4 and 2 to 14, but got ${this.fftSize}`);\n        }\n        this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n        this.sampleRateHz = microphoneConfig.sampleRateHz;\n        this.columnTruncateLength =\n            microphoneConfig.columnTruncateLength || this.fftSize;\n        this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n        this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n        this.includeSpectrogram =\n            microphoneConfig.includeSpectrogram === false ? false : true;\n        this.includeWaveform =\n            microphoneConfig.includeWaveform === true ? true : false;\n        if (!this.includeSpectrogram && !this.includeWaveform) {\n            throw new Error('Both includeSpectrogram and includeWaveform are false. ' +\n                'At least one type of data should be returned.');\n        }\n    }\n    summary() {\n        return `microphone`;\n    }\n    // Construct a MicrophoneIterator and start the audio stream.\n    static async create(microphoneConfig = {}) {\n        if (env().get('IS_NODE')) {\n            throw new Error('microphone API is only supported in browser environment.');\n        }\n        const microphoneIterator = new MicrophoneIterator(microphoneConfig);\n        // Call async function start() to initialize the audio stream.\n        await microphoneIterator.start();\n        return microphoneIterator;\n    }\n    // Start the audio stream and FFT.\n    async start() {\n        try {\n            this.stream = await navigator.mediaDevices.getUserMedia({\n                audio: this.audioTrackConstraints == null ? true :\n                    this.audioTrackConstraints,\n                video: false\n            });\n        }\n        catch (e) {\n            throw new Error(`Error thrown while initializing video stream: ${e.message}`);\n        }\n        if (!this.stream) {\n            throw new Error('Could not obtain audio from microphone.');\n        }\n        const ctxConstructor = \n        // tslint:disable-next-line:no-any\n        window.AudioContext || window.webkitAudioContext;\n        this.audioContext = new ctxConstructor();\n        if (!this.sampleRateHz) {\n            // If sample rate is not provided, use the available sample rate on\n            // device.\n            this.sampleRateHz = this.audioContext.sampleRate;\n        }\n        else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n            throw new Error(`Mismatch in sampling rate: ` +\n                `Expected: ${this.sampleRateHz}; ` +\n                `Actual: ${this.audioContext.sampleRate}`);\n        }\n        const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = this.fftSize * 2;\n        this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n        streamSource.connect(this.analyser);\n        this.freqData = new Float32Array(this.fftSize);\n        this.timeData = new Float32Array(this.fftSize);\n        return;\n    }\n    async next() {\n        if (this.isClosed) {\n            return { value: null, done: true };\n        }\n        let spectrogramTensor;\n        let waveformTensor;\n        const audioDataQueue = await this.getAudioData();\n        if (this.includeSpectrogram) {\n            const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n            spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n        }\n        if (this.includeWaveform) {\n            const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n            waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n        }\n        return {\n            value: { 'spectrogram': spectrogramTensor, 'waveform': waveformTensor },\n            done: false\n        };\n    }\n    // Capture one result from the audio stream, and extract the value from\n    // iterator.next() result.\n    async capture() {\n        return (await this.next()).value;\n    }\n    async getAudioData() {\n        const freqDataQueue = [];\n        const timeDataQueue = [];\n        let currentFrames = 0;\n        return new Promise(resolve => {\n            const intervalID = setInterval(() => {\n                if (this.includeSpectrogram) {\n                    this.analyser.getFloatFrequencyData(this.freqData);\n                    // If the audio stream is initializing, return empty queue.\n                    if (this.freqData[0] === -Infinity) {\n                        resolve({ freqDataQueue, timeDataQueue });\n                    }\n                    freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n                }\n                if (this.includeWaveform) {\n                    this.analyser.getFloatTimeDomainData(this.timeData);\n                    timeDataQueue.push(this.timeData.slice());\n                }\n                // Clean interval and return when all frames have been collected\n                if (++currentFrames === this.numFrames) {\n                    clearInterval(intervalID);\n                    resolve({ freqDataQueue, timeDataQueue });\n                }\n            }, this.fftSize / this.sampleRateHz * 1e3);\n        });\n    }\n    // Stop the audio stream and pause the iterator.\n    stop() {\n        if (!this.isClosed) {\n            this.isClosed = true;\n            this.analyser.disconnect();\n            this.audioContext.close();\n            if (this.stream != null && this.stream.getTracks().length > 0) {\n                this.stream.getTracks()[0].stop();\n            }\n        }\n    }\n    // Override toArray() function to prevent collecting.\n    toArray() {\n        throw new Error('Can not convert infinite audio stream to array.');\n    }\n    // Return audio sampling rate in Hz\n    getSampleRate() {\n        return this.sampleRateHz;\n    }\n    flattenQueue(queue) {\n        const frameSize = queue[0].length;\n        const freqData = new Float32Array(queue.length * frameSize);\n        queue.forEach((data, i) => freqData.set(data, i * frameSize));\n        return freqData;\n    }\n    getTensorFromAudioDataArray(freqData, shape) {\n        const vals = new Float32Array(util.sizeFromShape(shape));\n        // If the data is less than the output shape, the rest is padded with zeros.\n        vals.set(freqData, vals.length - freqData.length);\n        return tensor(vals, shape);\n    }\n}\n//# sourceMappingURL=microphone_iterator.js.map"]},"metadata":{},"sourceType":"module"}