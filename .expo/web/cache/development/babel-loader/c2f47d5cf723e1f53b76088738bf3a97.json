{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from \"../util\";\nimport { PARALLELIZE_THRESHOLD } from \"./reduce_util\";\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  var done = false;\n  var res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  var outShape = [];\n  var rank = aShape.length;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  var indicesRank = indices.shape.length;\n  var xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(\"Expect batchDims in the range of [-\" + indicesRank + \", \" + indicesRank + \"], but got \" + batchDims);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(\"batchDims (\" + batchDims + \") must be less than rank(x) (\\n    \" + xRank + \").\");\n  }\n\n  if (axis < batchDims) {\n    throw new Error(\"batchDims (\" + batchDims + \") must be less than or equal to axis (\" + axis + \").\");\n  }\n\n  for (var i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\"x.shape[\" + i + \"]: \" + x.shape[i] + \" should be equal to indices.shape[\" + i + \"]: \" + indices.shape[i] + \".\");\n    }\n  }\n\n  var dimSize = x.shape[axis];\n  var outputShape = [];\n  var batchSize = 1;\n  var outerSize = 1;\n  var sliceSize = 1;\n\n  for (var _i = 0; _i < batchDims; ++_i) {\n    outputShape.push(x.shape[_i]);\n    batchSize *= x.shape[_i];\n  }\n\n  for (var _i2 = batchDims; _i2 < axis; _i2++) {\n    outputShape.push(x.shape[_i2]);\n    outerSize *= x.shape[_i2];\n  }\n\n  for (var _i3 = batchDims; _i3 < indicesRank; _i3++) {\n    outputShape.push(indices.shape[_i3]);\n  }\n\n  for (var _i4 = axis + 1; _i4 < xRank; _i4++) {\n    outputShape.push(x.shape[_i4]);\n    sliceSize *= x.shape[_i4];\n  }\n\n  return {\n    batchSize: batchSize,\n    sliceSize: sliceSize,\n    outerSize: outerSize,\n    dimSize: dimSize,\n    outputShape: outputShape\n  };\n}","map":{"version":3,"sources":["../../src/ops/segment_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n    let done = false;\n    let res;\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        res = inSize;\n        done = true;\n    }\n    else {\n        res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n    }\n    while (!done) {\n        if (res > numSegments || res === inSize) {\n            done = true;\n        }\n        else {\n            res = nearestDivisor(inSize, res + 1);\n        }\n    }\n    return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (dim !== axis) {\n            outShape.push(aShape[dim]);\n        }\n        else {\n            outShape.push(numSegments);\n        }\n    }\n    return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n    const indicesRank = indices.shape.length;\n    const xRank = x.shape.length;\n    if (batchDims !== 0) {\n        if (batchDims < -indicesRank || batchDims > indicesRank) {\n            throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n        }\n    }\n    if (batchDims < 0) {\n        batchDims += indicesRank;\n    }\n    if (batchDims > xRank) {\n        throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n    }\n    if (axis < batchDims) {\n        throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n    }\n    for (let i = 0; i < batchDims; ++i) {\n        if (x.shape[i] !== indices.shape[i]) {\n            throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n        }\n    }\n    const dimSize = x.shape[axis];\n    const outputShape = [];\n    let batchSize = 1;\n    let outerSize = 1;\n    let sliceSize = 1;\n    for (let i = 0; i < batchDims; ++i) {\n        outputShape.push(x.shape[i]);\n        batchSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < axis; i++) {\n        outputShape.push(x.shape[i]);\n        outerSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < indicesRank; i++) {\n        outputShape.push(indices.shape[i]);\n    }\n    for (let i = axis + 1; i < xRank; i++) {\n        outputShape.push(x.shape[i]);\n        sliceSize *= x.shape[i];\n    }\n    return { batchSize, sliceSize, outerSize, dimSize, outputShape };\n}\n//# sourceMappingURL=segment_util.js.map"]},"metadata":{},"sourceType":"module"}