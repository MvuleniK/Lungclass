{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from \"../kernel_names\";\nimport * as conv_util from \"../ops/conv_util\";\nimport { depthwiseConv2dNativeBackpropFilter } from \"../ops/depthwise_conv2d_native_backprop_filter\";\nimport { depthwiseConv2dNativeBackpropInput } from \"../ops/depthwise_conv2d_native_backprop_input\";\nimport * as util from \"../util\";\nexport var depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var dilations = attrs.dilations,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        dimRoundingMode = attrs.dimRoundingMode;\n    var $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), function () {\n      return 'Error in gradient of depthwiseConv2dNative: dilation rates ' + \"greater than 1 are not yet supported. Got dilations \" + (\"'\" + $dilations + \"'\");\n    });\n\n    var _saved = _slicedToArray(saved, 2),\n        _x = _saved[0],\n        _filter = _saved[1];\n\n    util.assert(_x.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: input must be \" + (\"rank 4, but got rank \" + _x.rank + \".\");\n    });\n    util.assert(_filter.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: filter must be \" + (\"rank 4, but got rank \" + _filter.rank + \".\");\n    });\n    util.assert(_x.shape[3] === _filter.shape[2], function () {\n      return \"Error in gradient of depthwiseConv2d: number of input \" + (\"channels (\" + _x.shape[3] + \") must match the inChannels dimension \") + (\"in filter \" + _filter.shape[2] + \".\");\n    });\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n      return 'Error in gradient of depthwiseConv2d: Either strides or ' + (\"dilations must be  1. Got strides \" + strides + \" and dilations \") + (\"'\" + $dilations + \"'.\");\n    });\n\n    if (dimRoundingMode != null) {\n      util.assert(util.isInt(pad), function () {\n        return \"Error in depthwiseConv2d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n      });\n    }\n\n    return {\n      x: function x() {\n        return depthwiseConv2dNativeBackpropInput(_x.shape, dy, _filter, strides, pad, dilations, dimRoundingMode);\n      },\n      filter: function filter() {\n        return depthwiseConv2dNativeBackpropFilter(_x, dy, _filter.shape, strides, pad, dilations, dimRoundingMode);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/DepthwiseConv2dNative_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,qBAAR;AAEA,OAAO,KAAK,SAAZ;AACA,SAAQ,mCAAR;AACA,SAAQ,kCAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,OAAO,IAAM,+BAA+B,GAAe;EACzD,UAAU,EAAE,qBAD6C;EAEzD,YAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF2C;EAGzD,QAAQ,EAAE,kBAAC,EAAD,EAAe,KAAf,EAAgC,KAAhC,EAAuD;IAC/D,IAAO,SAAP,GACI,KADJ,CAAO,SAAP;IAAA,IAAkB,OAAlB,GACI,KADJ,CAAkB,OAAlB;IAAA,IAA2B,GAA3B,GACI,KADJ,CAA2B,GAA3B;IAAA,IAAgC,eAAhC,GACI,KADJ,CAAgC,eAAhC;IAGA,IAAM,UAAU,GAAG,SAAS,IAAI,IAAb,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB,GAA6B,SAAhD;IAEA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,iBAAV,CAA4B,UAA5B,CADJ,EAEI;MAAA,OAAM,gIAEE,UAFF,OAAN;IAAA,CAFJ;;IAMA,4BAAoB,KAApB;IAAA,IAAO,EAAP;IAAA,IAAU,OAAV;;IAEA,IAAI,CAAC,MAAL,CACI,EAAC,CAAC,IAAF,KAAW,CADf,EAEI;MAAA,OAAM,0FACsB,EAAC,CAAC,IADxB,OAAN;IAAA,CAFJ;IAIA,IAAI,CAAC,MAAL,CACI,OAAM,CAAC,IAAP,KAAgB,CADpB,EAEI;MAAA,OAAM,2FACsB,OAAM,CAAC,IAD7B,OAAN;IAAA,CAFJ;IAIA,IAAI,CAAC,MAAL,CACI,EAAC,CAAC,KAAF,CAAQ,CAAR,MAAe,OAAM,CAAC,KAAP,CAAa,CAAb,CADnB,EAEI;MAAA,OAAM,2EACW,EAAC,CAAC,KAAF,CAAQ,CAAR,CADX,+DAEW,OAAM,CAAC,KAAP,CAAa,CAAb,CAFX,OAAN;IAAA,CAFJ;IAMA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,8BAAV,CAAyC,OAAzC,EAAkD,UAAlD,CADJ,EAEI;MAAA,OAAM,qGACmC,OADnC,+BAEE,UAFF,QAAN;IAAA,CAFJ;;IAMA,IAAI,eAAe,IAAI,IAAvB,EAA6B;MAC3B,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI;QAAA,OACI,wFACmB,eADnB,qBACkD,GADlD,OADJ;MAAA,CAFJ;IAKD;;IAED,OAAO;MACL,CAAC,EAAE;QAAA,OAAM,kCAAkC,CACvC,EAAC,CAAC,KADqC,EAC9B,EAD8B,EAC1B,OAD0B,EAClB,OADkB,EACT,GADS,EACJ,SADI,EACO,eADP,CAAxC;MAAA,CADE;MAGL,MAAM,EAAE;QAAA,OAAM,mCAAmC,CAC7C,EAD6C,EAC1C,EAD0C,EACtC,OAAM,CAAC,KAD+B,EACxB,OADwB,EACf,GADe,EACV,SADU,EACC,eADD,CAAzC;MAAA;IAHH,CAAP;EAMD;AAnDwD,CAApD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n    kernelName: DepthwiseConv2dNative,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const { dilations, strides, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1] : dilations;\n        util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n        const [x, filter] = saved;\n        util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n        util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n        util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        return {\n            x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),\n            filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, dilations, dimRoundingMode),\n        };\n    }\n};\n//# sourceMappingURL=DepthwiseConv2dNative_grad.js.map"]},"metadata":{},"sourceType":"module"}