{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from \"../tensor_util_env\";\nimport { parseAxisParam } from \"../util\";\nimport { abs } from \"./abs\";\nimport * as axis_util from \"./axis_util\";\nimport { max } from \"./max\";\nimport { min } from \"./min\";\nimport { op } from \"./operation\";\nimport { pow } from \"./pow\";\nimport { reshape } from \"./reshape\";\nimport { scalar } from \"./scalar\";\nimport { sqrt } from \"./sqrt\";\nimport { square } from \"./square\";\nimport { sum } from \"./sum\";\n\nfunction norm_(x) {\n  var ord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'euclidean';\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var keepDims = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  x = convertToTensor(x, 'x', 'norm');\n  var norm = normImpl(x, ord, axis);\n  var keepDimsShape = norm.shape;\n\n  if (keepDims) {\n    var axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(x, p) {\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (x.rank === 0) {\n    return abs(x);\n  }\n\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n\n  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n\n    if (p === 'euclidean' || p === 2) {\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(\"Error in norm: invalid ord value: \" + p);\n  }\n\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === 'fro' || p === 'euclidean') {\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(\"Error in norm: invalid ord value: \" + p);\n  }\n\n  throw new Error(\"Error in norm: invalid axis: \" + axis);\n}\n\nexport var norm = op({\n  norm_: norm_\n});","map":{"version":3,"sources":["../../src/ops/norm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'norm');\n    const norm = normImpl(x, ord, axis);\n    let keepDimsShape = norm.shape;\n    if (keepDims) {\n        const axes = parseAxisParam(axis, x.shape);\n        keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n    return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n    if (x.rank === 0) {\n        return abs(x);\n    }\n    // consider vector when no axis is specified\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(reshape(x, [-1]), p, axis);\n    }\n    // vector\n    if (x.rank === 1 || typeof axis === 'number' ||\n        Array.isArray(axis) && axis.length === 1) {\n        if (p === 1) {\n            return sum(abs(x), axis);\n        }\n        if (p === Infinity) {\n            return max(abs(x), axis);\n        }\n        if (p === -Infinity) {\n            return min(abs(x), axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    // matrix (assumption axis[0] < axis[1])\n    if (Array.isArray(axis) && axis.length === 2) {\n        if (p === 1) {\n            return max(sum(abs(x), axis[0]), axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return max(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === -Infinity) {\n            return min(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            // norm(x) = sqrt(sum(pow(x, 2)))\n            return sqrt(sum(square(x), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = op({ norm_ });\n//# sourceMappingURL=norm.js.map"]},"metadata":{},"sourceType":"module"}