{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from \"../fft_gpu\";\nimport { complex } from \"./Complex\";\nimport { reshape } from \"./Reshape\";\nexport function fftImpl(x, inverse, backend) {\n  var xData = backend.texData.get(x.dataId);\n  var inputSize = util.sizeFromShape(x.shape);\n  var innerDimensionSize = x.shape[x.shape.length - 1];\n  var batch = inputSize / innerDimensionSize;\n  var input2D = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  var xShape = input2D.shape;\n  var realProgram = new FFTProgram('real', xShape, inverse);\n  var imagProgram = new FFTProgram('imag', xShape, inverse);\n  var inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  var realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  var imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n  var complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n  var complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend: backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}","map":{"version":3,"sources":["../../src/kernels/FFT_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAoB,IAApB,QAA+B,uBAA/B;AAGA,SAAQ,UAAR;AAEA,SAAQ,OAAR;AACA,SAAQ,OAAR;AAEA,OAAM,SAAU,OAAV,CACF,CADE,EACa,OADb,EAC+B,OAD/B,EACwD;EAC5D,IAAM,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAAd;EAEA,IAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAlB;EAEA,IAAM,kBAAkB,GAAG,CAAC,CAAC,KAAF,CAAQ,CAAC,CAAC,KAAF,CAAQ,MAAR,GAAiB,CAAzB,CAA3B;EACA,IAAM,KAAK,GAAG,SAAS,GAAG,kBAA1B;EAEA,IAAM,OAAO,GAAG,OAAO,CACnB;IAAC,MAAM,EAAE;MAAC,CAAC,EAAD;IAAD,CAAT;IAAc,OAAO,EAAP,OAAd;IAAuB,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,KAAD,EAAQ,kBAAR;IAAR;EAA9B,CADmB,CAAvB;EAGA,IAAM,MAAM,GAAG,OAAO,CAAC,KAAvB;EACA,IAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,MAAf,EAAuB,MAAvB,EAA+B,OAA/B,CAApB;EACA,IAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,MAAf,EAAuB,MAAvB,EAA+B,OAA/B,CAApB;EAEA,IAAM,MAAM,GAAG,CACb;IACE,MAAM,EAAE,KAAK,CAAC,kBAAN,CAAyB,IAAzB,CAA8B,MADxC;IAEE,KAAK,EAAE,KAAK,CAAC,kBAAN,CAAyB,IAAzB,CAA8B,KAFvC;IAGE,KAAK,EAAE;EAHT,CADa,EAMb;IACE,MAAM,EAAE,KAAK,CAAC,kBAAN,CAAyB,IAAzB,CAA8B,MADxC;IAEE,KAAK,EAAE,KAAK,CAAC,kBAAN,CAAyB,IAAzB,CAA8B,KAFvC;IAGE,KAAK,EAAE;EAHT,CANa,CAAf;EAaA,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAR,CAAwB,WAAxB,EAAqC,MAArC,EAA6C,SAA7C,CAAjB;EACA,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAR,CAAwB,WAAxB,EAAqC,MAArC,EAA6C,SAA7C,CAAjB;EAEA,IAAM,aAAa,GACf,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,IAAI,EAAE,QAAP;MAAiB,IAAI,EAAE;IAAvB,CAAT;IAA2C,OAAO,EAAP;EAA3C,CAAD,CADX;EAGA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;EAEA,IAAM,qBAAqB,GACvB,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAA6B,OAAO,EAAP,OAA7B;IAAsC,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,CAAC;IAAV;EAA7C,CAAD,CADX;EAGA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,aAAtC;EACA,OAAO,qBAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new FFTProgram('real', xShape, inverse);\n    const imagProgram = new FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(complexOutput);\n    return complexOutputReshaped;\n}\n//# sourceMappingURL=FFT_impl.js.map"]},"metadata":{},"sourceType":"module"}