{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from \"./Slice\";\nexport function splitV(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var numOrSizeSplits = attrs.numOrSizeSplits,\n      axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, x.shape)[0];\n  var splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  var begin = new Array(x.shape.length).fill(0);\n  var size = x.shape.slice();\n  return splitSizes.map(function (s) {\n    var sliceSize = _toConsumableArray(size);\n\n    sliceSize[$axis] = s;\n    var sliceT = slice({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        begin: begin,\n        size: sliceSize\n      }\n    });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nexport var splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV\n};","map":{"version":3,"sources":["../../src/kernels/SplitV.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAAsD,uBAAtD;AACA,SAAkC,MAAlC,EAAsD,IAAtD,QAAiE,uBAAjE;AAGA,SAAQ,KAAR;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EACuE;EAE3E,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,eAAP,GAAgC,KAAhC,CAAO,eAAP;EAAA,IAAwB,IAAxB,GAAgC,KAAhC,CAAwB,IAAxB;EAEA,IAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,EAAmC,CAAnC,CAAd;EACA,IAAM,UAAU,GAAG,YAAY,CAAC,gBAAb,CAA8B,CAA9B,EAAiC,eAAjC,EAAkD,KAAlD,CAAnB;EAEA,IAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,CAAC,CAAC,KAAF,CAAQ,MAAlB,EAA0B,IAA1B,CAA+B,CAA/B,CAAd;EACA,IAAM,IAAI,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAb;EACA,OAAO,UAAU,CAAC,GAAX,CAAe,UAAA,CAAC,EAAG;IACxB,IAAM,SAAS,sBAAO,IAAP,CAAf;;IACA,SAAS,CAAC,KAAD,CAAT,GAAmB,CAAnB;IACA,IAAM,MAAM,GACR,KAAK,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAD;MAAD,CAAT;MAAc,OAAO,EAAP,OAAd;MAAuB,KAAK,EAAE;QAAC,KAAK,EAAL,KAAD;QAAQ,IAAI,EAAE;MAAd;IAA9B,CAAD,CADT;IAEA,KAAK,CAAC,KAAD,CAAL,IAAgB,CAAhB;IACA,OAAO,MAAP;EACD,CAPM,CAAP;AAQD;AAED,OAAO,IAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,KAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const begin = new Array(x.shape.length).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'cpu',\n    kernelFunc: splitV\n};\n//# sourceMappingURL=SplitV.js.map"]},"metadata":{},"sourceType":"module"}