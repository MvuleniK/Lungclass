{"ast":null,"code":"import { convertToTensor, convertToTensorArray } from \"../tensor_util_env\";\nimport { op } from \"./operation\";\n\nfunction multiRNNCell_(lstmCells, data, c, h) {\n  var $data = convertToTensor(data, 'data', 'multiRNNCell');\n  var $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  var $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n  var input = $data;\n  var newStates = [];\n\n  for (var i = 0; i < lstmCells.length; i++) {\n    var output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n\n  var newC = [];\n  var newH = [];\n\n  for (var _i = 0; _i < newStates.length; _i += 2) {\n    newC.push(newStates[_i]);\n    newH.push(newStates[_i + 1]);\n  }\n\n  return [newC, newH];\n}\n\nexport var multiRNNCell = op({\n  multiRNNCell_: multiRNNCell_\n});","map":{"version":3,"sources":["../../src/ops/multi_rnn_cell.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,EAAyB,oBAAzB;AAEA,SAAQ,EAAR;;AAyBA,SAAS,aAAT,CACI,SADJ,EAC+B,IAD/B,EAEI,CAFJ,EAGI,CAHJ,EAGiC;EAC/B,IAAM,KAAK,GAAG,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,cAAf,CAA7B;EACA,IAAM,EAAE,GAAG,oBAAoB,CAAC,CAAD,EAAI,GAAJ,EAAS,cAAT,CAA/B;EACA,IAAM,EAAE,GAAG,oBAAoB,CAAC,CAAD,EAAI,GAAJ,EAAS,cAAT,CAA/B;EAEA,IAAI,KAAK,GAAG,KAAZ;EACA,IAAM,SAAS,GAAG,EAAlB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;IACzC,IAAM,MAAM,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,KAAb,EAAoB,EAAE,CAAC,CAAD,CAAtB,EAA2B,EAAE,CAAC,CAAD,CAA7B,CAAf;IACA,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,CAAD,CAArB;IACA,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,CAAD,CAArB;IACA,KAAK,GAAG,MAAM,CAAC,CAAD,CAAd;EACD;;EACD,IAAM,IAAI,GAAe,EAAzB;EACA,IAAM,IAAI,GAAe,EAAzB;;EACA,KAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,EAAC,IAAI,CAA3C,EAA8C;IAC5C,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,EAAD,CAAnB;IACA,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,EAAC,GAAG,CAAL,CAAnB;EACD;;EACD,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACD;;AACD,OAAO,IAAM,YAAY,GAAG,EAAE,CAAC;EAAC,aAAa,EAAb;AAAD,CAAD,CAAvB","sourceRoot":"","sourcesContent":["import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(lstmCells, data, c, h) {\n    const $data = convertToTensor(data, 'data', 'multiRNNCell');\n    const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n    const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n    let input = $data;\n    const newStates = [];\n    for (let i = 0; i < lstmCells.length; i++) {\n        const output = lstmCells[i](input, $c[i], $h[i]);\n        newStates.push(output[0]);\n        newStates.push(output[1]);\n        input = output[1];\n    }\n    const newC = [];\n    const newH = [];\n    for (let i = 0; i < newStates.length; i += 2) {\n        newC.push(newStates[i]);\n        newH.push(newStates[i + 1]);\n    }\n    return [newC, newH];\n}\nexport const multiRNNCell = op({ multiRNNCell_ });\n//# sourceMappingURL=multi_rnn_cell.js.map"]},"metadata":{},"sourceType":"module"}