{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from \"../datasource\";\nimport { urlChunkIterator } from \"../iterators/url_chunk_iterator\";\nimport { isLocalPath } from \"../util/source_util\";\nimport { FileDataSource } from \"./file_data_source\";\nexport var URLDataSource = function (_DataSource) {\n  _inherits(URLDataSource, _DataSource);\n\n  var _super = _createSuper(URLDataSource);\n\n  function URLDataSource(url) {\n    var _this;\n\n    var fileOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, URLDataSource);\n\n    _this = _super.call(this);\n    _this.url = url;\n    _this.fileOptions = fileOptions;\n    return _this;\n  }\n\n  _createClass(URLDataSource, [{\n    key: \"iterator\",\n    value: function iterator() {\n      return _regeneratorRuntime.async(function iterator$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isLocalPath(this.url)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", new FileDataSource(this.url, this.fileOptions).iterator());\n\n            case 4:\n              return _context.abrupt(\"return\", urlChunkIterator(this.url, this.fileOptions));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return URLDataSource;\n}(DataSource);","map":{"version":3,"sources":["../../src/sources/url_data_source.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,UAAR;AAGA,SAAQ,gBAAR;AACA,SAAQ,WAAR;AACA,SAAQ,cAAR;AAKA,WAAa,aAAb;EAAA;;EAAA;;EAQE,uBACuB,GADvB,EAEiE;IAAA;;IAAA,IAA1C,WAA0C,uEAAF,EAAE;;IAAA;;IAC/D;IAFqB,MAAA,GAAA,GAAA,GAAA;IACA,MAAA,WAAA,GAAA,WAAA;IAA0C;EAEhE;;EAZH;IAAA;IAAA,OAkBE;MAAA;QAAA;UAAA;YAAA;cAAA,KACM,WAAW,CAAC,KAAK,GAAN,CADjB;gBAAA;gBAAA;cAAA;;cAAA,iCAEY,IAAI,cAAJ,CAAmB,KAAK,GAAxB,EAAuC,KAAK,WAA5C,CAAD,CACF,QADE,EAFX;;YAAA;cAAA,iCAKW,gBAAgB,CAAC,KAAK,GAAN,EAAW,KAAK,WAAhB,CAL3B;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAlBF;;EAAA;AAAA,EAAmC,UAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n    /**\n     * Create a `URLDataSource`.\n     *\n     * @param url A source URL string, or a `Request` object.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(url, fileOptions = {}) {\n        super();\n        this.url = url;\n        this.fileOptions = fileOptions;\n    }\n    // TODO(soergel): provide appropriate caching options.  Currently this\n    // will download the URL anew for each call to iterator().  Since we have\n    // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n    // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n    async iterator() {\n        if (isLocalPath(this.url)) {\n            return (new FileDataSource(this.url, this.fileOptions))\n                .iterator();\n        }\n        else {\n            return urlChunkIterator(this.url, this.fileOptions);\n        }\n    }\n}\n//# sourceMappingURL=url_data_source.js.map"]},"metadata":{},"sourceType":"module"}