{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { MaxPoolGrad } from \"../kernel_names\";\nimport { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { op } from \"./operation\";\n\nfunction maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n  var $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n  var $input = convertToTensor(input, 'input', 'maxPoolGrad');\n  var $output = convertToTensor(output, 'output', 'maxPoolGrad');\n  util.assert($input.rank === $dy.rank, function () {\n    return \"Rank of input (\" + $input.rank + \") does not match rank of dy \" + (\"(\" + $dy.rank + \")\");\n  });\n  util.assert($dy.rank === 4, function () {\n    return \"Error in maxPoolGrad: dy must be rank 4 but got rank \" + ($dy.rank + \".\");\n  });\n  util.assert($input.rank === 4, function () {\n    return \"Error in maxPoolGrad: input must be rank 4 but got rank \" + ($input.rank + \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPoolGrad: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\");\n    });\n  }\n\n  var inputs = {\n    dy: $dy,\n    input: $input,\n    output: $output\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\n\nexport var maxPoolGrad = op({\n  maxPoolGrad_: maxPoolGrad_\n});","map":{"version":3,"sources":["../../src/ops/max_pool_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR;AACA,SAAQ,WAAR;AAIA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,EAAR;;AAqBA,SAAS,YAAT,CACI,EADJ,EAC6B,KAD7B,EAEI,MAFJ,EAEiC,UAFjC,EAGI,OAHJ,EAGsC,GAHtC,EAII,eAJJ,EAI4C;EAC1C,IAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,aAAX,CAA3B;EACA,IAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,aAAjB,CAA9B;EACA,IAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,aAAnB,CAA/B;EAEA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,GAAG,CAAC,IADxB,EAEI;IAAA,OAAM,oBAAkB,MAAM,CAAC,IAAzB,2CACE,GAAG,CAAC,IADN,OAAN;EAAA,CAFJ;EAKA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CADjB,EAEI;IAAA,OAAM,2DACC,GAAG,CAAC,IADL,OAAN;EAAA,CAFJ;EAIA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,CADpB,EAEI;IAAA,OAAM,8DACC,MAAM,CAAC,IADR,OAAN;EAAA,CAFJ;;EAIA,IAAI,eAAe,IAAI,IAAvB,EAA6B;IAC3B,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,EAEI;MAAA,OAAM,oFACiB,eADjB,qBACgD,GADhD,OAAN;IAAA,CAFJ;EAID;;EAED,IAAM,MAAM,GAAsB;IAAC,EAAE,EAAE,GAAL;IAAU,KAAK,EAAE,MAAjB;IAAyB,MAAM,EAAE;EAAjC,CAAlC;EAEA,IAAM,KAAK,GAAqB;IAAC,UAAU,EAAV,UAAD;IAAa,OAAO,EAAP,OAAb;IAAsB,GAAG,EAAH,GAAtB;IAA2B,eAAe,EAAf;EAA3B,CAAhC;EAGA,OAAO,MAAM,CAAC,SAAP,CACI,WADJ,EACiB,MADjB,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,WAAW,GAAG,EAAE,CAAC;EAAC,YAAY,EAAZ;AAAD,CAAD,CAAtB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n    const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n    const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n        `(${$dy.rank})`);\n    util.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` +\n        `${$dy.rank}.`);\n    util.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` +\n        `${$input.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPoolGrad: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inputs = { dy: $dy, input: $input, output: $output };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\nexport const maxPoolGrad = op({ maxPoolGrad_ });\n//# sourceMappingURL=max_pool_grad.js.map"]},"metadata":{},"sourceType":"module"}