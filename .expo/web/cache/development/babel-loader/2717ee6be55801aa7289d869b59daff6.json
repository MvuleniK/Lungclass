{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../engine\";\nimport { dispose as _dispose, tidy } from \"../globals\";\nimport { add } from \"../ops/add\";\nimport { div } from \"../ops/div\";\nimport { mul } from \"../ops/mul\";\nimport { sqrt } from \"../ops/ops\";\nimport { square } from \"../ops/square\";\nimport { zerosLike } from \"../ops/zeros_like\";\nimport { registerClass } from \"../serialization\";\nimport { Optimizer } from \"./optimizer\";\nexport var AdadeltaOptimizer = function (_Optimizer) {\n  _inherits(AdadeltaOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdadeltaOptimizer);\n\n  function AdadeltaOptimizer(learningRate, rho) {\n    var _this;\n\n    var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, AdadeltaOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.rho = rho;\n    _this.epsilon = epsilon;\n    _this.accumulatedGrads = [];\n    _this.accumulatedUpdates = [];\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    return _this;\n  }\n\n  _createClass(AdadeltaOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        var trainable = false;\n\n        if (_this2.accumulatedGrads[i] == null) {\n          _this2.accumulatedGrads[i] = {\n            originalName: name + \"/accum_grad\",\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedUpdates[i] == null) {\n          _this2.accumulatedUpdates[i] = {\n            originalName: name + \"/accum_var\",\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedGrad = _this2.accumulatedGrads[i].variable;\n        var accumulatedUpdate = _this2.accumulatedUpdates[i].variable;\n        tidy(function () {\n          var newAccumulatedGrad = add(mul(accumulatedGrad, _this2.rho), mul(square(gradient), 1 - _this2.rho));\n          var updates = mul(div(sqrt(add(accumulatedUpdate, _this2.epsilon)), sqrt(add(accumulatedGrad, _this2.epsilon))), gradient);\n          var newAccumulatedUpdate = add(mul(accumulatedUpdate, _this2.rho), mul(square(updates), 1 - _this2.rho));\n          accumulatedGrad.assign(newAccumulatedGrad);\n          accumulatedUpdate.assign(newAccumulatedUpdate);\n          var newValue = add(mul(updates, -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedUpdates != null) {\n        _dispose(this.accumulatedGrads.map(function (v) {\n          return v.variable;\n        }));\n\n        _dispose(this.accumulatedUpdates.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function getWeights() {\n      var variables;\n      return _regeneratorRuntime.async(function getWeights$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              variables = [].concat(_toConsumableArray(this.accumulatedGrads), _toConsumableArray(this.accumulatedUpdates));\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.saveIterations());\n\n            case 3:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setWeights\",\n    value: function setWeights(weightValues) {\n      var variableCount, trainable;\n      return _regeneratorRuntime.async(function setWeights$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.extractIterations(weightValues));\n\n            case 2:\n              weightValues = _context2.sent;\n              variableCount = weightValues.length / 2;\n              trainable = false;\n              this.accumulatedGrads = weightValues.slice(0, variableCount).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n              this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'rho': this.rho,\n        'epsilon': this.epsilon\n      };\n    }\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['rho'], config['epsilon']);\n    }\n  }]);\n\n  return AdadeltaOptimizer;\n}(Optimizer);\nAdadeltaOptimizer.className = 'Adadelta';\nregisterClass(AdadeltaOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adadelta_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/ops';\nimport { square } from '../ops/square';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n    constructor(learningRate, rho, epsilon = null) {\n        super();\n        this.learningRate = learningRate;\n        this.rho = rho;\n        this.epsilon = epsilon;\n        this.accumulatedGrads = [];\n        this.accumulatedUpdates = [];\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            const trainable = false;\n            if (this.accumulatedGrads[i] == null) {\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accum_grad`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedUpdates[i] == null) {\n                this.accumulatedUpdates[i] = {\n                    originalName: `${name}/accum_var`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(mul(accumulatedGrad, this.rho), mul(square(gradient), 1 - this.rho));\n                const updates = mul(div(sqrt(add(accumulatedUpdate, this.epsilon)), sqrt(add(accumulatedGrad, this.epsilon))), gradient);\n                const newAccumulatedUpdate = add(mul(accumulatedUpdate, this.rho), mul(square(updates), 1 - this.rho));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                accumulatedUpdate.assign(newAccumulatedUpdate);\n                const newValue = add(mul(updates, -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedUpdates != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n            dispose(this.accumulatedUpdates.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const variableCount = weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedGrads =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedUpdates =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'rho': this.rho,\n            'epsilon': this.epsilon\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['rho'], config['epsilon']);\n    }\n}\n/** @nocollapse */\nAdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.\nregisterClass(AdadeltaOptimizer);\n//# sourceMappingURL=adadelta_optimizer.js.map"]},"metadata":{},"sourceType":"module"}