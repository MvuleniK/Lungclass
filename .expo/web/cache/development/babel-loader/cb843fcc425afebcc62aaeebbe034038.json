{"ast":null,"code":"import { convertToTensor } from \"../../tensor_util_env\";\nimport { cast } from \"../cast\";\nimport { div } from \"../div\";\nimport { Reduction } from \"../loss_ops_utils\";\nimport { mean } from \"../mean\";\nimport { mul } from \"../mul\";\nimport { notEqual } from \"../not_equal\";\nimport { ones } from \"../ones\";\nimport { op } from \"../operation\";\nimport { scalar } from \"../scalar\";\nimport { sum } from \"../sum\";\n\nfunction computeWeightedLoss_(losses, weights) {\n  var reduction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  var $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  var $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  var weightedLoss = $weights == null ? $losses : mul($losses, $weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss;\n  }\n\n  if (reduction === Reduction.SUM) {\n    return sum(weightedLoss);\n  }\n\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      var broadcastFactor = $losses.size / $weights.size;\n      var result = div(sum(weightedLoss), sum($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) : result;\n    }\n  }\n\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum(weightedLoss), scalar($losses.size));\n    } else {\n      var broadcastedWeights = mul($weights, ones($losses.shape));\n      var numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n      return div(sum(weightedLoss), numNonZeros);\n    }\n  }\n\n  throw Error(\"Unknown reduction: \" + reduction);\n}\n\nexport var computeWeightedLoss = op({\n  computeWeightedLoss_: computeWeightedLoss_\n});","map":{"version":3,"sources":["../../../src/ops/losses/compute_weighted_loss.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR;AAGA,SAAQ,IAAR;AACA,SAAQ,GAAR;AACA,SAAQ,SAAR;AACA,SAAQ,IAAR;AACA,SAAQ,GAAR;AACA,SAAQ,QAAR;AACA,SAAQ,IAAR;AACA,SAAQ,EAAR;AACA,SAAQ,MAAR;AACA,SAAQ,GAAR;;AAaA,SAAS,oBAAT,CACI,MADJ,EAC0B,OAD1B,EAEgD;EAAA,IAA5C,SAA4C,uEAAhC,SAAS,CAAC,sBAAsB;EAC9C,IAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,qBAAnB,CAA/B;EACA,IAAI,QAAQ,GAAW,IAAvB;;EACA,IAAI,OAAO,IAAI,IAAf,EAAqB;IACnB,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,qBAArB,CAA1B;EACD;;EAED,IAAM,YAAY,GAAI,QAAQ,IAAI,IAAb,GAAqB,OAArB,GAA+B,GAAG,CAAC,OAAD,EAAU,QAAV,CAAvD;;EAEA,IAAI,SAAS,KAAK,SAAS,CAAC,IAA5B,EAAkC;IAChC,OAAO,YAAP;EACD;;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,GAA5B,EAAiC;IAC/B,OAAO,GAAG,CAAC,YAAD,CAAV;EACD;;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,IAA5B,EAAkC;IAChC,IAAI,QAAQ,IAAI,IAAhB,EAAsB;MACpB,OAAO,IAAI,CAAC,YAAD,CAAX;IACD,CAFD,MAEO;MACL,IAAM,eAAe,GAAG,OAAO,CAAC,IAAR,GAAe,QAAQ,CAAC,IAAhD;MACA,IAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAD,CAAJ,EAAoB,GAAG,CAAC,QAAD,CAAvB,CAAlB;MACA,OAAO,eAAe,GAAG,CAAlB,GAAsB,GAAG,CAAC,MAAD,EAAS,MAAM,CAAC,eAAD,CAAf,CAAzB,GACsB,MAD7B;IAED;EACF;;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,sBAA5B,EAAoD;IAClD,IAAI,QAAQ,IAAI,IAAhB,EAAsB;MACpB,OAAO,GAAG,CAAC,GAAG,CAAC,YAAD,CAAJ,EAAoB,MAAM,CAAC,OAAO,CAAC,IAAT,CAA1B,CAAV;IACD,CAFD,MAEO;MACL,IAAM,kBAAkB,GAAG,GAAG,CAAC,QAAD,EAAW,IAAI,CAAC,OAAO,CAAC,KAAT,CAAf,CAA9B;MAEA,IAAM,WAAW,GACb,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,kBAAD,EAAqB,MAAM,CAAC,CAAD,CAA3B,CAAT,CAAJ,EAA+C,SAA/C,CADR;MAEA,OAAO,GAAG,CAAC,GAAG,CAAC,YAAD,CAAJ,EAAoB,WAApB,CAAV;IACD;EACF;;EAED,MAAM,KAAK,yBAAuB,SAAvB,CAAX;AACD;;AACD,OAAO,IAAM,mBAAmB,GAAG,EAAE,CAAC;EAAC,oBAAoB,EAApB;AAAD,CAAD,CAA9B","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../../tensor_util_env';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { Reduction } from '../loss_ops_utils';\nimport { mean } from '../mean';\nimport { mul } from '../mul';\nimport { notEqual } from '../not_equal';\nimport { ones } from '../ones';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sum } from '../sum';\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n    }\n    const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n    if (reduction === Reduction.NONE) {\n        return weightedLoss;\n    }\n    if (reduction === Reduction.SUM) {\n        return sum(weightedLoss);\n    }\n    if (reduction === Reduction.MEAN) {\n        if ($weights == null) {\n            return mean(weightedLoss);\n        }\n        else {\n            const broadcastFactor = $losses.size / $weights.size;\n            const result = div(sum(weightedLoss), sum($weights));\n            return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                result;\n        }\n    }\n    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n        if ($weights == null) {\n            return div(sum(weightedLoss), scalar($losses.size));\n        }\n        else {\n            const broadcastedWeights = mul($weights, ones($losses.shape));\n            const numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n            return div(sum(weightedLoss), numNonZeros);\n        }\n    }\n    throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = op({ computeWeightedLoss_ });\n//# sourceMappingURL=compute_weighted_loss.js.map"]},"metadata":{},"sourceType":"module"}