{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var json = [{\n  'tfOpName': 'FusedBatchNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV2',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV3',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LRN',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'depth_radius',\n    'name': 'radius',\n    'type': 'number',\n    'defaultValue': 5\n  }, {\n    'tfName': 'bias',\n    'name': 'bias',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'beta',\n    'name': 'beta',\n    'type': 'number',\n    'defaultValue': 0.5\n  }]\n}, {\n  'tfOpName': 'Softmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LogSoftmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': true,\n    'notSupported': true\n  }]\n}];","map":{"version":3,"sources":["../../../src/operations/op_list/normalization.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'FusedBatchNorm',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV2',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV3',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LRN',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'depth_radius',\n                'name': 'radius',\n                'type': 'number',\n                'defaultValue': 5\n            },\n            { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 1.0\n            },\n            {\n                'tfName': 'beta',\n                'name': 'beta',\n                'type': 'number',\n                'defaultValue': 0.5\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softmax',\n        'category': 'normalization',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'LogSoftmax',\n        'category': 'normalization',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'SparseToDense',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },\n            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },\n            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },\n            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'defaultValue': true,\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=normalization.js.map"]},"metadata":{},"sourceType":"module"}