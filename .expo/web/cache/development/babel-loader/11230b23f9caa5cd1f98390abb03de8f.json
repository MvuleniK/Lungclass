{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { Dataset } from \"../dataset\";\nexport var TextLineDataset = function (_Dataset) {\n  _inherits(TextLineDataset, _Dataset);\n\n  var _super = _createSuper(TextLineDataset);\n\n  function TextLineDataset(input) {\n    var _this;\n\n    _classCallCheck(this, TextLineDataset);\n\n    _this = _super.call(this);\n    _this.input = input;\n    return _this;\n  }\n\n  _createClass(TextLineDataset, [{\n    key: \"iterator\",\n    value: function iterator() {\n      var inputIterator, utf8Iterator, lineIterator;\n      return _regeneratorRuntime.async(function iterator$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.input.iterator());\n\n            case 2:\n              inputIterator = _context.sent;\n              utf8Iterator = inputIterator.decodeUTF8();\n              lineIterator = utf8Iterator.split('\\n').map(function (line) {\n                if (line.endsWith('\\r')) {\n                  line = line.slice(0, -1);\n                }\n\n                return line;\n              });\n              return _context.abrupt(\"return\", lineIterator);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return TextLineDataset;\n}(Dataset);","map":{"version":3,"sources":["../../src/datasets/text_line_dataset.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,OAAR;AASA,WAAa,eAAb;EAAA;;EAAA;;EAME,yBAA+B,KAA/B,EAAgD;IAAA;;IAAA;;IAC9C;IAD6B,MAAA,KAAA,GAAA,KAAA;IAAiB;EAE/C;;EARH;IAAA;IAAA,OAUE;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAC8B,KAAK,KAAL,CAAW,QAAX,EAD9B;;YAAA;cACQ,aADR;cAEQ,YAFR,GAEuB,aAAa,CAAC,UAAd,EAFvB;cAGQ,YAHR,GAGuB,YAAY,CAAC,KAAb,CAAmB,IAAnB,EAAyB,GAAzB,CAA6B,UAAA,IAAI,EAAG;gBAEvD,IAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,EAAyB;kBACvB,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;gBACD;;gBACD,OAAO,IAAP;cACD,CANoB,CAHvB;cAAA,iCAUS,YAVT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAVF;;EAAA;AAAA,EAAqC,OAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { Dataset } from '../dataset';\n/**\n * Represents a potentially large collection of text lines.\n *\n * The results are not batched.\n */\nexport class TextLineDataset extends Dataset {\n    /**\n     * Create a `TextLineDataset`.\n     *\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n     */\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    async iterator() {\n        const inputIterator = await this.input.iterator();\n        const utf8Iterator = inputIterator.decodeUTF8();\n        const lineIterator = utf8Iterator.split('\\n').map(line => {\n            // Windows/DOS format text file has extra line breaker at the end of line.\n            if (line.endsWith('\\r')) {\n                line = line.slice(0, -1);\n            }\n            return line;\n        });\n        return lineIterator;\n    }\n}\n//# sourceMappingURL=text_line_dataset.js.map"]},"metadata":{},"sourceType":"module"}