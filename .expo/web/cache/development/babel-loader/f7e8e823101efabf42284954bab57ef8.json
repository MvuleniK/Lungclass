{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport \"../flags\";\nimport { env } from \"../environment\";\nimport { getModelArtifactsInfoForJSON } from \"./io_utils\";\nimport { IORouterRegistry } from \"./router_registry\";\nvar DATABASE_NAME = 'tensorflowjs';\nvar DATABASE_VERSION = 1;\nvar MODEL_STORE_NAME = 'models_store';\nvar INFO_STORE_NAME = 'model_info_store';\nexport function deleteDatabase() {\n  var idbFactory;\n  return _regeneratorRuntime.async(function deleteDatabase$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          idbFactory = getIndexedDBFactory();\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n\n            deleteRequest.onsuccess = function () {\n              return resolve();\n            };\n\n            deleteRequest.onerror = function (error) {\n              return reject(error);\n            };\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  }\n\n  var theWindow = typeof window === 'undefined' ? self : window;\n  var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n\n  return factory;\n}\n\nfunction setUpDatabase(openRequest) {\n  var db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n\nexport var BrowserIndexedDB = function () {\n  function BrowserIndexedDB(modelPath) {\n    _classCallCheck(this, BrowserIndexedDB);\n\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n  }\n\n  _createClass(BrowserIndexedDB, [{\n    key: \"save\",\n    value: function save(modelArtifacts) {\n      return _regeneratorRuntime.async(function save$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context2.next = 2;\n                break;\n              }\n\n              throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n\n            case 2:\n              return _context2.abrupt(\"return\", this.databaseAction(this.modelPath, modelArtifacts));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      return _regeneratorRuntime.async(function load$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.databaseAction(this.modelPath));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"databaseAction\",\n    value: function databaseAction(modelPath, modelArtifacts) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n        openRequest.onupgradeneeded = function () {\n          return setUpDatabase(openRequest);\n        };\n\n        openRequest.onsuccess = function () {\n          var db = openRequest.result;\n\n          if (modelArtifacts == null) {\n            var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n            var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            var getRequest = modelStore.get(_this.modelPath);\n\n            getRequest.onsuccess = function () {\n              if (getRequest.result == null) {\n                db.close();\n                return reject(new Error(\"Cannot find model with path '\" + _this.modelPath + \"' \" + \"in IndexedDB.\"));\n              } else {\n                resolve(getRequest.result.modelArtifacts);\n              }\n            };\n\n            getRequest.onerror = function (error) {\n              db.close();\n              return reject(getRequest.error);\n            };\n\n            modelTx.oncomplete = function () {\n              return db.close();\n            };\n          } else {\n            var modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n            var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n            var putInfoRequest = infoStore.put({\n              modelPath: _this.modelPath,\n              modelArtifactsInfo: modelArtifactsInfo\n            });\n\n            var _modelTx;\n\n            putInfoRequest.onsuccess = function () {\n              _modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n\n              var modelStore = _modelTx.objectStore(MODEL_STORE_NAME);\n\n              var putModelRequest = modelStore.put({\n                modelPath: _this.modelPath,\n                modelArtifacts: modelArtifacts,\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n\n              putModelRequest.onsuccess = function () {\n                return resolve({\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n              };\n\n              putModelRequest.onerror = function (error) {\n                infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                var deleteInfoRequest = infoStore.delete(_this.modelPath);\n\n                deleteInfoRequest.onsuccess = function () {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n\n                deleteInfoRequest.onerror = function (error) {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n              };\n            };\n\n            putInfoRequest.onerror = function (error) {\n              db.close();\n              return reject(putInfoRequest.error);\n            };\n\n            infoTx.oncomplete = function () {\n              if (_modelTx == null) {\n                db.close();\n              } else {\n                _modelTx.oncomplete = function () {\n                  return db.close();\n                };\n              }\n            };\n          }\n        };\n\n        openRequest.onerror = function (error) {\n          return reject(openRequest.error);\n        };\n      });\n    }\n  }]);\n\n  return BrowserIndexedDB;\n}();\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport var indexedDBRouter = function indexedDBRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\n\nexport var BrowserIndexedDBManager = function () {\n  function BrowserIndexedDBManager() {\n    _classCallCheck(this, BrowserIndexedDBManager);\n\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  _createClass(BrowserIndexedDBManager, [{\n    key: \"listModels\",\n    value: function listModels() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function listModels$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this2.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                  var store = tx.objectStore(INFO_STORE_NAME);\n                  var getAllInfoRequest = store.getAll();\n\n                  getAllInfoRequest.onsuccess = function () {\n                    var out = {};\n\n                    for (var _iterator = _createForOfIteratorHelperLoose(getAllInfoRequest.result), _step; !(_step = _iterator()).done;) {\n                      var item = _step.value;\n                      out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n\n                    resolve(out);\n                  };\n\n                  getAllInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                  };\n\n                  tx.oncomplete = function () {\n                    return db.close();\n                  };\n                };\n\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"removeModel\",\n    value: function removeModel(path) {\n      var _this3 = this;\n\n      return _regeneratorRuntime.async(function removeModel$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              path = maybeStripScheme(path);\n              return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this3.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                  var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                  var getInfoRequest = infoStore.get(path);\n                  var modelTx;\n\n                  getInfoRequest.onsuccess = function () {\n                    if (getInfoRequest.result == null) {\n                      db.close();\n                      return reject(new Error(\"Cannot find model with path '\" + path + \"' \" + \"in IndexedDB.\"));\n                    } else {\n                      var deleteInfoRequest = infoStore.delete(path);\n\n                      var deleteModelData = function deleteModelData() {\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        var deleteModelRequest = modelStore.delete(path);\n\n                        deleteModelRequest.onsuccess = function () {\n                          return resolve(getInfoRequest.result.modelArtifactsInfo);\n                        };\n\n                        deleteModelRequest.onerror = function (error) {\n                          return reject(getInfoRequest.error);\n                        };\n                      };\n\n                      deleteInfoRequest.onsuccess = deleteModelData;\n\n                      deleteInfoRequest.onerror = function (error) {\n                        deleteModelData();\n                        db.close();\n                        return reject(getInfoRequest.error);\n                      };\n                    }\n                  };\n\n                  getInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                  };\n\n                  infoTx.oncomplete = function () {\n                    if (modelTx == null) {\n                      db.close();\n                    } else {\n                      modelTx.oncomplete = function () {\n                        return db.close();\n                      };\n                    }\n                  };\n                };\n\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return BrowserIndexedDBManager;\n}();","map":{"version":3,"sources":["../../src/io/indexed_db.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        const putModelRequest = modelStore.put({\n                            modelPath: this.modelPath,\n                            modelArtifacts,\n                            modelArtifactsInfo\n                        });\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n//# sourceMappingURL=indexed_db.js.map"]},"metadata":{},"sourceType":"module"}