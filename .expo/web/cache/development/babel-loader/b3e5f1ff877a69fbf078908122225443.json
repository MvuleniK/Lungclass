{"ast":null,"code":"import { convertToTensor } from \"../tensor_util_env\";\nimport * as util from \"../util\";\nimport { matMul } from \"./mat_mul\";\nimport { op } from \"./operation\";\nimport { reshape } from \"./reshape\";\n\nfunction outerProduct_(v1, v2) {\n  var $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  var $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n  util.assert($v1.rank === 1 && $v2.rank === 1, function () {\n    return \"Error in outerProduct: inputs must be rank 1, but got ranks \" + ($v1.rank + \" and \" + $v2.rank + \".\");\n  });\n  var v12D = reshape($v1, [-1, 1]);\n  var v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\n\nexport var outerProduct = op({\n  outerProduct_: outerProduct_\n});","map":{"version":3,"sources":["../../src/ops/outer_product.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR;AAEA,OAAO,KAAK,IAAZ;AAEA,SAAQ,MAAR;AACA,SAAQ,EAAR;AACA,SAAQ,OAAR;;AAgBA,SAAS,aAAT,CACI,EADJ,EAC6B,EAD7B,EACoD;EAClD,IAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,cAAX,CAA3B;EACA,IAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,cAAX,CAA3B;EAEA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CAAb,IAAkB,GAAG,CAAC,IAAJ,KAAa,CADnC,EAEI;IAAA,OAAM,kEACC,GAAG,CAAC,IADL,aACiB,GAAG,CAAC,IADrB,OAAN;EAAA,CAFJ;EAKA,IAAM,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,CAAF,EAAK,CAAL,CAAN,CAApB;EACA,IAAM,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,CAAC,CAAL,CAAN,CAApB;EACA,OAAO,MAAM,CAAC,IAAD,EAAO,IAAP,CAAb;AACD;;AAED,OAAO,IAAM,YAAY,GAAG,EAAE,CAAC;EAAC,aAAa,EAAb;AAAD,CAAD,CAAvB","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(v1, v2) {\n    const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n    const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n    util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n        `${$v1.rank} and ${$v2.rank}.`);\n    const v12D = reshape($v1, [-1, 1]);\n    const v22D = reshape($v2, [1, -1]);\n    return matMul(v12D, v22D);\n}\nexport const outerProduct = op({ outerProduct_ });\n//# sourceMappingURL=outer_product.js.map"]},"metadata":{},"sourceType":"module"}