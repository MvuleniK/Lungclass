{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from \"../scatter_gpu\";\nimport { reshape } from \"./Reshape\";\nexport function scatterNd(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var indices = inputs.indices,\n      updates = inputs.updates;\n  var shape = attrs.shape;\n\n  var _backend_util$calcula = backend_util.calculateShapes(updates, indices, shape),\n      sliceRank = _backend_util$calcula.sliceRank,\n      numUpdates = _backend_util$calcula.numUpdates,\n      sliceSize = _backend_util$calcula.sliceSize,\n      strides = _backend_util$calcula.strides,\n      outputSize = _backend_util$calcula.outputSize;\n\n  var flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  var flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  var flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend: backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  var defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0]));\n  var program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport var scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,SAAhD,QAA6G,uBAA7G;AAGA,SAAQ,cAAR;AACA,SAAQ,OAAR;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,OAAP,GAA2B,MAA3B,CAAO,OAAP;EAAA,IAAgB,OAAhB,GAA2B,MAA3B,CAAgB,OAAhB;EACA,IAAO,KAAP,GAAgB,KAAhB,CAAO,KAAP;;EAEA,4BACI,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CADJ;EAAA,IAAO,SAAP,yBAAO,SAAP;EAAA,IAAkB,UAAlB,yBAAkB,UAAlB;EAAA,IAA8B,SAA9B,yBAA8B,SAA9B;EAAA,IAAyC,OAAzC,yBAAyC,OAAzC;EAAA,IAAkD,UAAlD,yBAAkD,UAAlD;;EAGA,IAAM,YAAY,GAAG,CAAC,UAAU,GAAG,SAAd,EAAyB,SAAzB,CAArB;;EAEA,IAAI,UAAU,KAAK,CAAnB,EAAsB;IACpB,OAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,OAAO,CAAC,KAAtC,CAAP;EACD;;EAED,IAAM,cAAc,GAAG,OAAO,CAC1B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAuB,OAAO,EAAP,OAAvB;IAAgC,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,UAAD,EAAa,SAAb;IAAR;EAAvC,CAD0B,CAA9B;EAEA,IAAM,QAAQ,GAAG,OAAO,CACpB;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAuB,OAAO,EAAP,OAAvB;IAAgC,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,UAAD,EAAa,SAAb;IAAR;EAAvC,CADoB,CAAxB;EAGA,IAAM,YAAY,GAAG,OAAO,CAAC,cAAR,CACjB,EADiB,EACb,SADa,EACF,IAAI,YAAJ,CAAiB,CAAC,CAAD,CAAjB,CADE,CAArB;EAEA,IAAM,OAAO,GAAG,IAAI,cAAJ,CACZ,UADY,EACA,SADA,EACW,cAAc,CAAC,KAAf,CAAqB,MADhC,EACwC,QAAQ,CAAC,KAAT,CAAe,MADvD,EAEZ,OAFY,EAEH,YAFG,CAAhB;EAGA,IAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,QAAD,EAAW,cAAX,EAA2B,YAA3B,CADD,EAC2C,QAAQ,CAAC,KADpD,CAAZ;EAGA,IAAM,QAAQ,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAmB,OAAO,EAAP,OAAnB;IAA4B,KAAK,EAAE;MAAC,KAAK,EAAL;IAAD;EAAnC,CAAD,CAAxB;EAEA,OAAO,CAAC,6BAAR,CAAsC,cAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,YAAtC;EAEA,OAAO,QAAP;AACD;AAED,OAAO,IAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,SAD+B;EAE3C,WAAW,EAAE,OAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map"]},"metadata":{},"sourceType":"module"}