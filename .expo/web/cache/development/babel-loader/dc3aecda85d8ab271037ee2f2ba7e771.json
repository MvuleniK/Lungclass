{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherNd, util } from '@tensorflow/tfjs-core';\nexport function gatherNd(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var params = inputs.params,\n      indices = inputs.indices;\n  var paramsSize = util.sizeFromShape(params.shape);\n  var indicesShape = indices.shape;\n  var sliceRank = indicesShape[indicesShape.length - 1];\n\n  var _backend_util$prepare = backend_util.prepareAndValidate(params, indices),\n      _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n      resultShape = _backend_util$prepare2[0],\n      numSlices = _backend_util$prepare2[1],\n      sliceSize = _backend_util$prepare2[2],\n      strides = _backend_util$prepare2[3];\n\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  var outBuf = buffer([numSlices, sliceSize], params.dtype);\n  var indicesData = backend.data.get(indices.dataId).values;\n  var paramsData = backend.data.get(params.dataId).values;\n\n  for (var i = 0; i < numSlices; i++) {\n    var index = [];\n    var flattenIndex = 0;\n\n    for (var j = 0; j < sliceRank; j++) {\n      var dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\"Invalid indices: \" + index + \" does not index into \" + params.shape);\n    }\n\n    for (var k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] = paramsData[flattenIndex * sliceSize + k];\n    }\n  }\n\n  return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\nexport var gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../src/kernels/GatherNd.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,MAAtB,EAA8B,QAA9B,EAA0G,IAA1G,QAAqH,uBAArH;AAIA,OAAM,SAAU,QAAV,CACF,IADE,EACqD;EACzD,IAAO,MAAP,GAA0B,IAA1B,CAAO,MAAP;EAAA,IAAe,OAAf,GAA0B,IAA1B,CAAe,OAAf;EACA,IAAO,MAAP,GAA0B,MAA1B,CAAO,MAAP;EAAA,IAAe,OAAf,GAA0B,MAA1B,CAAe,OAAf;EAEA,IAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,CAAnB;EAEA,IAAM,YAAY,GAAG,OAAO,CAAC,KAA7B;EACA,IAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAA9B;;EAEA,4BACI,YAAY,CAAC,kBAAb,CAAgC,MAAhC,EAAwC,OAAxC,CADJ;EAAA;EAAA,IAAO,WAAP;EAAA,IAAoB,SAApB;EAAA,IAA+B,SAA/B;EAAA,IAA0C,OAA1C;;EAEA,IAAI,SAAS,KAAK,CAAlB,EAAqB;IACnB,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,EAAlD,CAAP;EACD;;EAED,IAAM,MAAM,GAAG,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,MAAM,CAAC,KAAhC,CAArB;EACA,IAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAArD;EACA,IAAM,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,MAAM,CAAC,MAAxB,EAAgC,MAAnD;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;IAClC,IAAM,KAAK,GAAG,EAAd;IACA,IAAI,YAAY,GAAG,CAAnB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;MAClC,IAAM,GAAG,GAAG,WAAW,CAAC,CAAC,GAAG,SAAJ,GAAgB,CAAjB,CAAvB;MACA,YAAY,IAAI,GAAG,GAAG,OAAO,CAAC,CAAD,CAA7B;MACA,KAAK,CAAC,IAAN,CAAW,GAAX;IACD;;IACD,IAAI,YAAY,GAAG,CAAf,IAAoB,YAAY,IAAI,UAAU,GAAG,SAArD,EAAgE;MAC9D,MAAM,IAAI,KAAJ,uBACkB,KADlB,6BAC+C,MAAM,CAAC,KADtD,CAAN;IAED;;IAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;MAClC,MAAM,CAAC,MAAP,CAAc,CAAC,GAAG,SAAJ,GAAgB,CAA9B,IACI,UAAU,CAAC,YAAY,GAAG,SAAf,GAA2B,CAA5B,CADd;IAED;EACF;;EAED,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,MAAM,CAAC,MAAzD,CAAP;AACD;AAED,OAAO,IAAM,cAAc,GAAiB;EAC1C,UAAU,EAAE,QAD8B;EAE1C,WAAW,EAAE,KAF6B;EAG1C,UAAU,EAAE;AAH8B,CAArC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherNd, util } from '@tensorflow/tfjs-core';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const paramsSize = util.sizeFromShape(params.shape);\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    if (numSlices === 0) {\n        return backend.makeTensorInfo(resultShape, params.dtype, []);\n    }\n    const outBuf = buffer([numSlices, sliceSize], params.dtype);\n    const indicesData = backend.data.get(indices.dataId).values;\n    const paramsData = backend.data.get(params.dataId).values;\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${params.shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsData[flattenIndex * sliceSize + k];\n        }\n    }\n    return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'cpu',\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map"]},"metadata":{},"sourceType":"module"}