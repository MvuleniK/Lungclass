{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from \"./util_base\";\nvar TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\nexport var Environment = function () {\n  function Environment(global) {\n    _classCallCheck(this, Environment);\n\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  _createClass(Environment, [{\n    key: \"setPlatform\",\n    value: function setPlatform(platformName, platform) {\n      if (this.platform != null) {\n        console.warn(\"Platform \" + this.platformName + \" has already been set. \" + (\"Overwriting the platform with \" + platform + \".\"));\n      }\n\n      this.platformName = platformName;\n      this.platform = platform;\n    }\n  }, {\n    key: \"registerFlag\",\n    value: function registerFlag(flagName, evaluationFn, setHook) {\n      this.flagRegistry[flagName] = {\n        evaluationFn: evaluationFn,\n        setHook: setHook\n      };\n\n      if (this.urlFlags[flagName] != null) {\n        var flagValue = this.urlFlags[flagName];\n        console.warn(\"Setting feature override from URL \" + flagName + \": \" + flagValue + \".\");\n        this.set(flagName, flagValue);\n      }\n    }\n  }, {\n    key: \"getAsync\",\n    value: function getAsync(flagName) {\n      return _regeneratorRuntime.async(function getAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(flagName in this.flags)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.flags[flagName]);\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.evaluateFlag(flagName));\n\n            case 4:\n              this.flags[flagName] = _context.sent;\n              return _context.abrupt(\"return\", this.flags[flagName]);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"get\",\n    value: function get(flagName) {\n      if (flagName in this.flags) {\n        return this.flags[flagName];\n      }\n\n      var flagValue = this.evaluateFlag(flagName);\n\n      if (isPromise(flagValue)) {\n        throw new Error(\"Flag \" + flagName + \" cannot be synchronously evaluated. \" + \"Please use getAsync() instead.\");\n      }\n\n      this.flags[flagName] = flagValue;\n      return this.flags[flagName];\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(flagName) {\n      return this.get(flagName);\n    }\n  }, {\n    key: \"getBool\",\n    value: function getBool(flagName) {\n      return this.get(flagName);\n    }\n  }, {\n    key: \"getFlags\",\n    value: function getFlags() {\n      return this.flags;\n    }\n  }, {\n    key: \"features\",\n    get: function get() {\n      return this.flags;\n    }\n  }, {\n    key: \"set\",\n    value: function set(flagName, value) {\n      if (this.flagRegistry[flagName] == null) {\n        throw new Error(\"Cannot set flag \" + flagName + \" as it has not been registered.\");\n      }\n\n      this.flags[flagName] = value;\n\n      if (this.flagRegistry[flagName].setHook != null) {\n        this.flagRegistry[flagName].setHook(value);\n      }\n    }\n  }, {\n    key: \"evaluateFlag\",\n    value: function evaluateFlag(flagName) {\n      if (this.flagRegistry[flagName] == null) {\n        throw new Error(\"Cannot evaluate flag '\" + flagName + \"': no evaluation function found.\");\n      }\n\n      return this.flagRegistry[flagName].evaluationFn();\n    }\n  }, {\n    key: \"setFlags\",\n    value: function setFlags(flags) {\n      this.flags = _extends({}, flags);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.flags = {};\n      this.urlFlags = {};\n      this.populateURLFlags();\n    }\n  }, {\n    key: \"populateURLFlags\",\n    value: function populateURLFlags() {\n      var _this = this;\n\n      if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n        return;\n      }\n\n      var urlParams = getQueryParams(this.global.location.search);\n\n      if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n        var keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n        keyValues.forEach(function (keyValue) {\n          var _keyValue$split = keyValue.split(':'),\n              _keyValue$split2 = _slicedToArray(_keyValue$split, 2),\n              key = _keyValue$split2[0],\n              value = _keyValue$split2[1];\n\n          _this.urlFlags[key] = parseValue(key, value);\n        });\n      }\n    }\n  }]);\n\n  return Environment;\n}();\nexport function getQueryParams(queryString) {\n  var params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n    for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      t[_key - 1] = arguments[_key];\n    }\n\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (\"\" + +value === value) {\n    return +value;\n  }\n\n  throw new Error(\"Could not parse value flag value \" + value + \" for flag \" + flagName + \".\");\n}\n\nexport function env() {\n  return ENV;\n}\nexport var ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":{"version":3,"sources":["../src/environment.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            console.warn(`Platform ${this.platformName} has already been set. ` +\n                `Overwriting the platform with ${platform}.`);\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because the\n        // environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    value = value.toLowerCase();\n    if (value === 'true' || value === 'false') {\n        return value === 'true';\n    }\n    else if (`${+value}` === value) {\n        return +value;\n    }\n    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n//# sourceMappingURL=environment.js.map"]},"metadata":{},"sourceType":"module"}