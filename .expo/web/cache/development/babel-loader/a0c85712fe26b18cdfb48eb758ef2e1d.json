{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport \"../flags\";\nimport { env } from \"../environment\";\nimport { assert } from \"../util\";\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from \"./io_utils\";\nimport { IORouterRegistry } from \"./router_registry\";\nvar PATH_SEPARATOR = '/';\nvar PATH_PREFIX = 'tensorflowjs_models';\nvar INFO_SUFFIX = 'info';\nvar MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nvar WEIGHT_SPECS_SUFFIX = 'weight_specs';\nvar WEIGHT_DATA_SUFFIX = 'weight_data';\nvar MODEL_METADATA_SUFFIX = 'model_metadata';\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  var LS = window.localStorage;\n  var purgedModelPaths = [];\n\n  for (var i = 0; i < LS.length; ++i) {\n    var key = LS.key(i);\n    var prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      var modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction getModelPathFromKey(key) {\n  var items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(\"Invalid key format: \" + key);\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n\nexport var BrowserLocalStorage = function () {\n  function BrowserLocalStorage(modelPath) {\n    _classCallCheck(this, BrowserLocalStorage);\n\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  _createClass(BrowserLocalStorage, [{\n    key: \"save\",\n    value: function save(modelArtifacts) {\n      var topology, weightSpecs, modelArtifactsInfo;\n      return _regeneratorRuntime.async(function save$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n\n            case 4:\n              topology = JSON.stringify(modelArtifacts.modelTopology);\n              weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n              modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n              _context.prev = 7;\n              this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n              this.LS.setItem(this.keys.topology, topology);\n              this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n              this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n              this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                userDefinedMetadata: modelArtifacts.userDefinedMetadata\n              }));\n              return _context.abrupt(\"return\", {\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](7);\n              this.LS.removeItem(this.keys.info);\n              this.LS.removeItem(this.keys.topology);\n              this.LS.removeItem(this.keys.weightSpecs);\n              this.LS.removeItem(this.keys.weightData);\n              this.LS.removeItem(this.keys.modelMetadata);\n              throw new Error(\"Failed to save model '\" + this.modelPath + \"' to local storage: \" + \"size quota being exceeded is a possible cause of this failure: \" + (\"modelTopologyBytes=\" + modelArtifactsInfo.modelTopologyBytes + \", \") + (\"weightSpecsBytes=\" + modelArtifactsInfo.weightSpecsBytes + \", \") + (\"weightDataBytes=\" + modelArtifactsInfo.weightDataBytes + \".\"));\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 16]], Promise);\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var info, out, topology, weightSpecs, metadataString, metadata, weightDataBase64;\n      return _regeneratorRuntime.async(function load$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              info = JSON.parse(this.LS.getItem(this.keys.info));\n\n              if (!(info == null)) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error(\"In local storage, there is no model with name '\" + this.modelPath + \"'\");\n\n            case 3:\n              if (!(info.modelTopologyType !== 'JSON')) {\n                _context2.next = 5;\n                break;\n              }\n\n              throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n\n            case 5:\n              out = {};\n              topology = JSON.parse(this.LS.getItem(this.keys.topology));\n\n              if (!(topology == null)) {\n                _context2.next = 9;\n                break;\n              }\n\n              throw new Error(\"In local storage, the topology of model '\" + this.modelPath + \"' \" + \"is missing.\");\n\n            case 9:\n              out.modelTopology = topology;\n              weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n\n              if (!(weightSpecs == null)) {\n                _context2.next = 13;\n                break;\n              }\n\n              throw new Error(\"In local storage, the weight specs of model '\" + this.modelPath + \"' \" + \"are missing.\");\n\n            case 13:\n              out.weightSpecs = weightSpecs;\n              metadataString = this.LS.getItem(this.keys.modelMetadata);\n\n              if (metadataString != null) {\n                metadata = JSON.parse(metadataString);\n                out.format = metadata['format'];\n                out.generatedBy = metadata['generatedBy'];\n                out.convertedBy = metadata['convertedBy'];\n                out.userDefinedMetadata = metadata['userDefinedMetadata'];\n              }\n\n              weightDataBase64 = this.LS.getItem(this.keys.weightData);\n\n              if (!(weightDataBase64 == null)) {\n                _context2.next = 19;\n                break;\n              }\n\n              throw new Error(\"In local storage, the binary weight values of model \" + (\"'\" + this.modelPath + \"' are missing.\"));\n\n            case 19:\n              out.weightData = base64StringToArrayBuffer(weightDataBase64);\n              return _context2.abrupt(\"return\", out);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return BrowserLocalStorage;\n}();\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport var localStorageRouter = function localStorageRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport var BrowserLocalStorageManager = function () {\n  function BrowserLocalStorageManager() {\n    _classCallCheck(this, BrowserLocalStorageManager);\n\n    assert(env().getBool('IS_BROWSER'), function () {\n      return 'Current environment is not a web browser';\n    });\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', function () {\n      return 'Current browser does not appear to support localStorage';\n    });\n    this.LS = window.localStorage;\n  }\n\n  _createClass(BrowserLocalStorageManager, [{\n    key: \"listModels\",\n    value: function listModels() {\n      var out, prefix, suffix, i, key, modelPath;\n      return _regeneratorRuntime.async(function listModels$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              out = {};\n              prefix = PATH_PREFIX + PATH_SEPARATOR;\n              suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n              for (i = 0; i < this.LS.length; ++i) {\n                key = this.LS.key(i);\n\n                if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                  modelPath = getModelPathFromKey(key);\n                  out[modelPath] = JSON.parse(this.LS.getItem(key));\n                }\n              }\n\n              return _context3.abrupt(\"return\", out);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"removeModel\",\n    value: function removeModel(path) {\n      var keys, info;\n      return _regeneratorRuntime.async(function removeModel$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              path = maybeStripScheme(path);\n              keys = getModelKeys(path);\n\n              if (!(this.LS.getItem(keys.info) == null)) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw new Error(\"Cannot find model at path '\" + path + \"'\");\n\n            case 4:\n              info = JSON.parse(this.LS.getItem(keys.info));\n              this.LS.removeItem(keys.info);\n              this.LS.removeItem(keys.topology);\n              this.LS.removeItem(keys.weightSpecs);\n              this.LS.removeItem(keys.weightData);\n              return _context4.abrupt(\"return\", info);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return BrowserLocalStorageManager;\n}();","map":{"version":3,"sources":["../../src/io/local_storage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy,\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata\n                }));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                this.LS.removeItem(this.keys.info);\n                this.LS.removeItem(this.keys.topology);\n                this.LS.removeItem(this.keys.weightSpecs);\n                this.LS.removeItem(this.keys.weightData);\n                this.LS.removeItem(this.keys.modelMetadata);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata['format'];\n            out.generatedBy = metadata['generatedBy'];\n            out.convertedBy = metadata['convertedBy'];\n            out.userDefinedMetadata = metadata['userDefinedMetadata'];\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        this.LS.removeItem(keys.info);\n        this.LS.removeItem(keys.topology);\n        this.LS.removeItem(keys.weightSpecs);\n        this.LS.removeItem(keys.weightData);\n        return info;\n    }\n}\n//# sourceMappingURL=local_storage.js.map"]},"metadata":{},"sourceType":"module"}