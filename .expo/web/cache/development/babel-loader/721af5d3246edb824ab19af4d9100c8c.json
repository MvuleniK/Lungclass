{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport var MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName) {\n  var checkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (userDefinedMetadata == null || typeof userDefinedMetadata !== 'object' || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    var out = JSON.stringify(userDefinedMetadata);\n\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\"User-defined metadata of model \\\"\" + modelName + \"\\\" is too large in \" + (\"size (length=\" + out.length + \" when serialized). It is not \") + \"recommended to store such large objects in user-defined metadata. \" + \"Please make sure its serialized length is <= \" + (MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH + \".\"));\n    }\n  }\n}\nexport function plainObjectCheck(x) {\n  if (x === null) {\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      var keys = Object.keys(x);\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n\n        if (typeof key !== 'string') {\n          return false;\n        }\n\n        if (!plainObjectCheck(x[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    } else {\n      if (Array.isArray(x)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(x), _step; !(_step = _iterator()).done;) {\n          var item = _step.value;\n\n          if (!plainObjectCheck(item)) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    var xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}","map":{"version":3,"sources":["../src/user_defined_metadata.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAQG;AAOH,OAAO,IAAM,2CAA2C,GAAG,IAAI,IAAJ,GAAW,IAA/D;AAcP,OAAM,SAAU,wBAAV,CACF,mBADE,EACuB,SADvB,EAC2D;EAAA,IAAjB,SAAiB,uEAAL,KAAK;;EAC/D,IAAI,mBAAmB,IAAI,IAAvB,IACA,OAAO,mBAAP,KAA+B,QAD/B,IAEA,MAAM,CAAC,cAAP,CAAsB,mBAAtB,MAA+C,MAAM,CAAC,SAFtD,IAGA,CAAC,gBAAgB,CAAC,mBAAD,CAHrB,EAG4C;IAC1C,MAAM,IAAI,KAAJ,CACF,oEADE,CAAN;EAED;;EAED,IAAI,SAAJ,EAAe;IACb,IAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,mBAAf,CAAZ;;IACA,IAAI,GAAG,CAAC,MAAJ,GAAa,2CAAjB,EAA8D;MAC5D,OAAO,CAAC,IAAR,CACI,sCAAmC,SAAnC,8CACgB,GAAG,CAAC,MADpB,gKAIG,2CAJH,OADJ;IAMD;EACF;AACF;AAaD,OAAM,SAAU,gBAAV,CAA2B,CAA3B,EAAiC;EACrC,IAAI,CAAC,KAAK,IAAV,EAAgB;IAEd,OAAO,IAAP;EACD,CAHD,MAGO,IAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;IAChC,IAAI,MAAM,CAAC,cAAP,CAAsB,CAAtB,MAA6B,MAAM,CAAC,SAAxC,EAAmD;MAEjD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAb;;MACA,yBAAkB,IAAlB,2BAAwB;QAAnB,IAAM,GAAG,YAAT;;QACH,IAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;UAE3B,OAAO,KAAP;QACD;;QACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAD,CAAF,CAArB,EAA+B;UAC7B,OAAO,KAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD,CAbD,MAaO;MAEL,IAAI,KAAK,CAAC,OAAN,CAAc,CAAd,CAAJ,EAAsB;QAEpB,qDAAmB,CAAnB,wCAAsB;UAAA,IAAX,IAAW;;UACpB,IAAI,CAAC,gBAAgB,CAAC,IAAD,CAArB,EAA6B;YAC3B,OAAO,KAAP;UACD;QACF;;QACD,OAAO,IAAP;MACD,CARD,MAQO;QAIL,OAAO,KAAP;MACD;IACF;EACF,CA/BM,MA+BA;IAEL,IAAM,KAAK,GAAG,OAAO,CAArB;IACA,OAAO,KAAK,KAAK,QAAV,IAAsB,KAAK,KAAK,QAAhC,IAA4C,KAAK,KAAK,SAA7D;EACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n    if (userDefinedMetadata == null ||\n        typeof userDefinedMetadata !== 'object' ||\n        Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n        !plainObjectCheck(userDefinedMetadata)) {\n        throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n    }\n    if (checkSize) {\n        const out = JSON.stringify(userDefinedMetadata);\n        if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n            console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` +\n                `size (length=${out.length} when serialized). It is not ` +\n                `recommended to store such large objects in user-defined metadata. ` +\n                `Please make sure its serialized length is <= ` +\n                `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n        }\n    }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x) {\n    if (x === null) {\n        // Note: typeof `null` is 'object', and `null` is valid in JSON.\n        return true;\n    }\n    else if (typeof x === 'object') {\n        if (Object.getPrototypeOf(x) === Object.prototype) {\n            // `x` is a JavaScript object and its prototype is Object.\n            const keys = Object.keys(x);\n            for (const key of keys) {\n                if (typeof key !== 'string') {\n                    // JSON keys must be strings.\n                    return false;\n                }\n                if (!plainObjectCheck(x[key])) { // Recursive call.\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            // `x` is a JavaScript object but its prototype is not Object.\n            if (Array.isArray(x)) {\n                // `x` is a JavaScript array.\n                for (const item of x) {\n                    if (!plainObjectCheck(item)) { // Recursive call.\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                // `x` is a JavaScript object and its prototype is not Object,\n                // and it's not an Array. I.e., it's a complex object such as\n                // `Error` and `Date`.\n                return false;\n            }\n        }\n    }\n    else {\n        // `x` is not a JavaScript object or `null`.\n        const xType = typeof x;\n        return xType === 'string' || xType === 'number' || xType === 'boolean';\n    }\n}\n//# sourceMappingURL=user_defined_metadata.js.map"]},"metadata":{},"sourceType":"module"}