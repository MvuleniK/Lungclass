{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from \"./backend/common\";\nimport { ValueError } from \"./errors\";\nexport function getOptimizer(identifier) {\n  var optimizerMap = {\n    'Adagrad': function Adagrad() {\n      return train.adagrad(0.01);\n    },\n    'Adadelta': function Adadelta() {\n      return train.adadelta(1, 0.95, epsilon());\n    },\n    'Adam': function Adam() {\n      return train.adam(0.001, 0.9, 0.999, epsilon());\n    },\n    'Adamax': function Adamax() {\n      return train.adamax(0.002, 0.9, 0.999, epsilon(), 0);\n    },\n    'RMSProp': function RMSProp() {\n      return train.rmsprop(0.001, 0.9, 0, epsilon());\n    },\n    'SGD': function SGD() {\n      return train.sgd(0.01);\n    }\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n\n  throw new ValueError(\"Unknown Optimizer \" + identifier);\n}","map":{"version":3,"sources":["../src/optimizers.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAMH,SAAmB,KAAnB,QAA+B,uBAA/B;AAEA,SAAQ,OAAR;AAEA,SAAQ,UAAR;AAMA,OAAM,SAAU,YAAV,CAAuB,UAAvB,EAAyC;EAC7C,IAAM,YAAY,GAA+C;IAC/D,WAAW;MAAA,OAAM,KAAK,CAAC,OAAN,CAAc,IAAd,CAAN;IAAA,CADoD;IAE/D,YAAY;MAAA,OAAM,KAAK,CAAC,QAAN,CAAe,CAAf,EAAkB,IAAlB,EAAwB,OAAO,EAA/B,CAAN;IAAA,CAFmD;IAG/D,QAAQ;MAAA,OAAM,KAAK,CAAC,IAAN,CAAW,KAAX,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,OAAO,EAArC,CAAN;IAAA,CAHuD;IAI/D,UAAU;MAAA,OAAM,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,GAApB,EAAyB,KAAzB,EAAgC,OAAO,EAAvC,EAA2C,CAA3C,CAAN;IAAA,CAJqD;IAK/D,WAAW;MAAA,OAAM,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,GAArB,EAA0B,CAA1B,EAA6B,OAAO,EAApC,CAAN;IAAA,CALoD;IAM/D,OAAO;MAAA,OAAM,KAAK,CAAC,GAAN,CAAU,IAAV,CAAN;IAAA;EANwD,CAAjE;EAQA,YAAY,CAAC,SAAD,CAAZ,GAA0B,YAAY,CAAC,SAAD,CAAtC;EACA,YAAY,CAAC,UAAD,CAAZ,GAA2B,YAAY,CAAC,UAAD,CAAvC;EACA,YAAY,CAAC,MAAD,CAAZ,GAAuB,YAAY,CAAC,MAAD,CAAnC;EACA,YAAY,CAAC,QAAD,CAAZ,GAAyB,YAAY,CAAC,QAAD,CAArC;EACA,YAAY,CAAC,SAAD,CAAZ,GAA0B,YAAY,CAAC,SAAD,CAAtC;EACA,YAAY,CAAC,KAAD,CAAZ,GAAsB,YAAY,CAAC,KAAD,CAAlC;;EAEA,IAAI,UAAU,IAAI,YAAlB,EAAgC;IAC9B,OAAO,YAAY,CAAC,UAAD,CAAZ,EAAP;EACD;;EACD,MAAM,IAAI,UAAJ,wBAAoC,UAApC,CAAN;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Optimizers.\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { ValueError } from './errors';\n// Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier) {\n    const optimizerMap = {\n        'Adagrad': () => train.adagrad(0.01),\n        'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n        'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n        'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n        'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n        'SGD': () => train.sgd(0.01)\n    };\n    optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n    optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n    optimizerMap['adam'] = optimizerMap['Adam'];\n    optimizerMap['adamax'] = optimizerMap['Adamax'];\n    optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n    optimizerMap['sgd'] = optimizerMap['SGD'];\n    if (identifier in optimizerMap) {\n        return optimizerMap[identifier]();\n    }\n    throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n//# sourceMappingURL=optimizers.js.map"]},"metadata":{},"sourceType":"module"}