{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\nexport var HashTable = function () {\n  function HashTable(keyDType, valueDType) {\n    _classCallCheck(this, HashTable);\n\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  _createClass(HashTable, [{\n    key: \"id\",\n    get: function get() {\n      return this.handle.id;\n    }\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose() {\n      this.tensorMap.forEach(function (value) {\n        return value.dispose();\n      });\n      this.tensorMap.clear();\n      this.handle.dispose();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensorMap.size;\n    }\n  }, {\n    key: \"import\",\n    value: function _import(keys, values) {\n      var _this = this;\n\n      var $keys;\n      return _regeneratorRuntime.async(function _import$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, values);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(keys.data());\n\n            case 3:\n              $keys = _context.sent;\n              this.tensorMap.forEach(function (value) {\n                return value.dispose();\n              });\n              this.tensorMap.clear();\n              return _context.abrupt(\"return\", tidy(function () {\n                var $values = unstack(values);\n                var keysLength = $keys.length;\n                var valuesLength = $values.length;\n                util.assert(keysLength === valuesLength, function () {\n                  return \"The number of elements doesn't match, keys has \" + (keysLength + \" elements, the values has \" + valuesLength + \" \") + \"elements.\";\n                });\n\n                for (var i = 0; i < keysLength; i++) {\n                  var key = $keys[i];\n                  var value = $values[i];\n                  keep(value);\n\n                  _this.tensorMap.set(key, value);\n                }\n\n                return _this.handle;\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"find\",\n    value: function find(keys, defaultValue) {\n      var _this2 = this;\n\n      var $keys;\n      return _regeneratorRuntime.async(function find$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, defaultValue);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(keys.data());\n\n            case 3:\n              $keys = _context2.sent;\n              return _context2.abrupt(\"return\", tidy(function () {\n                var result = [];\n\n                for (var i = 0; i < $keys.length; i++) {\n                  var key = $keys[i];\n\n                  var value = _this2.findWithDefault(key, defaultValue);\n\n                  result.push(value);\n                }\n\n                return stack(result);\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"findWithDefault\",\n    value: function findWithDefault(key, defaultValue) {\n      var result = this.tensorMap.get(key);\n      return result != null ? result : defaultValue;\n    }\n  }, {\n    key: \"checkKeyAndValueTensor\",\n    value: function checkKeyAndValueTensor(key, value) {\n      if (key.dtype !== this.keyDType) {\n        throw new Error(\"Expect key dtype \" + this.keyDType + \", but got \" + (\"\" + key.dtype));\n      }\n\n      if (value.dtype !== this.valueDType) {\n        throw new Error(\"Expect value dtype \" + this.valueDType + \", but got \" + (\"\" + value.dtype));\n      }\n    }\n  }]);\n\n  return HashTable;\n}();","map":{"version":3,"sources":["../../src/executor/hash_table.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n//# sourceMappingURL=hash_table.js.map"]},"metadata":{},"sourceType":"module"}