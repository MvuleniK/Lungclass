{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from \"./shader_compiler\";\nexport var TransposeProgram = _createClass(function TransposeProgram(aShape, newDim) {\n  _classCallCheck(this, TransposeProgram);\n\n  this.variableNames = ['A'];\n  var outputShape = new Array(aShape.length);\n\n  for (var i = 0; i < outputShape.length; i++) {\n    outputShape[i] = aShape[newDim[i]];\n  }\n\n  this.outputShape = outputShape;\n  this.rank = outputShape.length;\n  var dtype = getCoordsDataType(this.rank);\n  var switched = getSwitchedCoords(newDim);\n  this.userCode = \"\\n    void main() {\\n      \" + dtype + \" resRC = getOutputCoords();\\n      setOutput(getA(\" + switched + \"));\\n    }\\n    \";\n});\n\nfunction getSwitchedCoords(newDim) {\n  var rank = newDim.length;\n\n  if (rank > 6) {\n    throw Error(\"Transpose for rank \" + rank + \" is not yet supported\");\n  }\n\n  var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  var switchedCoords = new Array(rank);\n\n  for (var i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n\n  return switchedCoords.join();\n}","map":{"version":3,"sources":["../src/transpose_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR;AAEA,WAAa,gBAAb,gBAME,0BAAY,MAAZ,EAA8B,MAA9B,EAA8C;EAAA;;EAL9C,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;EAME,IAAM,WAAW,GAAa,IAAI,KAAJ,CAAU,MAAM,CAAC,MAAjB,CAA9B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;IAC3C,WAAW,CAAC,CAAD,CAAX,GAAiB,MAAM,CAAC,MAAM,CAAC,CAAD,CAAP,CAAvB;EACD;;EACD,KAAK,WAAL,GAAmB,WAAnB;EACA,KAAK,IAAL,GAAY,WAAW,CAAC,MAAxB;EACA,IAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;EACA,IAAM,QAAQ,GAAG,iBAAiB,CAAC,MAAD,CAAlC;EAEA,KAAK,QAAL,mCAEI,KAFJ,0DAGmB,QAHnB;AAMD,CAtBH;;AAyBA,SAAS,iBAAT,CAA2B,MAA3B,EAA2C;EACzC,IAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;EACA,IAAI,IAAI,GAAG,CAAX,EAAc;IACZ,MAAM,KAAK,yBAAuB,IAAvB,2BAAX;EACD;;EACD,IAAM,aAAa,GACf,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,CADJ;EAEA,IAAM,cAAc,GAAG,IAAI,KAAJ,CAAU,IAAV,CAAvB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;IACtC,cAAc,CAAC,MAAM,CAAC,CAAD,CAAP,CAAd,GAA4B,aAAa,CAAC,CAAD,CAAzC;EACD;;EACD,OAAO,cAAc,CAAC,IAAf,EAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n//# sourceMappingURL=transpose_gpu.js.map"]},"metadata":{},"sourceType":"module"}