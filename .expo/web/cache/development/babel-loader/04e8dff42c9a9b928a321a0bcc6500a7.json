{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var image = inputs.image,\n      boxes = inputs.boxes,\n      boxInd = inputs.boxInd;\n  var cropSize = attrs.cropSize,\n      method = attrs.method,\n      extrapolationValue = attrs.extrapolationValue;\n\n  var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n\n  var numBoxes = boxes.shape[0];\n\n  var _cropSize = _slicedToArray(cropSize, 2),\n      cropHeight = _cropSize[0],\n      cropWidth = _cropSize[1];\n\n  var output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n  var boxVals = backend.data.get(boxes.dataId).values;\n  var boxIndVals = backend.data.get(boxInd.dataId).values;\n  var imageVals = backend.data.get(image.dataId).values;\n  var inStride = util.computeStrides(image.shape);\n  var outStride = util.computeStrides(output.shape);\n\n  for (var b = 0; b < numBoxes; b++) {\n    var startInd = b * 4;\n    var y1 = boxVals[startInd];\n    var x1 = boxVals[startInd + 1];\n    var y2 = boxVals[startInd + 2];\n    var x2 = boxVals[startInd + 3];\n    var bInd = boxIndVals[b];\n\n    if (bInd >= batch) {\n      continue;\n    }\n\n    var heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    var widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (var y = 0; y < cropHeight; y++) {\n      var yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (var x = 0; x < cropWidth; x++) {\n          for (var c = 0; c < numChannels; c++) {\n            var ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        var topInd = Math.floor(yInd);\n        var bottomInd = Math.ceil(yInd);\n        var yLerp = yInd - topInd;\n\n        for (var _x = 0; _x < cropWidth; _x++) {\n          var xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (var _c = 0; _c < numChannels; _c++) {\n              var _ind = _c + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n\n              output.values[_ind] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          var leftInd = Math.floor(xInd);\n          var rightInd = Math.ceil(xInd);\n          var xLerp = xInd - leftInd;\n\n          for (var _c2 = 0; _c2 < numChannels; _c2++) {\n            var _ind2 = _c2 + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n\n            var topLeft = imageVals[_ind2];\n            _ind2 = _c2 + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            var topRight = imageVals[_ind2];\n            _ind2 = _c2 + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            var bottomLeft = imageVals[_ind2];\n            _ind2 = _c2 + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            var bottomRight = imageVals[_ind2];\n            var top = topLeft + (topRight - topLeft) * xLerp;\n            var bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n            _ind2 = _c2 + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[_ind2] = top + (bottom - top) * yLerp;\n          }\n        }\n      } else {\n        for (var _x2 = 0; _x2 < cropWidth; ++_x2) {\n          var _xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x2 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (_xInd < 0 || _xInd > imageWidth - 1) {\n            for (var _c3 = 0; _c3 < numChannels; _c3++) {\n              var _ind3 = _c3 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n\n              output.values[_ind3] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          var closestX = Math.round(_xInd);\n          var closestY = Math.round(yInd);\n\n          for (var _c4 = 0; _c4 < numChannels; _c4++) {\n            var inInd = _c4 + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n            var outInd = _c4 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport var cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize\n};","map":{"version":3,"sources":["../../src/kernels/CropAndResize.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,EAAgB,aAAhB,EAA0H,IAA1H,QAAqI,uBAArI;AAIA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;EACC,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,KAAP,GAA+B,MAA/B,CAAO,KAAP;EAAA,IAAc,KAAd,GAA+B,MAA/B,CAAc,KAAd;EAAA,IAAqB,MAArB,GAA+B,MAA/B,CAAqB,MAArB;EACA,IAAO,QAAP,GAA+C,KAA/C,CAAO,QAAP;EAAA,IAAiB,MAAjB,GAA+C,KAA/C,CAAiB,MAAjB;EAAA,IAAyB,kBAAzB,GAA+C,KAA/C,CAAyB,kBAAzB;;EAEA,kCAAsD,KAAK,CAAC,KAA5D;EAAA,IAAO,KAAP;EAAA,IAAc,WAAd;EAAA,IAA2B,UAA3B;EAAA,IAAuC,WAAvC;;EACA,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAjB;;EAEA,+BAAgC,QAAhC;EAAA,IAAO,UAAP;EAAA,IAAmB,SAAnB;;EACA,IAAM,MAAM,GACR,MAAM,CAAC,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,EAAkC,WAAlC,CAAD,EAAiD,SAAjD,CADV;EAGA,IAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,MAA/C;EACA,IAAM,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,MAAM,CAAC,MAAxB,EAAgC,MAAnD;EACA,IAAM,SAAS,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,MAAjD;EAEA,IAAM,QAAQ,GACV,IAAI,CAAC,cAAL,CAAoB,KAAK,CAAC,KAA1B,CADJ;EAEA,IAAM,SAAS,GAAG,IAAI,CAAC,cAAL,CACd,MAAM,CAAC,KADO,CAAlB;;EAMA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA8B,CAAC,EAA/B,EAAmC;IACjC,IAAM,QAAQ,GAAG,CAAC,GAAG,CAArB;IACA,IAAM,EAAE,GAAG,OAAO,CAAC,QAAD,CAAlB;IACA,IAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAZ,CAAlB;IACA,IAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAZ,CAAlB;IACA,IAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAZ,CAAlB;IAEA,IAAM,IAAI,GAAW,UAAU,CAAC,CAAD,CAA/B;;IACA,IAAI,IAAI,IAAI,KAAZ,EAAmB;MACjB;IACD;;IAED,IAAM,WAAW,GACZ,UAAU,GAAG,CAAd,GAAmB,CAAC,EAAE,GAAG,EAAN,KAAa,WAAW,GAAG,CAA3B,KAAiC,UAAU,GAAG,CAA9C,CAAnB,GAAsE,CAD1E;IAEA,IAAM,UAAU,GACX,SAAS,GAAG,CAAb,GAAkB,CAAC,EAAE,GAAG,EAAN,KAAa,UAAU,GAAG,CAA1B,KAAgC,SAAS,GAAG,CAA5C,CAAlB,GAAmE,CADvE;;IAGA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EAAqC;MACnC,IAAM,IAAI,GAAY,UAAU,GAAG,CAAd,GACjB,EAAE,IAAI,WAAW,GAAG,CAAlB,CAAF,GAAyB,CAAC,GAAI,WADb,GAEjB,OAAO,EAAE,GAAG,EAAZ,KAAmB,WAAW,GAAG,CAAjC,CAFJ;;MAIA,IAAI,IAAI,GAAG,CAAP,IAAY,IAAI,GAAG,WAAW,GAAG,CAArC,EAAwC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;UAClC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAApB,EAAiC,CAAC,EAAlC,EAAsC;YACpC,IAAM,GAAG,GACL,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAD,CAAjB,GAAuB,CAAC,GAAG,SAAS,CAAC,CAAD,CAApC,GAA0C,CAAC,GAAG,SAAS,CAAC,CAAD,CAD3D;YAEA,MAAM,CAAC,MAAP,CAAc,GAAd,IAAqB,kBAArB;UACD;QACF;;QACD;MACD;;MAED,IAAI,MAAM,KAAK,UAAf,EAA2B;QACzB,IAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAf;QACA,IAAM,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAlB;QACA,IAAM,KAAK,GAAG,IAAI,GAAG,MAArB;;QAEA,KAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,SAApB,EAA+B,EAAC,EAAhC,EAAoC;UAClC,IAAM,IAAI,GAAI,SAAS,GAAG,CAAb,GACT,EAAE,IAAI,UAAU,GAAG,CAAjB,CAAF,GAAwB,EAAC,GAAG,UADnB,GAET,OAAO,EAAE,GAAG,EAAZ,KAAmB,UAAU,GAAG,CAAhC,CAFJ;;UAIA,IAAI,IAAI,GAAG,CAAP,IAAY,IAAI,GAAG,UAAU,GAAG,CAApC,EAAuC;YACrC,KAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,WAApB,EAAiC,EAAC,EAAlC,EAAsC;cACpC,IAAM,IAAG,GACL,EAAC,GAAG,EAAC,GAAG,SAAS,CAAC,CAAD,CAAjB,GAAuB,CAAC,GAAG,SAAS,CAAC,CAAD,CAApC,GAA0C,CAAC,GAAG,SAAS,CAAC,CAAD,CAD3D;;cAEA,MAAM,CAAC,MAAP,CAAc,IAAd,IAAqB,kBAArB;YACD;;YACD;UACD;;UAED,IAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAhB;UACA,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAjB;UACA,IAAM,KAAK,GAAG,IAAI,GAAG,OAArB;;UAEA,KAAK,IAAI,GAAC,GAAG,CAAb,EAAgB,GAAC,GAAG,WAApB,EAAiC,GAAC,EAAlC,EAAsC;YACpC,IAAI,KAAG,GAAG,GAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAtB,GAA4B,MAAM,GAAG,QAAQ,CAAC,CAAD,CAA7C,GACN,IAAI,GAAG,QAAQ,CAAC,CAAD,CADnB;;YAEA,IAAM,OAAO,GAAG,SAAS,CAAC,KAAD,CAAzB;YAEA,KAAG,GAAG,GAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAD,CAAvB,GAA6B,MAAM,GAAG,QAAQ,CAAC,CAAD,CAA9C,GACF,IAAI,GAAG,QAAQ,CAAC,CAAD,CADnB;YAEA,IAAM,QAAQ,GAAG,SAAS,CAAC,KAAD,CAA1B;YAEA,KAAG,GAAG,GAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAtB,GAA4B,SAAS,GAAG,QAAQ,CAAC,CAAD,CAAhD,GACF,IAAI,GAAG,QAAQ,CAAC,CAAD,CADnB;YAEA,IAAM,UAAU,GAAG,SAAS,CAAC,KAAD,CAA5B;YAEA,KAAG,GAAG,GAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAD,CAAvB,GAA6B,SAAS,GAAG,QAAQ,CAAC,CAAD,CAAjD,GACF,IAAI,GAAG,QAAQ,CAAC,CAAD,CADnB;YAEA,IAAM,WAAW,GAAG,SAAS,CAAC,KAAD,CAA7B;YAEA,IAAM,GAAG,GAAG,OAAO,GAAG,CAAC,QAAQ,GAAG,OAAZ,IAAuB,KAA7C;YACA,IAAM,MAAM,GAAG,UAAU,GAAG,CAAC,WAAW,GAAG,UAAf,IAA6B,KAAzD;YAEA,KAAG,GAAG,GAAC,GAAG,EAAC,GAAG,SAAS,CAAC,CAAD,CAAjB,GAAuB,CAAC,GAAG,SAAS,CAAC,CAAD,CAApC,GAA0C,CAAC,GAAG,SAAS,CAAC,CAAD,CAA7D;YACA,MAAM,CAAC,MAAP,CAAc,KAAd,IAAqB,GAAG,GAAI,CAAC,MAAM,GAAG,GAAV,IAAiB,KAA7C;UACD;QACF;MACF,CA/CD,MA+CO;QACL,KAAK,IAAI,GAAC,GAAG,CAAb,EAAgB,GAAC,GAAG,SAApB,EAA+B,EAAE,GAAjC,EAAoC;UAClC,IAAM,KAAI,GAAI,SAAS,GAAG,CAAb,GACT,EAAE,IAAI,UAAU,GAAG,CAAjB,CAAF,GAAwB,GAAC,GAAG,UADnB,GAET,OAAO,EAAE,GAAG,EAAZ,KAAmB,UAAU,GAAG,CAAhC,CAFJ;;UAIA,IAAI,KAAI,GAAG,CAAP,IAAY,KAAI,GAAG,UAAU,GAAG,CAApC,EAAuC;YACrC,KAAK,IAAI,GAAC,GAAG,CAAb,EAAgB,GAAC,GAAG,WAApB,EAAiC,GAAC,EAAlC,EAAsC;cACpC,IAAM,KAAG,GACL,GAAC,GAAG,GAAC,GAAG,SAAS,CAAC,CAAD,CAAjB,GAAuB,CAAC,GAAG,SAAS,CAAC,CAAD,CAApC,GAA0C,CAAC,GAAG,SAAS,CAAC,CAAD,CAD3D;;cAEA,MAAM,CAAC,MAAP,CAAc,KAAd,IAAqB,kBAArB;YACD;;YACD;UACD;;UAED,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,CAAjB;UACA,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAjB;;UACA,KAAK,IAAI,GAAC,GAAG,CAAb,EAAgB,GAAC,GAAG,WAApB,EAAiC,GAAC,EAAlC,EAAsC;YACpC,IAAM,KAAK,GAAG,GAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAD,CAAvB,GAA6B,QAAQ,GAAG,QAAQ,CAAC,CAAD,CAAhD,GACV,IAAI,GAAG,QAAQ,CAAC,CAAD,CADnB;YAEA,IAAM,MAAM,GACR,GAAC,GAAG,GAAC,GAAG,SAAS,CAAC,CAAD,CAAjB,GAAuB,CAAC,GAAG,SAAS,CAAC,CAAD,CAApC,GAA0C,CAAC,GAAG,SAAS,CAAC,CAAD,CAD3D;YAEA,MAAM,CAAC,MAAP,CAAc,MAAd,IAAwB,SAAS,CAAC,KAAD,CAAjC;UACD;QACF;MACF;IACF;EACF;;EAED,OAAO,OAAO,CAAC,cAAR,CAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,KAA5C,EAAmD,MAAM,CAAC,MAA1D,CAAP;AACD;AAED,OAAO,IAAM,mBAAmB,GAAiB;EAC/C,UAAU,EAAE,aADmC;EAE/C,WAAW,EAAE,KAFkC;EAG/C,UAAU,EAAE;AAHmC,CAA1C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n    const boxVals = backend.data.get(boxes.dataId).values;\n    const boxIndVals = backend.data.get(boxInd.dataId).values;\n    const imageVals = backend.data.get(image.dataId).values;\n    const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n    const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n        const startInd = b * 4;\n        const y1 = boxVals[startInd];\n        const x1 = boxVals[startInd + 1];\n        const y2 = boxVals[startInd + 2];\n        const x2 = boxVals[startInd + 3];\n        const bInd = boxIndVals[b];\n        if (bInd >= batch) {\n            continue;\n        }\n        const heightScale = (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n        const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n        for (let y = 0; y < cropHeight; y++) {\n            const yInd = (cropHeight > 1) ?\n                y1 * (imageHeight - 1) + y * (heightScale) :\n                0.5 * (y1 + y2) * (imageHeight - 1);\n            if (yInd < 0 || yInd > imageHeight - 1) {\n                for (let x = 0; x < cropWidth; x++) {\n                    for (let c = 0; c < numChannels; c++) {\n                        const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = extrapolationValue;\n                    }\n                }\n                continue;\n            }\n            if (method === 'bilinear') {\n                const topInd = Math.floor(yInd);\n                const bottomInd = Math.ceil(yInd);\n                const yLerp = yInd - topInd;\n                for (let x = 0; x < cropWidth; x++) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const leftInd = Math.floor(xInd);\n                    const rightInd = Math.ceil(xInd);\n                    const xLerp = xInd - leftInd;\n                    for (let c = 0; c < numChannels; c++) {\n                        let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topRight = imageVals[ind];\n                        ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomRight = imageVals[ind];\n                        const top = topLeft + (topRight - topLeft) * xLerp;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                        ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = top + ((bottom - top) * yLerp);\n                    }\n                }\n            }\n            else { // method == \"nearest\"\n                for (let x = 0; x < cropWidth; ++x) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const closestX = Math.round(xInd);\n                    const closestY = Math.round(yInd);\n                    for (let c = 0; c < numChannels; c++) {\n                        const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                            bInd * inStride[0];\n                        const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[outInd] = imageVals[inInd];\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'cpu',\n    kernelFunc: cropAndResize\n};\n//# sourceMappingURL=CropAndResize.js.map"]},"metadata":{},"sourceType":"module"}