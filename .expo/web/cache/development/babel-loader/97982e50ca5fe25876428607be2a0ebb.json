{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { backend_util, DataStorage, engine, env, kernel_impls, KernelBackend, max, slice_util, TensorBuffer, upcastType, util } from '@tensorflow/tfjs-core';\nvar nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nvar _split = kernel_impls.split;\nvar _tile = kernel_impls.tile;\nvar topkImpl = kernel_impls.topkImpl;\nvar whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from \"./cpu_util\";\n\nfunction mapActivation(backend, x, activation, preluActivationWeights) {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return tf.elu(x);\n  } else if (activation === 'relu6') {\n    return backend.relu6(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n\n  throw new Error(\"Activation \" + activation + \" has not been implemented for the CPU backend.\");\n}\n\nexport var MathBackendCPU = function (_KernelBackend) {\n  _inherits(MathBackendCPU, _KernelBackend);\n\n  var _super = _createSuper(MathBackendCPU);\n\n  function MathBackendCPU() {\n    var _this;\n\n    _classCallCheck(this, MathBackendCPU);\n\n    _this = _super.call(this);\n    _this.blockSize = 48;\n    _this.firstUse = true;\n    _this.data = new DataStorage(_assertThisInitialized(_this), engine());\n    return _this;\n  }\n\n  _createClass(MathBackendCPU, [{\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      if (this.firstUse) {\n        this.firstUse = false;\n\n        if (env().get('IS_NODE')) {\n          backend_util.warn('\\n============================\\n' + 'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' + 'Node.js. To speed things up dramatically, install our node ' + 'backend, which binds to TensorFlow C++, by running ' + 'npm i @tensorflow/tfjs-node, ' + 'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' + 'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' + 'suffix for CUDA) at the start of your program. ' + 'Visit https://github.com/tensorflow/tfjs-node for more details.' + '\\n============================');\n        }\n      }\n\n      var dataId = {};\n      this.data.set(dataId, {\n        values: values,\n        dtype: dtype,\n        refCount: 1\n      });\n      return dataId;\n    }\n  }, {\n    key: \"makeTensorInfo\",\n    value: function makeTensorInfo(shape, dtype, values) {\n      var outId = this.write(values, shape, dtype);\n      return {\n        dataId: outId,\n        shape: shape,\n        dtype: dtype\n      };\n    }\n  }, {\n    key: \"incRef\",\n    value: function incRef(dataId) {\n      var tensorData = this.data.get(dataId);\n      tensorData.refCount++;\n    }\n  }, {\n    key: \"decRef\",\n    value: function decRef(dataId) {\n      if (this.data.has(dataId)) {\n        var tensorData = this.data.get(dataId);\n        tensorData.refCount--;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      this.data.set(dataId, {\n        values: values,\n        dtype: dtype,\n        refCount: 1\n      });\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.data.numDataIds();\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      return _regeneratorRuntime.async(function read$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.readSync(dataId));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      var _this$data$get = this.data.get(dataId),\n          dtype = _this$data$get.dtype,\n          complexTensorInfos = _this$data$get.complexTensorInfos;\n\n      if (dtype === 'complex64') {\n        var realValues = this.readSync(complexTensorInfos.real.dataId);\n        var imagValues = this.readSync(complexTensorInfos.imag.dataId);\n        return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n      }\n\n      return this.data.get(dataId).values;\n    }\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync(t) {\n      var data = this.readSync(t.dataId);\n      var decodedData = data;\n\n      if (t.dtype === 'string') {\n        try {\n          decodedData = data.map(function (d) {\n            return util.decodeString(d);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode encoded string bytes into utf-8');\n        }\n      }\n\n      return tf.buffer(t.shape, t.dtype, decodedData);\n    }\n  }, {\n    key: \"makeOutput\",\n    value: function makeOutput(values, shape, dtype) {\n      var dataId = this.write(values, shape, dtype);\n      return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      if (this.data.has(dataId)) {\n        var _this$data$get2 = this.data.get(dataId),\n            complexTensorInfos = _this$data$get2.complexTensorInfos;\n\n        if (complexTensorInfos != null) {\n          this.disposeData(complexTensorInfos.real.dataId);\n          this.disposeData(complexTensorInfos.imag.dataId);\n        }\n\n        this.data.delete(dataId);\n      }\n    }\n  }, {\n    key: \"disposeIntermediateTensorInfo\",\n    value: function disposeIntermediateTensorInfo(tensorInfo) {\n      var dataId = tensorInfo.dataId;\n\n      if (this.data.has(dataId)) {\n        var tensorData = this.data.get(dataId);\n        tensorData.refCount--;\n\n        if (tensorData.refCount < 1) {\n          this.disposeData(dataId);\n        }\n      }\n    }\n  }, {\n    key: \"time\",\n    value: function time(f) {\n      var start, kernelMs;\n      return _regeneratorRuntime.async(function time$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              start = util.now();\n              f();\n              kernelMs = util.now() - start;\n              return _context2.abrupt(\"return\", {\n                kernelMs: kernelMs\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return {\n        unreliable: true,\n        reasons: ['The reported memory is an upper bound. Due to automatic garbage ' + 'collection, the true allocated memory may be less.']\n      };\n    }\n  }, {\n    key: \"stridedSlice\",\n    value: function stridedSlice(x, begin, end, strides) {\n      assertNotComplex(x, 'stridedSlice');\n      var outShape = slice_util.computeOutShape(begin, end, strides);\n\n      if (outShape.some(function (axis) {\n        return axis === 0;\n      })) {\n        return tf.tensor([], outShape);\n      }\n\n      var buffer = tf.buffer(outShape, x.dtype);\n      var xBuf = this.bufferSync(x);\n\n      for (var i = 0; i < buffer.size; i++) {\n        var loc = buffer.indexToLoc(i);\n        var newLoc = new Array(loc.length);\n\n        for (var j = 0; j < newLoc.length; j++) {\n          newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n\n        buffer.set.apply(buffer, [xBuf.get.apply(xBuf, newLoc)].concat(_toConsumableArray(loc)));\n      }\n\n      return buffer.toTensor();\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(x) {\n      var xVals = this.readSync(x.dataId);\n      var buffer = tf.buffer([x.size, x.size], x.dtype);\n      var vals = buffer.values;\n\n      for (var i = 0; i < xVals.length; i++) {\n        vals[i * x.size + i] = xVals[i];\n      }\n\n      return buffer.toTensor();\n    }\n  }, {\n    key: \"unstack\",\n    value: function unstack(x, axis) {\n      var num = x.shape[axis];\n      var outShape = new Array(x.rank - 1);\n      var outIndex = 0;\n\n      for (var i = 0; i < x.rank; i++) {\n        if (i !== axis) {\n          outShape[outIndex++] = x.shape[i];\n        }\n      }\n\n      var begin = new Array(x.rank).fill(0);\n      var size = x.shape.slice();\n      size[axis] = 1;\n      var res = new Array(num);\n\n      for (var _i = 0; _i < res.length; _i++) {\n        begin[axis] = _i;\n        res[_i] = tf.slice(x, begin, size).reshape(outShape);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(x, axis) {\n      assertNotComplex(x, 'reverse');\n      var buffer = tf.buffer(x.shape, x.dtype);\n      var xBuf = this.bufferSync(x);\n\n      var _loop = function _loop(i) {\n        var outLoc = buffer.indexToLoc(i);\n        var inLoc = outLoc.slice();\n        axis.forEach(function (ax) {\n          return inLoc[ax] = x.shape[ax] - 1 - inLoc[ax];\n        });\n        buffer.set.apply(buffer, [xBuf.get.apply(xBuf, _toConsumableArray(inLoc))].concat(_toConsumableArray(outLoc)));\n      };\n\n      for (var i = 0; i < buffer.size; i++) {\n        _loop(i);\n      }\n\n      return buffer.toTensor();\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(x) {\n      assertNotComplex(x, 'neg');\n      return tf.mul(tf.scalar(-1), x);\n    }\n  }, {\n    key: \"addN\",\n    value: function addN(tensors) {\n      var _this2 = this;\n\n      assertNotComplex(tensors, 'addN');\n      var vals = tensors.map(function (t) {\n        return _this2.readSync(t.dataId);\n      });\n      var result = tf.buffer(tensors[0].shape, tensors[0].dtype);\n      var resultVals = result.values;\n\n      for (var i = 0; i < tensors.length; i++) {\n        var currVals = vals[i];\n\n        for (var j = 0; j < resultVals.length; j++) {\n          resultVals[j] += currVals[j];\n        }\n      }\n\n      return result.toTensor();\n    }\n  }, {\n    key: \"softmax\",\n    value: function softmax(logits, dim) {\n      var axes = util.parseAxisParam([dim], logits.shape);\n      var maxLogit = max(logits, axes);\n      var expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n      var a = tf.sub(logits, maxLogit.reshape(expandedShape));\n      var b = tf.exp(a);\n      var sumExp = this.sum(b, axes).reshape(expandedShape);\n      return tf.div(b, sumExp);\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      assertNotComplex([a, b], 'pow');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) {\n        return Math.pow(aValue, bValue);\n      });\n    }\n  }, {\n    key: \"batchMatMul\",\n    value: function batchMatMul(a, b, transposeA, transposeB) {\n      assertNotComplex([a, b], 'matMul');\n      var sharedDim = transposeA ? a.shape[1] : a.shape[2];\n      var leftDim = transposeA ? a.shape[2] : a.shape[1];\n      var rightDim = transposeB ? b.shape[1] : b.shape[2];\n      var batchDim = a.shape[0];\n      var aValues = this.readSync(a.dataId);\n      var bValues = this.readSync(b.dataId);\n\n      var _ref = transposeA ? [a.strides[0], 1, a.strides[1]] : [a.strides[0], a.strides[1], 1],\n          _ref2 = _slicedToArray(_ref, 3),\n          aBatch = _ref2[0],\n          aOuterStep = _ref2[1],\n          aInnerStep = _ref2[2];\n\n      var _ref3 = transposeB ? [1, b.strides[1], b.strides[0]] : [b.strides[1], 1, b.strides[0]],\n          _ref4 = _slicedToArray(_ref3, 3),\n          bInnerStep = _ref4[0],\n          bOuterStep = _ref4[1],\n          bBatch = _ref4[2];\n\n      var size = leftDim * rightDim;\n      var result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n      var resVals = result.values;\n      var blockSize = this.blockSize;\n\n      for (var _b = 0; _b < batchDim; _b++) {\n        for (var i0 = 0; i0 < leftDim; i0 += blockSize) {\n          for (var j0 = 0; j0 < rightDim; j0 += blockSize) {\n            for (var k0 = 0; k0 < sharedDim; k0 += blockSize) {\n              var iBlock = Math.min(i0 + blockSize, leftDim);\n              var jBlock = Math.min(j0 + blockSize, rightDim);\n              var kBlock = Math.min(k0 + blockSize, sharedDim);\n\n              for (var i = i0; i < iBlock; i++) {\n                for (var j = j0; j < jBlock; j++) {\n                  var sum = 0.0;\n\n                  for (var k = k0; k < kBlock; k++) {\n                    sum += aValues[_b * aBatch + i * aOuterStep + k * aInnerStep] * bValues[k * bInnerStep + j * bOuterStep + _b * bBatch];\n                  }\n\n                  resVals[_b * size + (i * rightDim + j)] += sum;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return result.toTensor();\n    }\n  }, {\n    key: \"fusedBatchMatMul\",\n    value: function fusedBatchMatMul(_ref5) {\n      var a = _ref5.a,\n          b = _ref5.b,\n          transposeA = _ref5.transposeA,\n          transposeB = _ref5.transposeB,\n          bias = _ref5.bias,\n          activation = _ref5.activation,\n          preluActivationWeights = _ref5.preluActivationWeights;\n      var result = this.batchMatMul(a, b, transposeA, transposeB);\n\n      if (bias) {\n        result = tf.add(result, bias);\n      }\n\n      if (activation) {\n        result = mapActivation(this, result, activation, preluActivationWeights);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"floorDiv\",\n    value: function floorDiv(a, b) {\n      assertNotComplex([a, b], 'floorDiv');\n\n      var op = function op(a, b) {\n        return Math.floor(a / b);\n      };\n\n      var outputDtype = 'int32';\n      return this.broadcastedBinaryOp(a, b, outputDtype, op);\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(x, axes) {\n      assertNotComplex(x, 'sum');\n      backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n\n      var _backend_util$compute = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n          outShape = _backend_util$compute2[0],\n          reduceShape = _backend_util$compute2[1];\n\n      var resultDtype = upcastType(x.dtype, 'int32');\n      var result = tf.zeros(outShape, resultDtype);\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var sum = 0;\n\n        for (var j = 0; j < reduceSize; ++j) {\n          sum += aVals[offset + j];\n        }\n\n        vals[i] = sum;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"prod\",\n    value: function prod(x, axes) {\n      assertNotComplex(x, 'sum');\n\n      var _backend_util$compute3 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute4 = _slicedToArray(_backend_util$compute3, 2),\n          outShape = _backend_util$compute4[0],\n          reduceShape = _backend_util$compute4[1];\n\n      var resultDtype = upcastType(x.dtype, 'int32');\n      var result = tf.zeros(outShape, resultDtype);\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var prod = 1;\n\n        for (var j = 0; j < reduceSize; ++j) {\n          prod *= aVals[offset + j];\n        }\n\n        vals[i] = prod;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"unsortedSegmentSum\",\n    value: function unsortedSegmentSum(x, segmentIds, numSegments) {\n      assertNotComplex(x, 'unsortedSegmentSum');\n      var res = [];\n      var numIters = x.rank - segmentIds.rank;\n\n      for (var i = 0; i < numIters; ++i) {\n        segmentIds = segmentIds.expandDims(i + 1);\n      }\n\n      for (var _i2 = 0; _i2 < numSegments; ++_i2) {\n        var segmentId = tf.scalar(_i2, 'int32');\n        var mask = tf.equal(segmentId, segmentIds).asType('float32');\n        var sum = mask.mul(x).sum(0);\n        res.push(sum);\n      }\n\n      return tf.stack(res);\n    }\n  }, {\n    key: \"argMin\",\n    value: function argMin(x, axis) {\n      assertNotComplex(x, 'argMin');\n      var axes = [axis];\n      backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n\n      var _backend_util$compute5 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute6 = _slicedToArray(_backend_util$compute5, 2),\n          outShape = _backend_util$compute6[0],\n          reduceShape = _backend_util$compute6[1];\n\n      var result = tf.zeros(outShape, 'int32');\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var min = aVals[offset];\n        var minIndex = 0;\n\n        for (var j = 0; j < reduceSize; ++j) {\n          var value = aVals[offset + j];\n\n          if (value < min) {\n            min = value;\n            minIndex = j;\n          }\n        }\n\n        vals[i] = minIndex;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"argMax\",\n    value: function argMax(x, axis) {\n      assertNotComplex(x, 'argMax');\n      var axes = [axis];\n      backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n\n      var _backend_util$compute7 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute8 = _slicedToArray(_backend_util$compute7, 2),\n          outShape = _backend_util$compute8[0],\n          reduceShape = _backend_util$compute8[1];\n\n      var result = tf.zeros(outShape, 'int32');\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var _max = aVals[offset];\n        var maxIndex = 0;\n\n        for (var j = 0; j < reduceSize; ++j) {\n          var value = aVals[offset + j];\n\n          if (value > _max) {\n            _max = value;\n            maxIndex = j;\n          }\n        }\n\n        vals[i] = maxIndex;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"cumsum\",\n    value: function cumsum(x, axis, exclusive, reverse) {\n      assertNotComplex(x, 'cumsum');\n\n      if (axis !== x.rank - 1) {\n        throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\" + (x.rank - 1) + \" \" + (\"but got axis=\" + axis));\n      }\n\n      var resultDtype = upcastType(x.dtype, 'int32');\n      var result = tf.zeros(x.shape, resultDtype);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n      var finalDim = x.shape[x.rank - 1];\n      var indexAdjuster = reverse ? function (i, j) {\n        return i + finalDim - j - 1;\n      } : function (i, j) {\n        return i + j;\n      };\n\n      for (var i = 0; i < aVals.length; i += finalDim) {\n        for (var j = 0; j < finalDim; j++) {\n          var idx = indexAdjuster(i, j);\n\n          if (j === 0) {\n            vals[idx] = exclusive ? 0 : aVals[idx];\n          } else {\n            var prevIdx = indexAdjuster(i, j - 1);\n            vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(a, b) {\n      assertNotComplex([a, b], 'equal');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal === bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"notEqual\",\n    value: function notEqual(a, b) {\n      assertNotComplex([a, b], 'notEqual');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal !== bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"less\",\n    value: function less(a, b) {\n      assertNotComplex([a, b], 'less');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal < bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"lessEqual\",\n    value: function lessEqual(a, b) {\n      assertNotComplex([a, b], 'lessEqual');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal <= bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"greater\",\n    value: function greater(a, b) {\n      assertNotComplex([a, b], 'greater');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal > bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"greaterEqual\",\n    value: function greaterEqual(a, b) {\n      assertNotComplex([a, b], 'greaterEqual');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal >= bVal ? 1 : 0;\n      });\n    }\n  }, {\n    key: \"logicalAnd\",\n    value: function logicalAnd(a, b) {\n      assertNotComplex([a, b], 'logicalAnd');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal && bVal;\n      });\n    }\n  }, {\n    key: \"logicalOr\",\n    value: function logicalOr(a, b) {\n      assertNotComplex([a, b], 'logicalOr');\n      return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n        return aVal || bVal;\n      });\n    }\n  }, {\n    key: \"select\",\n    value: function select(condition, a, b) {\n      assertNotComplex([condition, a, b], 'select');\n      var values = this.readSync(condition.dataId);\n      var aValues = this.readSync(a.dataId);\n      var bValues = this.readSync(b.dataId);\n      var result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n      var newValues = this.readSync(result.dataId);\n      var index = 0;\n      var offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ? 1 : util.sizeFromShape(a.shape.slice(1));\n\n      for (var i = 0; i < values.length; i++) {\n        for (var j = 0; j < offset; j++) {\n          if (values[i] === 1) {\n            newValues[index++] = aValues[i];\n          } else {\n            newValues[index++] = bValues[i];\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      assertNotComplex([condition], 'where');\n      var condVals = this.readSync(condition.dataId);\n      return whereImpl(condition.shape, condVals);\n    }\n  }, {\n    key: \"topk\",\n    value: function topk(x, k, sorted) {\n      assertNotComplex(x, 'topk');\n      var xVals = this.readSync(x.dataId);\n      return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n  }, {\n    key: \"min\",\n    value: function min(x, axes) {\n      assertNotComplex(x, 'min');\n      backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n\n      var _backend_util$compute9 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute10 = _slicedToArray(_backend_util$compute9, 2),\n          outShape = _backend_util$compute10[0],\n          reduceShape = _backend_util$compute10[1];\n\n      var result = tf.zeros(outShape, x.dtype);\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var min = aVals[offset];\n\n        for (var j = 0; j < reduceSize; ++j) {\n          var value = aVals[offset + j];\n\n          if (value < min) {\n            min = value;\n          }\n        }\n\n        vals[i] = min;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"minimum\",\n    value: function minimum(a, b) {\n      assertNotComplex([a, b], 'minimum');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n        return Math.min(aVal, bVal);\n      });\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(a, b) {\n      assertNotComplex([a, b], 'mod');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n        var rem = aVal % bVal;\n\n        if (aVal < 0 && bVal < 0 || aVal >= 0 && bVal >= 0) {\n          return rem;\n        } else {\n          return (rem + bVal) % bVal;\n        }\n      });\n    }\n  }, {\n    key: \"maximum\",\n    value: function maximum(a, b) {\n      assertNotComplex([a, b], 'maximum');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n        return Math.max(aVal, bVal);\n      });\n    }\n  }, {\n    key: \"all\",\n    value: function all(x, axes) {\n      assertNotComplex(x, 'all');\n      backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n\n      var _backend_util$compute11 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute12 = _slicedToArray(_backend_util$compute11, 2),\n          outShape = _backend_util$compute12[0],\n          reduceShape = _backend_util$compute12[1];\n\n      var result = tf.zeros(outShape, x.dtype);\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var all = aVals[offset];\n\n        for (var j = 0; j < reduceSize; ++j) {\n          var value = aVals[offset + j];\n          all = all && value;\n        }\n\n        vals[i] = all;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"any\",\n    value: function any(x, axes) {\n      assertNotComplex(x, 'any');\n      backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n\n      var _backend_util$compute13 = backend_util.computeOutAndReduceShapes(x.shape, axes),\n          _backend_util$compute14 = _slicedToArray(_backend_util$compute13, 2),\n          outShape = _backend_util$compute14[0],\n          reduceShape = _backend_util$compute14[1];\n\n      var result = tf.zeros(outShape, x.dtype);\n      var reduceSize = util.sizeFromShape(reduceShape);\n      var vals = this.readSync(result.dataId);\n      var aVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < vals.length; ++i) {\n        var offset = i * reduceSize;\n        var anyVal = aVals[offset];\n\n        for (var j = 0; j < reduceSize; ++j) {\n          var value = aVals[offset + j];\n          anyVal = anyVal || value;\n        }\n\n        vals[i] = anyVal;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"squaredDifference\",\n    value: function squaredDifference(a, b) {\n      assertNotComplex([a, b], 'squaredDifference');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n        var diff = aVal - bVal;\n        return diff * diff;\n      });\n    }\n  }, {\n    key: \"linear\",\n    value: function linear(x) {\n      return x;\n    }\n  }, {\n    key: \"relu\",\n    value: function relu(x) {\n      assertNotComplex(x, 'relu');\n      var res = tf.zeros(x.shape, x.dtype);\n      var resVals = this.readSync(res.dataId);\n      var inVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < inVals.length; ++i) {\n        resVals[i] = Math.max(0, inVals[i]);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"relu6\",\n    value: function relu6(x) {\n      assertNotComplex(x, 'relu');\n      var res = tf.zeros(x.shape, x.dtype);\n      var resVals = this.readSync(res.dataId);\n      var inVals = this.readSync(x.dataId);\n\n      for (var i = 0; i < inVals.length; ++i) {\n        resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"prelu\",\n    value: function prelu(x, a) {\n      assertNotComplex([x, a], 'prelu');\n      return this.broadcastedBinaryOp(x, a, x.dtype, function (xValue, aValue) {\n        return xValue < 0 ? aValue * xValue : xValue;\n      });\n    }\n  }, {\n    key: \"eluDer\",\n    value: function eluDer(dy, y) {\n      assertNotComplex([dy, y], 'eluDer');\n      var resultValues = new Float32Array(y.size);\n      var values = this.readSync(y.dataId);\n      var dyValues = this.readSync(dy.dataId);\n\n      for (var i = 0; i < values.length; ++i) {\n        var v = values[i];\n\n        if (v >= 1) {\n          resultValues[i] = dyValues[i];\n        } else {\n          resultValues[i] = dyValues[i] * (v + 1);\n        }\n      }\n\n      return this.makeOutput(resultValues, y.shape, 'float32');\n    }\n  }, {\n    key: \"atan2\",\n    value: function atan2(a, b) {\n      assertNotComplex([a, b], 'atan2');\n      return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) {\n        return Math.atan2(aValue, bValue);\n      });\n    }\n  }, {\n    key: \"fusedConv2d\",\n    value: function fusedConv2d(_ref6) {\n      var input = _ref6.input,\n          filter = _ref6.filter,\n          convInfo = _ref6.convInfo,\n          bias = _ref6.bias,\n          activation = _ref6.activation,\n          preluActivationWeights = _ref6.preluActivationWeights;\n      var result = this.conv2d(input, filter, convInfo);\n\n      if (bias) {\n        result = tf.add(result, bias);\n      }\n\n      if (activation) {\n        result = mapActivation(this, result, activation, preluActivationWeights);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"conv2d\",\n    value: function conv2d(x, filter, convInfo) {\n      assertNotComplex([x, filter], 'conv2d');\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var padLeft = convInfo.padInfo.left;\n      var padTop = convInfo.padInfo.top;\n      var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n      var y = tf.buffer(convInfo.outShape, x.dtype);\n      var xBatchStride = x.strides[0];\n      var xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n      var xColStride = isChannelsLast ? x.strides[2] : 1;\n      var xChannelStride = isChannelsLast ? 1 : x.strides[1];\n      var yBatchStride = y.strides[0];\n      var yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n      var yColStride = isChannelsLast ? y.strides[2] : 1;\n      var yChannelStride = isChannelsLast ? 1 : y.strides[1];\n      var xVals = this.readSync(x.dataId);\n      var wVals = this.readSync(filter.dataId);\n      var yVals = y.values;\n\n      for (var b = 0; b < convInfo.batchSize; ++b) {\n        var xOffset1 = b * xBatchStride;\n        var yOffset1 = b * yBatchStride;\n\n        for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n          var yOffset2 = yOffset1 + yR * yRowStride;\n          var xRCorner = yR * convInfo.strideHeight - padTop;\n\n          for (var wR = 0; wR < filterHeight; wR++) {\n            var xR = xRCorner + wR * dilationHeight;\n\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n\n            var wOffset1 = wR * filter.strides[0];\n            var xOffset2 = xOffset1 + xR * xRowStride;\n\n            for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n              var yOffset3 = yOffset2 + yC * yColStride;\n              var xCCorner = yC * convInfo.strideWidth - padLeft;\n\n              for (var wC = 0; wC < filterWidth; wC++) {\n                var xC = xCCorner + wC * dilationWidth;\n\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n\n                var wOffset2 = wOffset1 + wC * filter.strides[1];\n                var xOffset3 = xOffset2 + xC * xColStride;\n                var wOffset3 = wOffset2;\n\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  var xVal = xVals[xOffset3 + d1 * xChannelStride];\n\n                  for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n                  }\n\n                  wOffset3 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return y.toTensor();\n    }\n  }, {\n    key: \"conv3d\",\n    value: function conv3d(x, filter, convInfo) {\n      var filterDepth = convInfo.filterDepth;\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dilationDepth = convInfo.dilationDepth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var padFront = convInfo.padInfo.front;\n      var padLeft = convInfo.padInfo.left;\n      var padTop = convInfo.padInfo.top;\n      var y = tf.buffer(convInfo.outShape, x.dtype);\n      var xVals = this.readSync(x.dataId);\n      var wVals = this.readSync(filter.dataId);\n      var yVals = y.values;\n\n      for (var b = 0; b < convInfo.batchSize; ++b) {\n        var xOffset1 = b * x.strides[0];\n        var yOffset1 = b * y.strides[0];\n\n        for (var yF = 0; yF < convInfo.outDepth; ++yF) {\n          var yOffset2 = yOffset1 + yF * y.strides[1];\n          var xFCorner = yF * convInfo.strideDepth - padFront;\n\n          for (var wF = 0; wF < filterDepth; wF++) {\n            var xF = xFCorner + wF * dilationDepth;\n\n            if (xF < 0 || xF >= convInfo.inDepth) {\n              continue;\n            }\n\n            var wOffset1 = wF * filter.strides[0];\n            var xOffset2 = xOffset1 + xF * x.strides[1];\n\n            for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n              var yOffset3 = yOffset2 + yR * y.strides[2];\n              var xRCorner = yR * convInfo.strideHeight - padTop;\n\n              for (var wR = 0; wR < filterHeight; wR++) {\n                var xR = xRCorner + wR * dilationHeight;\n\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                  continue;\n                }\n\n                var wOffset2 = wOffset1 + wR * filter.strides[1];\n                var xOffset3 = xOffset2 + xR * x.strides[2];\n\n                for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n                  var yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                  var xCCorner = yC * convInfo.strideWidth - padLeft;\n\n                  for (var wC = 0; wC < filterWidth; wC++) {\n                    var xC = xCCorner + wC * dilationWidth;\n\n                    if (xC < 0 || xC >= convInfo.inWidth) {\n                      continue;\n                    }\n\n                    var wOffset3 = wOffset2 + wC * filter.strides[2];\n                    var xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                    var wOffset4 = wOffset3;\n\n                    for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                      var xVal = xVals[xOffset4 + d1];\n\n                      for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                      }\n\n                      wOffset4 += convInfo.outChannels;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return y.toTensor();\n    }\n  }, {\n    key: \"conv2dDerInput\",\n    value: function conv2dDerInput(dy, filter, convInfo) {\n      assertNotComplex([dy, filter], 'conv2dDerInput');\n      var dx = tf.buffer(convInfo.inShape, 'float32');\n      var dxValues = dx.values;\n      var dyValues = this.readSync(dy.dataId);\n      var fltValues = this.readSync(filter.dataId);\n\n      var _filter$strides = _slicedToArray(filter.strides, 3),\n          fltS0 = _filter$strides[0],\n          fltS1 = _filter$strides[1],\n          fltS2 = _filter$strides[2];\n\n      var batchSize = convInfo.batchSize,\n          filterHeight = convInfo.filterHeight,\n          filterWidth = convInfo.filterWidth,\n          inChannels = convInfo.inChannels,\n          inHeight = convInfo.inHeight,\n          inWidth = convInfo.inWidth,\n          outChannels = convInfo.outChannels,\n          outHeight = convInfo.outHeight,\n          outWidth = convInfo.outWidth,\n          strideHeight = convInfo.strideHeight,\n          strideWidth = convInfo.strideWidth,\n          dataFormat = convInfo.dataFormat;\n      var topPad = filterHeight - 1 - convInfo.padInfo.top;\n      var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n      var isChannelsLast = dataFormat === 'channelsLast';\n      var xBatchStride = dx.strides[0];\n      var xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n      var xColStride = isChannelsLast ? dx.strides[2] : 1;\n      var xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n      var yBatchStride = dy.strides[0];\n      var yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n      var yColStride = isChannelsLast ? dy.strides[2] : 1;\n      var yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n      for (var b = 0; b < batchSize; ++b) {\n        for (var d1 = 0; d1 < inChannels; ++d1) {\n          for (var xR = 0; xR < inHeight; ++xR) {\n            var xRCorner = xR - topPad;\n            var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n            for (var xC = 0; xC < inWidth; ++xC) {\n              var xCCorner = xC - leftPad;\n              var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n              var dotProd = 0;\n\n              for (var yR = xRMin; yR < yRMax; ++yR) {\n                var wR = yR * strideHeight - xRCorner;\n\n                for (var yC = xCMin; yC < yCMax; ++yC) {\n                  var wC = yC * strideWidth - xCCorner;\n                  var dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                  var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                  for (var d2 = 0; d2 < outChannels; ++d2) {\n                    var pixel = dyValues[dyOffset + yChannelStride * d2];\n                    var weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n\n              var dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n              dxValues[dxOffset] = dotProd;\n            }\n          }\n        }\n      }\n\n      return dx.toTensor();\n    }\n  }, {\n    key: \"conv3dDerInput\",\n    value: function conv3dDerInput(dy, filter, convInfo) {\n      var dx = tf.buffer(convInfo.inShape, 'float32');\n      var dxValues = dx.values;\n\n      var _dx$strides = _slicedToArray(dx.strides, 4),\n          dxS0 = _dx$strides[0],\n          dxS1 = _dx$strides[1],\n          dxS2 = _dx$strides[2],\n          dxS3 = _dx$strides[3];\n\n      var dyValues = this.readSync(dy.dataId);\n\n      var _dy$strides = _slicedToArray(dy.strides, 4),\n          dyS0 = _dy$strides[0],\n          dyS1 = _dy$strides[1],\n          dyS2 = _dy$strides[2],\n          dyS3 = _dy$strides[3];\n\n      var fltValues = this.readSync(filter.dataId);\n\n      var _filter$strides2 = _slicedToArray(filter.strides, 4),\n          fltS0 = _filter$strides2[0],\n          fltS1 = _filter$strides2[1],\n          fltS2 = _filter$strides2[2],\n          fltS3 = _filter$strides2[3];\n\n      var batchSize = convInfo.batchSize,\n          filterDepth = convInfo.filterDepth,\n          filterHeight = convInfo.filterHeight,\n          filterWidth = convInfo.filterWidth,\n          inChannels = convInfo.inChannels,\n          inDepth = convInfo.inDepth,\n          inHeight = convInfo.inHeight,\n          inWidth = convInfo.inWidth,\n          outChannels = convInfo.outChannels,\n          outDepth = convInfo.outDepth,\n          outHeight = convInfo.outHeight,\n          outWidth = convInfo.outWidth,\n          strideDepth = convInfo.strideDepth,\n          strideHeight = convInfo.strideHeight,\n          strideWidth = convInfo.strideWidth;\n      var frontPad = filterDepth - 1 - convInfo.padInfo.front;\n      var topPad = filterHeight - 1 - convInfo.padInfo.top;\n      var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n      for (var b = 0; b < batchSize; ++b) {\n        for (var d1 = 0; d1 < inChannels; ++d1) {\n          for (var xF = 0; xF < inDepth; ++xF) {\n            var xFCorner = xF - frontPad;\n            var xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n            var yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n            for (var xR = 0; xR < inHeight; ++xR) {\n              var xRCorner = xR - topPad;\n              var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n              var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n              for (var xC = 0; xC < inWidth; ++xC) {\n                var xCCorner = xC - leftPad;\n                var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                var dotProd = 0;\n\n                for (var yF = xFMin; yF < yFMax; ++yF) {\n                  var wF = yF * strideDepth - xFCorner;\n\n                  for (var yR = xRMin; yR < yRMax; ++yR) {\n                    var wR = yR * strideHeight - xRCorner;\n\n                    for (var yC = xCMin; yC < yCMax; ++yC) {\n                      var wC = yC * strideWidth - xCCorner;\n                      var dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                      var fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                      for (var d2 = 0; d2 < outChannels; ++d2) {\n                        var pixel = dyValues[dyOffset + d2];\n                        var weight = fltValues[fltOffset + d2];\n                        dotProd += pixel * weight;\n                      }\n                    }\n                  }\n                }\n\n                dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n              }\n            }\n          }\n        }\n      }\n\n      return dx.toTensor();\n    }\n  }, {\n    key: \"conv2dDerFilter\",\n    value: function conv2dDerFilter(x, dy, convInfo) {\n      assertNotComplex([x, dy], 'conv2dDerFilter');\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n      var dW = tf.buffer(convInfo.filterShape, 'float32');\n      var leftPad = convInfo.padInfo.left;\n      var topPad = convInfo.padInfo.top;\n      var xBuf = this.bufferSync(x);\n      var dyBuf = this.bufferSync(dy);\n\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n        for (var wC = 0; wC < filterWidth; ++wC) {\n          var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n          for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              var dotProd = 0;\n\n              for (var b = 0; b < convInfo.batchSize; ++b) {\n                for (var yR = yRMin; yR < yRMax; ++yR) {\n                  var xR = wR + yR * strideHeight - topPad;\n\n                  for (var yC = yCMin; yC < yCMax; ++yC) {\n                    var xC = wC + yC * strideWidth - leftPad;\n\n                    if (isChannelsLast) {\n                      dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                    } else {\n                      dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                    }\n                  }\n                }\n              }\n\n              dW.set(dotProd, wR, wC, d1, d2);\n            }\n          }\n        }\n      }\n\n      return dW.toTensor();\n    }\n  }, {\n    key: \"conv3dDerFilter\",\n    value: function conv3dDerFilter(x, dy, convInfo) {\n      var strideDepth = convInfo.strideDepth;\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var filterDepth = convInfo.filterDepth;\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dw = tf.buffer(convInfo.filterShape, 'float32');\n      var dwValues = dw.values;\n\n      var _dw$strides = _slicedToArray(dw.strides, 4),\n          dwS0 = _dw$strides[0],\n          dwS1 = _dw$strides[1],\n          dwS2 = _dw$strides[2],\n          dwS3 = _dw$strides[3];\n\n      var dyValues = this.readSync(dy.dataId);\n\n      var _dy$strides2 = _slicedToArray(dy.strides, 4),\n          dyS0 = _dy$strides2[0],\n          dyS1 = _dy$strides2[1],\n          dyS2 = _dy$strides2[2],\n          dyS3 = _dy$strides2[3];\n\n      var xValues = this.readSync(x.dataId);\n\n      var _x$strides = _slicedToArray(x.strides, 4),\n          xS0 = _x$strides[0],\n          xS1 = _x$strides[1],\n          xS2 = _x$strides[2],\n          xS3 = _x$strides[3];\n\n      var frontPad = convInfo.padInfo.front;\n      var leftPad = convInfo.padInfo.left;\n      var topPad = convInfo.padInfo.top;\n\n      for (var wF = 0; wF < filterDepth; ++wF) {\n        var yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n        var yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n        var wOffset1 = wF * dwS0;\n\n        for (var wR = 0; wR < filterHeight; ++wR) {\n          var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n          var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n          var wOffset2 = wR * dwS1 + wOffset1;\n\n          for (var wC = 0; wC < filterWidth; ++wC) {\n            var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            var wOffset3 = wC * dwS2 + wOffset2;\n\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              var wOffset4 = d1 * dwS3 + wOffset3;\n\n              for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                var dotProd = 0;\n\n                for (var b = 0; b < convInfo.batchSize; ++b) {\n                  var xOffset1 = b * xS0;\n                  var yOffset1 = b * dyS0;\n\n                  for (var yF = yFMin; yF < yFMax; ++yF) {\n                    var xF = wF + yF * strideDepth - frontPad;\n                    var xOffset2 = xF * xS1 + xOffset1;\n                    var yOffset2 = yF * dyS1 + yOffset1;\n\n                    for (var yR = yRMin; yR < yRMax; ++yR) {\n                      var xR = wR + yR * strideHeight - topPad;\n                      var xOffset3 = xR * xS2 + xOffset2;\n                      var yOffset3 = yR * dyS2 + yOffset2;\n\n                      for (var yC = yCMin; yC < yCMax; ++yC) {\n                        var xC = wC + yC * strideWidth - leftPad;\n                        var xOffset4 = xC * xS3 + xOffset3;\n                        var yOffset4 = yC * dyS3 + yOffset3;\n                        dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                      }\n                    }\n                  }\n                }\n\n                dwValues[wOffset4 + d2] = dotProd;\n              }\n            }\n          }\n        }\n      }\n\n      return dw.toTensor();\n    }\n  }, {\n    key: \"fusedDepthwiseConv2D\",\n    value: function fusedDepthwiseConv2D(_ref7) {\n      var input = _ref7.input,\n          filter = _ref7.filter,\n          convInfo = _ref7.convInfo,\n          bias = _ref7.bias,\n          activation = _ref7.activation,\n          preluActivationWeights = _ref7.preluActivationWeights;\n      var result = this.depthwiseConv2D(input, filter, convInfo);\n\n      if (bias) {\n        result = tf.add(result, bias);\n      }\n\n      if (activation) {\n        result = mapActivation(this, result, activation, preluActivationWeights);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"depthwiseConv2D\",\n    value: function depthwiseConv2D(x, filter, convInfo) {\n      assertNotComplex([x, filter], 'depthwiseConv2D');\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var padLeft = convInfo.padInfo.left;\n      var padTop = convInfo.padInfo.top;\n      var chMul = convInfo.outChannels / convInfo.inChannels;\n      var y = tf.buffer(convInfo.outShape, x.dtype);\n      var xVals = this.readSync(x.dataId);\n      var wVals = this.readSync(filter.dataId);\n      var yVals = y.values;\n\n      for (var b = 0; b < convInfo.batchSize; ++b) {\n        var xOffset1 = b * x.strides[0];\n        var yOffset1 = b * y.strides[0];\n\n        for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n          var yOffset2 = yOffset1 + yR * y.strides[1];\n          var xRCorner = yR * convInfo.strideHeight - padLeft;\n\n          for (var wR = 0; wR < filterHeight; ++wR) {\n            var xR = xRCorner + wR * dilationHeight;\n\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n\n            var wOffset1 = wR * filter.strides[0];\n            var xOffset2 = xOffset1 + xR * x.strides[1];\n\n            for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n              var yOffset3 = yOffset2 + yC * y.strides[2];\n              var xCCorner = yC * convInfo.strideWidth - padTop;\n\n              for (var wC = 0; wC < filterWidth; ++wC) {\n                var xC = xCCorner + wC * dilationWidth;\n\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n\n                var wOffset2 = wOffset1 + wC * filter.strides[1];\n                var xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                var yOffset4 = yOffset3;\n                var wOffset3 = wOffset2;\n\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  var xVal = xVals[xOffset3 + d1];\n\n                  for (var q = 0; q < chMul; ++q) {\n                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                  }\n\n                  yOffset4 += chMul;\n                  wOffset3 += chMul;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return y.toTensor();\n    }\n  }, {\n    key: \"depthwiseConv2DDerInput\",\n    value: function depthwiseConv2DDerInput(dy, filter, convInfo) {\n      assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n      var dx = tf.buffer(convInfo.inShape, 'float32');\n      var dxValues = dx.values;\n\n      var _dx$strides2 = _slicedToArray(dx.strides, 3),\n          dxS0 = _dx$strides2[0],\n          dxS1 = _dx$strides2[1],\n          dxS2 = _dx$strides2[2];\n\n      var dyValues = this.readSync(dy.dataId);\n\n      var _dy$strides3 = _slicedToArray(dy.strides, 3),\n          dyS0 = _dy$strides3[0],\n          dyS1 = _dy$strides3[1],\n          dyS2 = _dy$strides3[2];\n\n      var fltValues = this.readSync(filter.dataId);\n\n      var _filter$strides3 = _slicedToArray(filter.strides, 3),\n          fltS0 = _filter$strides3[0],\n          fltS1 = _filter$strides3[1],\n          fltS2 = _filter$strides3[2];\n\n      var batchSize = convInfo.batchSize,\n          filterHeight = convInfo.filterHeight,\n          filterWidth = convInfo.filterWidth,\n          inChannels = convInfo.inChannels,\n          inHeight = convInfo.inHeight,\n          inWidth = convInfo.inWidth,\n          outChannels = convInfo.outChannels,\n          outHeight = convInfo.outHeight,\n          outWidth = convInfo.outWidth,\n          strideHeight = convInfo.strideHeight,\n          strideWidth = convInfo.strideWidth;\n      var topPad = filterHeight - 1 - convInfo.padInfo.top;\n      var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n      var chMul = outChannels / inChannels;\n\n      for (var b = 0; b < batchSize; ++b) {\n        for (var d1 = 0; d1 < inChannels; ++d1) {\n          for (var xR = 0; xR < inHeight; ++xR) {\n            var xRCorner = xR - topPad;\n            var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n            for (var xC = 0; xC < inWidth; ++xC) {\n              var xCCorner = xC - leftPad;\n              var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n              var dotProd = 0;\n\n              for (var yR = xRMin; yR < yRMax; ++yR) {\n                var wR = yR * strideHeight - xRCorner;\n\n                for (var yC = xCMin; yC < yCMax; ++yC) {\n                  var wC = yC * strideWidth - xCCorner;\n                  var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                  var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                  for (var dm = 0; dm < chMul; ++dm) {\n                    var d2 = d1 * chMul + dm;\n                    var pixel = dyValues[dyOffset + d2];\n                    var weight = fltValues[fltOffset + dm];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n\n              dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n            }\n          }\n        }\n      }\n\n      return dx.toTensor();\n    }\n  }, {\n    key: \"depthwiseConv2DDerFilter\",\n    value: function depthwiseConv2DDerFilter(x, dy, convInfo) {\n      assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dW = tf.buffer(convInfo.filterShape, 'float32');\n      var leftPad = convInfo.padInfo.left;\n      var topPad = convInfo.padInfo.top;\n      var chMul = convInfo.outChannels / convInfo.inChannels;\n      var xBuf = this.bufferSync(x);\n      var dyBuf = this.bufferSync(dy);\n\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n        for (var wC = 0; wC < filterWidth; ++wC) {\n          var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n          for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            var d1 = Math.trunc(d2 / chMul);\n            var dm = d2 % chMul;\n            var dotProd = 0;\n\n            for (var b = 0; b < convInfo.batchSize; ++b) {\n              for (var yR = yRMin; yR < yRMax; ++yR) {\n                var xR = wR + yR * strideHeight - topPad;\n\n                for (var yC = yCMin; yC < yCMax; ++yC) {\n                  var xC = wC + yC * strideWidth - leftPad;\n                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                }\n              }\n            }\n\n            dW.set(dotProd, wR, wC, d1, dm);\n          }\n        }\n      }\n\n      return dW.toTensor();\n    }\n  }, {\n    key: \"tile\",\n    value: function tile(x, reps) {\n      assertNotComplex(x, 'tile');\n      return _tile(this.bufferSync(x), reps);\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(x, indices, axis) {\n      assertNotComplex([x, indices], 'gather');\n      var newShape = x.shape.slice();\n      var indicesValues = this.readSync(indices.dataId);\n      newShape[axis] = indicesValues.length;\n      var result = tf.buffer(newShape, x.dtype);\n      var xBuf = this.bufferSync(x);\n\n      for (var i = 0; i < result.size; ++i) {\n        var newLoc = result.indexToLoc(i);\n        var originalLoc = newLoc.slice();\n        originalLoc[axis] = indicesValues[newLoc[axis]];\n        var originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n      }\n\n      return result.toTensor();\n    }\n  }, {\n    key: \"batchToSpaceND\",\n    value: function batchToSpaceND(x, blockShape, crops) {\n      assertNotComplex([x], 'batchToSpaceND');\n      var prod = blockShape.reduce(function (a, b) {\n        return a * b;\n      });\n      var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n      var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n      var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n      var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n      var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n      return tf.transpose(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);\n    }\n  }, {\n    key: \"pool3d\",\n    value: function pool3d(x, convInfo, poolType) {\n      assertNotComplex(x, 'pool3d');\n      var strideDepth = convInfo.strideDepth;\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var dilationDepth = convInfo.dilationDepth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n      var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n      var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n      var padFront = convInfo.padInfo.front;\n      var padTop = convInfo.padInfo.top;\n      var padLeft = convInfo.padInfo.left;\n      var initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n      var xValues = this.readSync(x.dataId);\n      var output = tf.buffer(convInfo.outShape, x.dtype);\n      var outputVals = output.values;\n      var outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n      var outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n      var outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n      var outputColStrides = convInfo.outShape[4];\n\n      for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n        var outputBatchOffset = batch * outputBatchStrides;\n        var inputBatchOffset = batch * x.strides[0];\n\n        for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n          for (var yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n            var xDepthCorner = yDepth * strideDepth - padFront;\n            var xDepthMin = xDepthCorner;\n\n            while (xDepthMin < 0) {\n              xDepthMin += dilationDepth;\n            }\n\n            var xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n            var outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n\n            for (var yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n              var xRowCorner = yRow * strideHeight - padTop;\n              var xRowMin = xRowCorner;\n\n              while (xRowMin < 0) {\n                xRowMin += dilationHeight;\n              }\n\n              var xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n              var outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n\n              for (var yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                var xColCorner = yCol * strideWidth - padLeft;\n                var xColMin = xColCorner;\n\n                while (xColMin < 0) {\n                  xColMin += dilationWidth;\n                }\n\n                var xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                var outputColOffset = outputRowOffset + yCol * outputColStrides;\n                var minMaxValue = initialValue;\n                var avgValue = 0;\n                var count = 0;\n\n                for (var xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                  var xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n\n                  for (var xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                    var xRowOffset = xDepthOffset + xRow * x.strides[2];\n\n                    for (var xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                      var xColOffset = xRowOffset + xCol * x.strides[3];\n                      var pixel = xValues[xColOffset + channel];\n\n                      if (poolType === 'max' && pixel > minMaxValue) {\n                        minMaxValue = pixel;\n                      } else if (poolType === 'avg') {\n                        avgValue += pixel;\n                        count++;\n                      }\n\n                      if (isNaN(minMaxValue)) {\n                        break;\n                      }\n                    }\n\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n\n                var outputOffset = outputColOffset + channel;\n                outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;\n              }\n            }\n          }\n        }\n      }\n\n      return output.toTensor();\n    }\n  }, {\n    key: \"avgPool3d\",\n    value: function avgPool3d(x, convInfo) {\n      assertNotComplex(x, 'avgPool3d');\n      return this.pool3d(x, convInfo, 'avg').toFloat();\n    }\n  }, {\n    key: \"avgPool3dBackprop\",\n    value: function avgPool3dBackprop(dy, x, convInfo) {\n      assertNotComplex([dy, x], 'avgPool3dBackprop');\n      var strideDepth = convInfo.strideDepth;\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var filterDepth = convInfo.filterDepth;\n      var filterHeight = convInfo.filterHeight;\n      var filterWidth = convInfo.filterWidth;\n      var dilationDepth = convInfo.dilationDepth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n      var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n      var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n      var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n      var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n      var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n      var dx = tf.buffer(x.shape, 'float32');\n      var avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n      var dyBuf = this.bufferSync(dy);\n\n      for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n          for (var dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n            for (var dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n              for (var dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                var dyDepthCorner = dxDepth - padFront;\n                var dyRowCorner = dxRow - padTop;\n                var dyColCorner = dxCol - padLeft;\n                var dotProd = 0;\n\n                for (var wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                  var dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n\n                  if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                    continue;\n                  }\n\n                  for (var wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                    var dyRow = (dyRowCorner + wRow) / strideHeight;\n\n                    if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                      continue;\n                    }\n\n                    for (var wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                      var dyCol = (dyColCorner + wCol) / strideWidth;\n\n                      if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                        continue;\n                      }\n\n                      var pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                      dotProd += pixel;\n                    }\n                  }\n                }\n\n                dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n              }\n            }\n          }\n        }\n      }\n\n      return dx.toTensor();\n    }\n  }, {\n    key: \"maxPool3d\",\n    value: function maxPool3d(x, convInfo) {\n      assertNotComplex(x, 'maxPool3d');\n      return this.pool3d(x, convInfo, 'max').toFloat();\n    }\n  }, {\n    key: \"maxPool3dPositions\",\n    value: function maxPool3dPositions(x, convInfo) {\n      var maxPositions = tf.buffer(convInfo.outShape, 'int32');\n      var strideDepth = convInfo.strideDepth;\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var dilationDepth = convInfo.dilationDepth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n      var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n      var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n      var padFront = convInfo.padInfo.front;\n      var padTop = convInfo.padInfo.top;\n      var padLeft = convInfo.padInfo.left;\n      var xBuf = this.bufferSync(x);\n\n      for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n          for (var yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n            var xDepthCorner = yDepth * strideDepth - padFront;\n            var xDepthMin = xDepthCorner;\n\n            while (xDepthMin < 0) {\n              xDepthMin += dilationDepth;\n            }\n\n            var xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n\n            for (var yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n              var xRowCorner = yRow * strideHeight - padTop;\n              var xRowMin = xRowCorner;\n\n              while (xRowMin < 0) {\n                xRowMin += dilationHeight;\n              }\n\n              var xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n\n              for (var yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                var xColCorner = yCol * strideWidth - padLeft;\n                var xColMin = xColCorner;\n\n                while (xColMin < 0) {\n                  xColMin += dilationWidth;\n                }\n\n                var xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                var maxValue = Number.NEGATIVE_INFINITY;\n                var maxPosition = -1;\n\n                for (var xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                  var wDepth = xDepth - xDepthCorner;\n\n                  for (var xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                    var wRow = xRow - xRowCorner;\n\n                    for (var xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                      var wCol = xCol - xColCorner;\n                      var pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n\n                      if (pixel >= maxValue) {\n                        maxValue = pixel;\n                        maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;\n                      }\n                    }\n                  }\n                }\n\n                maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n              }\n            }\n          }\n        }\n      }\n\n      return maxPositions.toTensor();\n    }\n  }, {\n    key: \"maxPool3dBackprop\",\n    value: function maxPool3dBackprop(dy, x, y, convInfo) {\n      assertNotComplex([x, y], 'maxPool3dBackprop');\n      var maxPositions = this.maxPool3dPositions(x, convInfo);\n      var strideDepth = convInfo.strideDepth;\n      var strideHeight = convInfo.strideHeight;\n      var strideWidth = convInfo.strideWidth;\n      var dilationDepth = convInfo.dilationDepth;\n      var dilationHeight = convInfo.dilationHeight;\n      var dilationWidth = convInfo.dilationWidth;\n      var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n      var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n      var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n      var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n      var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n      var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n      var dx = tf.buffer(x.shape, 'float32');\n      var maxPosBuf = this.bufferSync(maxPositions);\n      var dyBuf = this.bufferSync(dy);\n\n      for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n          for (var dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n            for (var dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n              for (var dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                var dyDepthCorner = dxDepth - padFront;\n                var dyRowCorner = dxRow - padTop;\n                var dyColCorner = dxCol - padLeft;\n                var dotProd = 0;\n\n                for (var wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                  var dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n\n                  if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                    continue;\n                  }\n\n                  for (var wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                    var dyRow = (dyRowCorner + wRow) / strideHeight;\n\n                    if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                      continue;\n                    }\n\n                    for (var wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                      var dyCol = (dyColCorner + wCol) / strideWidth;\n\n                      if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                        continue;\n                      }\n\n                      var maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                      var curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                      var mask = maxPos === curPos ? 1 : 0;\n\n                      if (mask === 0) {\n                        continue;\n                      }\n\n                      var pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                      dotProd += pixel * mask;\n                    }\n                  }\n                }\n\n                dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n              }\n            }\n          }\n        }\n      }\n\n      return dx.toTensor();\n    }\n  }, {\n    key: \"resizeBilinear\",\n    value: function resizeBilinear(x, newHeight, newWidth, alignCorners) {\n      assertNotComplex(x, 'resizeBilinear');\n\n      var _x$shape = _slicedToArray(x.shape, 4),\n          batch = _x$shape[0],\n          oldHeight = _x$shape[1],\n          oldWidth = _x$shape[2],\n          numChannels = _x$shape[3];\n\n      var xValues = this.readSync(x.dataId);\n      var result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n      var effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n      var effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n      var outputIdx = 0;\n      var effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n      var effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n      for (var b = 0; b < batch; b++) {\n        for (var r = 0; r < newHeight; r++) {\n          var sourceFracRow = effectiveRowSizeRatio * r;\n          var sourceRowFloor = Math.floor(sourceFracRow);\n          var rowFrac = sourceFracRow - sourceRowFloor;\n          var sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n          var topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n          var botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n\n          for (var c = 0; c < newWidth; c++) {\n            var sourceFracCol = effectiveColSizeRatio * c;\n            var sourceColFloor = Math.floor(sourceFracCol);\n            var colFrac = sourceFracCol - sourceColFloor;\n            var sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n            var topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n            var botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n            var topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n            var botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n\n            for (var d = 0; d < numChannels; d++) {\n              var topLeft = xValues[topLeftOffest + d];\n              var bottomLeft = xValues[botLeftOffset + d];\n              var topRight = xValues[topRightOffset + d];\n              var bottomRight = xValues[botRightOffest + d];\n              var top = topLeft + (topRight - topLeft) * colFrac;\n              var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n              var newValue = top + (bottom - top) * rowFrac;\n              result[outputIdx++] = newValue;\n            }\n          }\n        }\n      }\n\n      return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n    }\n  }, {\n    key: \"resizeBilinearBackprop\",\n    value: function resizeBilinearBackprop(dy, x, alignCorners) {\n      assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n      var _x$shape2 = _slicedToArray(x.shape, 4),\n          batch = _x$shape2[0],\n          xHeight = _x$shape2[1],\n          xWidth = _x$shape2[2],\n          depth = _x$shape2[3];\n\n      var _dy$shape = _slicedToArray(dy.shape, 3),\n          yHeight = _dy$shape[1],\n          yWidth = _dy$shape[2];\n\n      var output = new Float32Array(batch * xHeight * xWidth * depth);\n      var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n      var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n      var heightScale = effectiveXSize[0] / effectiveYSize[0];\n      var widthScale = effectiveXSize[1] / effectiveYSize[1];\n      var dyValues = this.readSync(dy.dataId);\n      var offset = 0;\n\n      for (var b = 0; b < batch; b++) {\n        var bOffset = b * x.strides[0];\n\n        for (var r = 0; r < yHeight; r++) {\n          var dxR = r * heightScale;\n          var topDxRIndex = Math.floor(dxR);\n          var bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n          var topDxROffset = bOffset + topDxRIndex * x.strides[1];\n          var bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n          var dxRLerp = dxR - topDxRIndex;\n          var inverseDxRLerp = 1.0 - dxRLerp;\n\n          for (var c = 0; c < yWidth; c++) {\n            var dxC = c * widthScale;\n            var leftDxCIndex = Math.floor(dxC);\n            var rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n            var dxCLerp = dxC - leftDxCIndex;\n            var inverseDxCLerp = 1.0 - dxCLerp;\n            var topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n            var topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n            var bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];\n            var bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];\n            var inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n            var inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n            var dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n            var dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n\n            for (var d = 0; d < depth; d++) {\n              var dyVal = dyValues[offset++];\n              output[topLeftRCOffset + d] += dyVal * inverseDxRLerpTimesInverseDxCLerp;\n              output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n              output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n              output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n            }\n          }\n        }\n      }\n\n      return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n    }\n  }, {\n    key: \"resizeNearestNeighbor\",\n    value: function resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n      assertNotComplex(x, 'resizeNearestNeighbor');\n\n      var _x$shape3 = _slicedToArray(x.shape, 4),\n          batch = _x$shape3[0],\n          oldHeight = _x$shape3[1],\n          oldWidth = _x$shape3[2],\n          numChannels = _x$shape3[3];\n\n      var xValues = this.readSync(x.dataId);\n      var output = new Float32Array(batch * newHeight * newWidth * numChannels);\n      var effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n      var effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n      var effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n      var effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n      var outputOffset = 0;\n\n      for (var b = 0; b < batch; b++) {\n        var batchOffset = b * x.strides[0];\n\n        for (var r = 0; r < newHeight; r++) {\n          var sourceFracRow = effectiveRowSizeRatio * r;\n          var sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n          var rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n\n          for (var c = 0; c < newWidth; c++) {\n            var sourceFracCol = effectiveColSizeRatio * c;\n            var sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n            var colOffset = rowOffset + sourceNearestCol * x.strides[2];\n\n            for (var d = 0; d < numChannels; d++) {\n              var newVal = xValues[colOffset + d];\n              output[outputOffset++] = newVal;\n            }\n          }\n        }\n      }\n\n      return tf.tensor(output, [batch, newHeight, newWidth, numChannels], x.dtype);\n    }\n  }, {\n    key: \"resizeNearestNeighborBackprop\",\n    value: function resizeNearestNeighborBackprop(dy, x, alignCorners) {\n      assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n      var _x$shape4 = _slicedToArray(x.shape, 4),\n          batch = _x$shape4[0],\n          xHeight = _x$shape4[1],\n          xWidth = _x$shape4[2],\n          depth = _x$shape4[3];\n\n      var _dy$shape2 = _slicedToArray(dy.shape, 3),\n          yHeight = _dy$shape2[1],\n          yWidth = _dy$shape2[2];\n\n      var output = new Float32Array(batch * xHeight * xWidth * depth);\n      var dyValues = this.readSync(dy.dataId);\n      var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n      var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n      var heightScale = effectiveXSize[0] / effectiveYSize[0];\n      var widthScale = effectiveXSize[1] / effectiveYSize[1];\n      var invHeightScale = 1 / heightScale;\n      var invWidthScale = 1 / widthScale;\n      var winHeight = Math.ceil(invHeightScale) * 2 + 2;\n      var winWidth = Math.ceil(invWidthScale) * 2 + 2;\n\n      for (var b = 0; b < batch; b++) {\n        var batchOffset = b * x.strides[0];\n\n        for (var r = 0; r < xHeight; r++) {\n          var rowOffset = batchOffset + r * x.strides[1];\n          var startRLerp = Math.floor(r * invHeightScale);\n          var startDyR = Math.floor(startRLerp - winHeight / 2);\n\n          for (var c = 0; c < xWidth; c++) {\n            var colOffset = rowOffset + c * x.strides[2];\n            var startCLerp = Math.floor(c * invWidthScale);\n            var startDyC = Math.floor(startCLerp - winWidth / 2);\n\n            for (var d = 0; d < depth; d++) {\n              var accum = 0;\n\n              for (var dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                var dyR = dyRIndex + startDyR;\n\n                if (dyR < 0 || dyR >= yHeight) {\n                  continue;\n                }\n\n                var dyROffset = batchOffset + dyR * dy.strides[1];\n                var sourceFracRow = dyR * heightScale;\n                var sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n\n                if (r !== sourceNearestRow) {\n                  continue;\n                }\n\n                for (var dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                  var dyC = dyCIndex + startDyC;\n\n                  if (dyC < 0 || dyC >= yWidth) {\n                    continue;\n                  }\n\n                  var dyCOffset = dyROffset + dyC * dy.strides[2];\n                  var sourceFracCol = dyC * widthScale;\n                  var sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n\n                  if (c === sourceNearestCol) {\n                    accum += dyValues[dyCOffset + d];\n                  }\n                }\n              }\n\n              output[colOffset + d] = accum;\n            }\n          }\n        }\n      }\n\n      return tf.tensor4d(output, x.shape, x.dtype);\n    }\n  }, {\n    key: \"localResponseNormalization4D\",\n    value: function localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {\n      assertNotComplex(x, 'localResponseNormalization4D');\n      var channels = x.shape[3];\n      var maxD = channels - 1;\n      var xValues = this.readSync(x.dataId);\n      var size = x.size;\n      var result = new Float32Array(size);\n\n      function sumAcrossChannels(offset) {\n        var currentChannel = offset % channels;\n        var beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        var endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n        var sum = 0.0;\n\n        for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n          var z = xValues[beginSumOffset];\n          sum += z * z;\n        }\n\n        return sum;\n      }\n\n      for (var offset = 0; offset < size; offset++) {\n        var sum = sumAcrossChannels(offset);\n        var val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n        result[offset] = val;\n      }\n\n      return tf.tensor4d(result, x.shape);\n    }\n  }, {\n    key: \"LRNGrad\",\n    value: function LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n      assertNotComplex(dy, 'LRNGrad');\n      var channels = dy.shape[3];\n      var dyValues = this.readSync(dy.dataId);\n      var inputImageValues = this.readSync(inputImage.dataId);\n      var outputImageValues = this.readSync(outputImage.dataId);\n      var result = new Float32Array(dy.size);\n      var size = dy.size;\n\n      for (var offset = 0; offset < size; offset++) {\n        var currentChannel = offset % channels;\n        var depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        var depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);\n        var norm = 0;\n\n        for (var k = depthBegin; k < depthEnd; k++) {\n          norm += Math.pow(inputImageValues[k], 2);\n        }\n\n        norm = alpha * norm + bias;\n\n        for (var _k = depthBegin; _k < depthEnd; _k++) {\n          var dyi = -2 * alpha * beta * inputImageValues[_k] * outputImageValues[offset] / norm;\n\n          if (offset === _k) {\n            dyi += Math.pow(norm, -beta);\n          }\n\n          dyi *= dyValues[offset];\n          result[_k] += dyi;\n        }\n      }\n\n      return tf.tensor4d(result, dy.shape);\n    }\n  }, {\n    key: \"multinomial\",\n    value: function multinomial(logits, normalized, numSamples, seed) {\n      assertNotComplex(logits, 'multinomial');\n      var probabilities = normalized ? logits : tf.softmax(logits);\n      var batchSize = probabilities.shape[0];\n      var numEvents = probabilities.shape[1];\n      var res = tf.zeros([batchSize, numSamples], 'int32');\n      var resVals = this.readSync(res.dataId);\n      var probVals = this.readSync(probabilities.dataId);\n\n      for (var b = 0; b < batchSize; ++b) {\n        var offset = b * numEvents;\n        var cdf = new Float32Array(numEvents - 1);\n        cdf[0] = probVals[offset];\n\n        for (var event = 1; event < cdf.length; ++event) {\n          cdf[event] = cdf[event - 1] + probVals[offset + event];\n        }\n\n        var random = seedrandom.alea(seed.toString());\n        var outOffset = b * numSamples;\n\n        for (var sampleId = 0; sampleId < numSamples; ++sampleId) {\n          var r = random();\n          resVals[outOffset + sampleId] = cdf.length;\n\n          for (var _event = 0; _event < cdf.length; _event++) {\n            if (r < cdf[_event]) {\n              resVals[outOffset + sampleId] = _event;\n              break;\n            }\n          }\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"oneHot\",\n    value: function oneHot(indices, depth, onValue, offValue) {\n      assertNotComplex(indices, 'oneHot');\n      var res = new Float32Array(indices.size * depth);\n      res.fill(offValue);\n      var indicesVal = this.readSync(indices.dataId);\n\n      for (var event = 0; event < indices.size; ++event) {\n        if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n          res[event * depth + indicesVal[event]] = onValue;\n        }\n      }\n\n      return tf.tensor2d(res, [indices.size, depth], 'int32');\n    }\n  }, {\n    key: \"nonMaxSuppression\",\n    value: function nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n      assertNotComplex(boxes, 'nonMaxSuppression');\n      var boxesVals = this.readSync(boxes.dataId);\n      var scoresVals = this.readSync(scores.dataId);\n      return nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    }\n  }, {\n    key: \"depthToSpace\",\n    value: function depthToSpace(x, blockSize, dataFormat) {\n      util.assert(dataFormat === 'NHWC', function () {\n        return \"Only NHWC dataFormat supported on CPU for depthToSpace. Got \" + dataFormat;\n      });\n      util.assert(blockSize > 1, function () {\n        return \"blockSize should be > 1 for depthToSpace, but was: \" + blockSize;\n      });\n      var batchSize = x.shape[0];\n      var inputHeight = x.shape[1];\n      var inputWidth = x.shape[2];\n      var inputDepth = x.shape[3];\n      var outputHeight = inputHeight * blockSize;\n      var outputWidth = inputWidth * blockSize;\n      var outputDepth = inputDepth / (blockSize * blockSize);\n      var xValues = this.readSync(x.dataId);\n      var result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n      var outputIdx = 0;\n\n      for (var b = 0; b < batchSize; ++b) {\n        for (var h = 0; h < outputHeight; ++h) {\n          var inH = Math.floor(h / blockSize);\n          var offsetH = h % blockSize;\n\n          for (var w = 0; w < outputWidth; ++w) {\n            var inW = Math.floor(w / blockSize);\n            var offsetW = w % blockSize;\n            var offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n\n            for (var d = 0; d < outputDepth; ++d) {\n              var inD = d + offsetD;\n              var inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n              result[outputIdx++] = xValues[inputIdx];\n            }\n          }\n        }\n      }\n\n      return tf.tensor4d(result, [batchSize, outputHeight, outputWidth, outputDepth]);\n    }\n  }, {\n    key: \"broadcastedBinaryOp\",\n    value: function broadcastedBinaryOp(a, b, dtype, op) {\n      var newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n      var result = tf.buffer(newShape, dtype);\n      var aVals = this.readSync(a.dataId);\n      var bVals = this.readSync(b.dataId);\n      var aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n      var bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n      var resVals = result.values;\n\n      if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n        for (var i = 0; i < resVals.length; ++i) {\n          resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n        }\n      } else {\n        var aBuf = this.bufferSync(a);\n        var bBuf = this.bufferSync(b);\n\n        var _loop2 = function _loop2(_i3) {\n          var loc = result.indexToLoc(_i3);\n          var aLoc = loc.slice(-a.rank);\n          aBroadcastDims.forEach(function (d) {\n            return aLoc[d] = 0;\n          });\n          var aIndex = aBuf.locToIndex(aLoc);\n          var bLoc = loc.slice(-b.rank);\n          bBroadcastDims.forEach(function (d) {\n            return bLoc[d] = 0;\n          });\n          var bIndex = bBuf.locToIndex(bLoc);\n          resVals[_i3] = op(aVals[aIndex], bVals[bIndex]);\n        };\n\n        for (var _i3 = 0; _i3 < resVals.length; ++_i3) {\n          _loop2(_i3);\n        }\n      }\n\n      return result.toTensor();\n    }\n  }, {\n    key: \"split\",\n    value: function split(x, sizeSplits, axis) {\n      return _split(x, sizeSplits, axis);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return 32;\n    }\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return _get(_getPrototypeOf(MathBackendCPU.prototype), \"epsilon\", this).call(this);\n    }\n  }, {\n    key: \"cropAndResize\",\n    value: function cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {\n      var _images$shape = _slicedToArray(images.shape, 4),\n          batch = _images$shape[0],\n          imageHeight = _images$shape[1],\n          imageWidth = _images$shape[2],\n          numChannels = _images$shape[3];\n\n      var numBoxes = boxes.shape[0];\n\n      var _cropSize = _slicedToArray(cropSize, 2),\n          cropHeight = _cropSize[0],\n          cropWidth = _cropSize[1];\n\n      var output = tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n      var boxVals = this.readSync(boxes.dataId);\n      var boxIndVals = this.readSync(boxIndex.dataId);\n      var imageVals = this.readSync(images.dataId);\n      var inStride = images.strides;\n      var outStride = output.strides;\n\n      for (var b = 0; b < numBoxes; b++) {\n        var startInd = b * 4;\n        var y1 = boxVals[startInd];\n        var x1 = boxVals[startInd + 1];\n        var y2 = boxVals[startInd + 2];\n        var x2 = boxVals[startInd + 3];\n        var bInd = boxIndVals[b];\n\n        if (bInd >= batch) {\n          continue;\n        }\n\n        var heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n        var widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n        for (var y = 0; y < cropHeight; y++) {\n          var yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n\n          if (yInd < 0 || yInd > imageHeight - 1) {\n            for (var x = 0; x < cropWidth; x++) {\n              for (var c = 0; c < numChannels; c++) {\n                var ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n            }\n\n            continue;\n          }\n\n          if (method === 'bilinear') {\n            var topInd = Math.floor(yInd);\n            var bottomInd = Math.ceil(yInd);\n            var yLerp = yInd - topInd;\n\n            for (var _x = 0; _x < cropWidth; _x++) {\n              var xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n              if (xInd < 0 || xInd > imageWidth - 1) {\n                for (var _c = 0; _c < numChannels; _c++) {\n                  var _ind = _c + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n\n                  output.values[_ind] = extrapolationValue;\n                }\n\n                continue;\n              }\n\n              var leftInd = Math.floor(xInd);\n              var rightInd = Math.ceil(xInd);\n              var xLerp = xInd - leftInd;\n\n              for (var _c2 = 0; _c2 < numChannels; _c2++) {\n                var _ind2 = _c2 + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n\n                var topLeft = imageVals[_ind2];\n                _ind2 = _c2 + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n                var topRight = imageVals[_ind2];\n                _ind2 = _c2 + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n                var bottomLeft = imageVals[_ind2];\n                _ind2 = _c2 + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n                var bottomRight = imageVals[_ind2];\n                var top = topLeft + (topRight - topLeft) * xLerp;\n                var bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                _ind2 = _c2 + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[_ind2] = top + (bottom - top) * yLerp;\n              }\n            }\n          } else {\n            for (var _x2 = 0; _x2 < cropWidth; ++_x2) {\n              var _xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x2 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n              if (_xInd < 0 || _xInd > imageWidth - 1) {\n                for (var _c3 = 0; _c3 < numChannels; _c3++) {\n                  var _ind3 = _c3 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n\n                  output.values[_ind3] = extrapolationValue;\n                }\n\n                continue;\n              }\n\n              var closestX = Math.round(_xInd);\n              var closestY = Math.round(yInd);\n\n              for (var _c4 = 0; _c4 < numChannels; _c4++) {\n                var inInd = _c4 + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n                var outInd = _c4 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[outInd] = imageVals[inInd];\n              }\n            }\n          }\n        }\n      }\n\n      return output.toTensor();\n    }\n  }, {\n    key: \"sparseToDense\",\n    value: function sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n      var _backend_util$calcula = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape),\n          sliceRank = _backend_util$calcula.sliceRank,\n          numUpdates = _backend_util$calcula.numUpdates,\n          sliceSize = _backend_util$calcula.sliceSize,\n          strides = _backend_util$calcula.strides,\n          outputSize = _backend_util$calcula.outputSize;\n\n      var sumDupeIndices = false;\n      return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n  }, {\n    key: \"gatherND\",\n    value: function gatherND(x, indices) {\n      var indicesShape = indices.shape;\n      var sliceRank = indicesShape[indicesShape.length - 1];\n\n      var _backend_util$prepare = backend_util.prepareAndValidate(x, indices),\n          _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n          resultShape = _backend_util$prepare2[0],\n          numSlices = _backend_util$prepare2[1],\n          sliceSize = _backend_util$prepare2[2],\n          strides = _backend_util$prepare2[3];\n\n      if (numSlices === 0) {\n        return tf.tensor([], resultShape, x.dtype);\n      }\n\n      var buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n      var indicesData = this.readSync(indices.dataId);\n      var xData = this.readSync(x.dataId);\n\n      for (var i = 0; i < numSlices; i++) {\n        var index = [];\n        var flattenIndex = 0;\n\n        for (var j = 0; j < sliceRank; j++) {\n          var dim = indicesData[i * sliceRank + j];\n          flattenIndex += dim * strides[j];\n          index.push(dim);\n        }\n\n        if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n          throw new Error(\"Invalid indices: \" + index + \" does not index into \" + x.shape);\n        }\n\n        for (var k = 0; k < sliceSize; k++) {\n          buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n        }\n      }\n\n      return buffer.toTensor().reshape(resultShape);\n    }\n  }, {\n    key: \"scatterND\",\n    value: function scatterND(indices, updates, shape) {\n      var _backend_util$calcula2 = backend_util.calculateShapes(updates, indices, shape),\n          sliceRank = _backend_util$calcula2.sliceRank,\n          numUpdates = _backend_util$calcula2.numUpdates,\n          sliceSize = _backend_util$calcula2.sliceSize,\n          strides = _backend_util$calcula2.strides,\n          outputSize = _backend_util$calcula2.outputSize;\n\n      var defaultValue = tf.scalar(0);\n      var sumDupeIndices = true;\n      return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(shape, value, dtype) {\n      dtype = dtype || util.inferDtype(value);\n      var values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n      values.fill(value);\n      return engine().makeTensor(values, shape, dtype, this);\n    }\n  }, {\n    key: \"onesLike\",\n    value: function onesLike(x) {\n      if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported for string tensors');\n      } else {\n        return this.fill(x.shape, 1, x.dtype);\n      }\n    }\n  }, {\n    key: \"zerosLike\",\n    value: function zerosLike(x) {\n      var values = util.getArrayFromDType(x.dtype, util.sizeFromShape(x.shape));\n      return this.makeOutput(values, x.shape, x.dtype);\n    }\n  }, {\n    key: \"linspace\",\n    value: function linspace(start, stop, num) {\n      return backend_util.linspaceImpl(start, stop, num);\n    }\n  }, {\n    key: \"scatter\",\n    value: function scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n      var flattenShape = [outputSize / sliceSize, sliceSize];\n      var indicesData = this.readSync(indices.dataId);\n      var updatesData = this.readSync(updates.dataId);\n\n      if (outputSize === 0) {\n        return tf.tensor([], shape, updates.dtype);\n      }\n\n      var buffer = new TensorBuffer(flattenShape, updates.dtype);\n      buffer.values.fill(this.readSync(defaultValue.dataId)[0]);\n\n      for (var i = 0; i < numUpdates; i++) {\n        var index = [];\n        var flattenIndex = 0;\n\n        for (var j = 0; j < sliceRank; j++) {\n          var dim = indicesData[i * sliceRank + j];\n          index.push(dim);\n          flattenIndex += dim * strides[j];\n        }\n\n        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n          throw new Error(\"Invalid indices: \" + index + \" does not index into \" + shape);\n        }\n\n        for (var k = 0; k < sliceSize; k++) {\n          if (sumDupeIndices) {\n            buffer.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n          } else {\n            buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n          }\n        }\n      }\n\n      return buffer.toTensor().reshape(shape);\n    }\n  }]);\n\n  return MathBackendCPU;\n}(KernelBackend);","map":{"version":3,"sources":["../src/backend_cpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { backend_util, DataStorage, engine, env, kernel_impls, KernelBackend, max, slice_util, TensorBuffer, upcastType, util } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from './cpu_util';\nfunction mapActivation(backend, x, activation, preluActivationWeights) {\n    if (activation === 'linear') {\n        return backend.linear(x);\n    }\n    else if (activation === 'relu') {\n        return backend.relu(x);\n    }\n    else if (activation === 'elu') {\n        return tf.elu(x);\n    }\n    else if (activation === 'relu6') {\n        return backend.relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return backend.prelu(x, preluActivationWeights);\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = {};\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n        return dataId;\n    }\n    /**\n     * Create a data bucket in cpu backend.\n     * @param shape Shape of the `TensorInfo`.\n     * @param dtype DType of the `TensorInfo`.\n     * @param values The value of the `TensorInfo` stored as a flattened array.\n     */\n    makeTensorInfo(shape, dtype, values) {\n        const outId = this.write(values, shape, dtype);\n        return { dataId: outId, shape, dtype };\n    }\n    /** Increase refCount of a `TensorData`. */\n    incRef(dataId) {\n        const tensorData = this.data.get(dataId);\n        tensorData.refCount++;\n    }\n    /** Decrease refCount of a `TensorData`. */\n    decRef(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensorInfos } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return tf.buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    disposeData(dataId) {\n        if (this.data.has(dataId)) {\n            const { complexTensorInfos } = this.data.get(dataId);\n            if (complexTensorInfos != null) {\n                this.disposeData(complexTensorInfos.real.dataId);\n                this.disposeData(complexTensorInfos.imag.dataId);\n            }\n            this.data.delete(dataId);\n        }\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n            if (tensorData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    stridedSlice(x, begin, end, strides) {\n        assertNotComplex(x, 'stridedSlice');\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tf.tensor([], outShape);\n        }\n        const buffer = tf.buffer(outShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const loc = buffer.indexToLoc(i);\n            const newLoc = new Array(loc.length);\n            for (let j = 0; j < newLoc.length; j++) {\n                newLoc[j] = loc[j] * strides[j] + begin[j];\n            }\n            buffer.set(xBuf.get(...newLoc), ...loc);\n        }\n        return buffer.toTensor();\n    }\n    diag(x) {\n        const xVals = this.readSync(x.dataId);\n        const buffer = tf.buffer([x.size, x.size], x.dtype);\n        const vals = buffer.values;\n        for (let i = 0; i < xVals.length; i++) {\n            vals[i * x.size + i] = xVals[i];\n        }\n        return buffer.toTensor();\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = tf.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    reverse(x, axis) {\n        assertNotComplex(x, 'reverse');\n        const buffer = tf.buffer(x.shape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const outLoc = buffer.indexToLoc(i);\n            const inLoc = outLoc.slice();\n            axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n            buffer.set(xBuf.get(...inLoc), ...outLoc);\n        }\n        return buffer.toTensor();\n    }\n    neg(x) {\n        assertNotComplex(x, 'neg');\n        // TODO(lina128): Use mul directly once neg is modularized.\n        return tf.mul(tf.scalar(-1), x);\n    }\n    addN(tensors) {\n        assertNotComplex(tensors, 'addN');\n        const vals = tensors.map(t => this.readSync(t.dataId));\n        const result = tf.buffer(tensors[0].shape, tensors[0].dtype);\n        const resultVals = result.values;\n        for (let i = 0; i < tensors.length; i++) {\n            const currVals = vals[i];\n            for (let j = 0; j < resultVals.length; j++) {\n                resultVals[j] += currVals[j];\n            }\n        }\n        return result.toTensor();\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        // TODO(lina128): Use sub directly once softmax is modularized.\n        const a = tf.sub(logits, maxLogit.reshape(expandedShape));\n        const b = tf.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n        // kernel modularization.\n        return tf.div(b, sumExp);\n    }\n    pow(a, b) {\n        assertNotComplex([a, b], 'pow');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue));\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        assertNotComplex([a, b], 'matMul');\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const leftDim = transposeA ? a.shape[2] : a.shape[1];\n        const rightDim = transposeB ? b.shape[1] : b.shape[2];\n        const batchDim = a.shape[0];\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n            [a.strides[0], 1, a.strides[1]] :\n            [a.strides[0], a.strides[1], 1];\n        const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n            [1, b.strides[1], b.strides[0]] :\n            [b.strides[1], 1, b.strides[0]];\n        const size = leftDim * rightDim;\n        const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n        const resVals = result.values;\n        const blockSize = this.blockSize;\n        for (let b = 0; b < batchDim; b++) {\n            for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n                for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                    for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                        // for when blockSize doesn't evenly divide the input\n                        const iBlock = Math.min(i0 + blockSize, leftDim);\n                        const jBlock = Math.min(j0 + blockSize, rightDim);\n                        const kBlock = Math.min(k0 + blockSize, sharedDim);\n                        for (let i = i0; i < iBlock; i++) {\n                            for (let j = j0; j < jBlock; j++) {\n                                let sum = 0.0;\n                                for (let k = k0; k < kBlock; k++) {\n                                    sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                                        bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                                }\n                                resVals[b * size + (i * rightDim + j)] += sum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result.toTensor();\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        let result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias) {\n            // TODO(lina128): Use add directly once fusedBatchMatMul is modularized.\n            result = tf.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    floorDiv(a, b) {\n        assertNotComplex([a, b], 'floorDiv');\n        const op = (a, b) => Math.floor(a / b);\n        const outputDtype = 'int32';\n        return this.broadcastedBinaryOp(a, b, outputDtype, op);\n    }\n    sum(x, axes) {\n        assertNotComplex(x, 'sum');\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let sum = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                sum += aVals[offset + j];\n            }\n            vals[i] = sum;\n        }\n        return result;\n    }\n    prod(x, axes) {\n        assertNotComplex(x, 'sum');\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let prod = 1;\n            for (let j = 0; j < reduceSize; ++j) {\n                prod *= aVals[offset + j];\n            }\n            vals[i] = prod;\n        }\n        return result;\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        assertNotComplex(x, 'unsortedSegmentSum');\n        const res = [];\n        // Reshape the segment id's so that they can be broadcast with\n        // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n        const numIters = x.rank - segmentIds.rank;\n        for (let i = 0; i < numIters; ++i) {\n            segmentIds = segmentIds.expandDims(i + 1);\n        }\n        for (let i = 0; i < numSegments; ++i) {\n            const segmentId = tf.scalar(i, 'int32');\n            const mask = tf.equal(segmentId, segmentIds).asType('float32');\n            const sum = mask.mul(x).sum(0);\n            res.push(sum);\n        }\n        return tf.stack(res);\n    }\n    argMin(x, axis) {\n        assertNotComplex(x, 'argMin');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            let minIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                    minIndex = j;\n                }\n            }\n            vals[i] = minIndex;\n        }\n        return result;\n    }\n    argMax(x, axis) {\n        assertNotComplex(x, 'argMax');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let max = aVals[offset];\n            let maxIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value > max) {\n                    max = value;\n                    maxIndex = j;\n                }\n            }\n            vals[i] = maxIndex;\n        }\n        return result;\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        assertNotComplex(x, 'cumsum');\n        if (axis !== x.rank - 1) {\n            throw new Error(`backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(x.shape, resultDtype);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        const finalDim = x.shape[x.rank - 1];\n        const indexAdjuster = reverse ?\n            (i, j) => i + finalDim - j - 1 :\n            (i, j) => i + j;\n        for (let i = 0; i < aVals.length; i += finalDim) {\n            for (let j = 0; j < finalDim; j++) {\n                const idx = indexAdjuster(i, j);\n                if (j === 0) {\n                    vals[idx] = exclusive ? 0 : aVals[idx];\n                }\n                else {\n                    const prevIdx = indexAdjuster(i, j - 1);\n                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                        aVals[idx] + vals[prevIdx];\n                }\n            }\n        }\n        return result;\n    }\n    equal(a, b) {\n        assertNotComplex([a, b], 'equal');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal === bVal) ? 1 : 0;\n        });\n    }\n    notEqual(a, b) {\n        assertNotComplex([a, b], 'notEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal !== bVal) ? 1 : 0;\n        });\n    }\n    less(a, b) {\n        assertNotComplex([a, b], 'less');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal < bVal) ? 1 : 0;\n        });\n    }\n    lessEqual(a, b) {\n        assertNotComplex([a, b], 'lessEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal <= bVal) ? 1 : 0;\n        });\n    }\n    greater(a, b) {\n        assertNotComplex([a, b], 'greater');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal > bVal) ? 1 : 0;\n        });\n    }\n    greaterEqual(a, b) {\n        assertNotComplex([a, b], 'greaterEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal >= bVal) ? 1 : 0;\n        });\n    }\n    logicalAnd(a, b) {\n        assertNotComplex([a, b], 'logicalAnd');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal && bVal;\n        });\n    }\n    logicalOr(a, b) {\n        assertNotComplex([a, b], 'logicalOr');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal || bVal;\n        });\n    }\n    select(condition, a, b) {\n        assertNotComplex([condition, a, b], 'select');\n        const values = this.readSync(condition.dataId);\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n        const newValues = this.readSync(result.dataId);\n        let index = 0;\n        const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n            1 :\n            util.sizeFromShape(a.shape.slice(1));\n        for (let i = 0; i < values.length; i++) {\n            for (let j = 0; j < offset; j++) {\n                if (values[i] === 1) {\n                    newValues[index++] = aValues[i];\n                }\n                else {\n                    newValues[index++] = bValues[i];\n                }\n            }\n        }\n        return result;\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        assertNotComplex(x, 'topk');\n        const xVals = this.readSync(x.dataId);\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        assertNotComplex(x, 'min');\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                }\n            }\n            vals[i] = min;\n        }\n        return result;\n    }\n    minimum(a, b) {\n        assertNotComplex([a, b], 'minimum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n    }\n    mod(a, b) {\n        assertNotComplex([a, b], 'mod');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const rem = aVal % bVal;\n            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n                return rem;\n            }\n            else {\n                return (rem + bVal) % bVal;\n            }\n        });\n    }\n    maximum(a, b) {\n        assertNotComplex([a, b], 'maximum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n    }\n    all(x, axes) {\n        assertNotComplex(x, 'all');\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let all = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                all = all && value;\n            }\n            vals[i] = all;\n        }\n        return result;\n    }\n    any(x, axes) {\n        assertNotComplex(x, 'any');\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let anyVal = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                anyVal = anyVal || value;\n            }\n            vals[i] = anyVal;\n        }\n        return result;\n    }\n    squaredDifference(a, b) {\n        assertNotComplex([a, b], 'squaredDifference');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const diff = aVal - bVal;\n            return diff * diff;\n        });\n    }\n    linear(x) {\n        return x;\n    }\n    relu(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.max(0, inVals[i]);\n        }\n        return res;\n    }\n    relu6(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n        }\n        return res;\n    }\n    prelu(x, a) {\n        assertNotComplex([x, a], 'prelu');\n        return this.broadcastedBinaryOp(x, a, x.dtype, (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\n    }\n    eluDer(dy, y) {\n        assertNotComplex([dy, y], 'eluDer');\n        const resultValues = new Float32Array(y.size);\n        const values = this.readSync(y.dataId);\n        const dyValues = this.readSync(dy.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 1) {\n                resultValues[i] = dyValues[i];\n            }\n            else {\n                resultValues[i] = dyValues[i] * (v + 1);\n            }\n        }\n        return this.makeOutput(resultValues, y.shape, 'float32');\n    }\n    atan2(a, b) {\n        assertNotComplex([a, b], 'atan2');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue));\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.conv2d(input, filter, convInfo);\n        if (bias) {\n            // TODO(lina128): Use add directly once fusedConv2d is modularized.\n            result = tf.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    conv2d(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'conv2d');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xBatchStride = x.strides[0];\n        const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n        const xColStride = isChannelsLast ? x.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n        const yBatchStride = y.strides[0];\n        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n        const yColStride = isChannelsLast ? y.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * xBatchStride;\n            const yOffset1 = b * yBatchStride;\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * yRowStride;\n                const xRCorner = yR * convInfo.strideHeight - padTop;\n                for (let wR = 0; wR < filterHeight; wR++) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * xRowStride;\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * yColStride;\n                        const xCCorner = yC * convInfo.strideWidth - padLeft;\n                        for (let wC = 0; wC < filterWidth; wC++) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * xColStride;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                    yVals[yOffset3 + d2 * yChannelStride] +=\n                                        xVal * wVals[wOffset3 + d2];\n                                }\n                                wOffset3 += convInfo.outChannels;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv3d(x, filter, convInfo) {\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padFront = convInfo.padInfo.front;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n                const yOffset2 = yOffset1 + yF * y.strides[1];\n                const xFCorner = yF * convInfo.strideDepth - padFront;\n                for (let wF = 0; wF < filterDepth; wF++) {\n                    const xF = xFCorner + wF * dilationDepth;\n                    if (xF < 0 || xF >= convInfo.inDepth) {\n                        continue;\n                    }\n                    const wOffset1 = wF * filter.strides[0];\n                    const xOffset2 = xOffset1 + xF * x.strides[1];\n                    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                        const yOffset3 = yOffset2 + yR * y.strides[2];\n                        const xRCorner = yR * convInfo.strideHeight - padTop;\n                        for (let wR = 0; wR < filterHeight; wR++) {\n                            const xR = xRCorner + wR * dilationHeight;\n                            if (xR < 0 || xR >= convInfo.inHeight) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wR * filter.strides[1];\n                            const xOffset3 = xOffset2 + xR * x.strides[2];\n                            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                                for (let wC = 0; wC < filterWidth; wC++) {\n                                    const xC = xCCorner + wC * dilationWidth;\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\n                                        continue;\n                                    }\n                                    const wOffset3 = wOffset2 + wC * filter.strides[2];\n                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                    let wOffset4 = wOffset3;\n                                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                        const xVal = xVals[xOffset4 + d1];\n                                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                            yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                        }\n                                        wOffset4 += convInfo.outChannels;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'conv2dDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const dyValues = this.readSync(dy.dataId);\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth, dataFormat } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const xBatchStride = dx.strides[0];\n        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n        const xColStride = isChannelsLast ? dx.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n        const yBatchStride = dy.strides[0];\n        const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n        const yColStride = isChannelsLast ? dy.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let d2 = 0; d2 < outChannels; ++d2) {\n                                    const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                    const weight = fltValues[fltOffset + d2];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        const dxOffset = xBatchStride * b + xRowStride * xR +\n                            xColStride * xC + xChannelStride * d1;\n                        dxValues[dxOffset] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n        const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n        const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                // Frames of depth\n                for (let xF = 0; xF < inDepth; ++xF) {\n                    const xFCorner = xF - frontPad;\n                    const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                    const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                    // Rows as per standard 2d matrix notation\n                    for (let xR = 0; xR < inHeight; ++xR) {\n                        const xRCorner = xR - topPad;\n                        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                        // Columns as per standard 2d matrix notation\n                        for (let xC = 0; xC < inWidth; ++xC) {\n                            const xCCorner = xC - leftPad;\n                            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                            let dotProd = 0;\n                            for (let yF = xFMin; yF < yFMax; ++yF) {\n                                const wF = yF * strideDepth - xFCorner;\n                                for (let yR = xRMin; yR < yRMax; ++yR) {\n                                    const wR = yR * strideHeight - xRCorner;\n                                    for (let yC = xCMin; yC < yCMax; ++yC) {\n                                        const wC = yC * strideWidth - xCCorner;\n                                        const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                        const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                            fltS1 * (filterHeight - 1 - wR) +\n                                            fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                        for (let d2 = 0; d2 < outChannels; ++d2) {\n                                            const pixel = dyValues[dyOffset + d2];\n                                            const weight = fltValues[fltOffset + d2];\n                                            dotProd += pixel * weight;\n                                        }\n                                    }\n                                }\n                            }\n                            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                                dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'conv2dDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        // Need to convolve.\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            for (let yR = yRMin; yR < yRMax; ++yR) {\n                                const xR = wR + yR * strideHeight - topPad;\n                                for (let yC = yCMin; yC < yCMax; ++yC) {\n                                    const xC = wC + yC * strideWidth - leftPad;\n                                    if (isChannelsLast) {\n                                        dotProd +=\n                                            xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                                    }\n                                    else {\n                                        dotProd +=\n                                            xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                                    }\n                                }\n                            }\n                        }\n                        dW.set(dotProd, wR, wC, d1, d2);\n                    }\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dw = tf.buffer(convInfo.filterShape, 'float32');\n        const dwValues = dw.values;\n        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const xValues = this.readSync(x.dataId);\n        const [xS0, xS1, xS2, xS3] = x.strides;\n        const frontPad = convInfo.padInfo.front;\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        for (let wF = 0; wF < filterDepth; ++wF) {\n            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n            const wOffset1 = wF * dwS0;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n                const wOffset2 = wR * dwS1 + wOffset1;\n                for (let wC = 0; wC < filterWidth; ++wC) {\n                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                    const wOffset3 = wC * dwS2 + wOffset2;\n                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                        const wOffset4 = d1 * dwS3 + wOffset3;\n                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                            let dotProd = 0;\n                            for (let b = 0; b < convInfo.batchSize; ++b) {\n                                const xOffset1 = b * xS0;\n                                const yOffset1 = b * dyS0;\n                                for (let yF = yFMin; yF < yFMax; ++yF) {\n                                    const xF = wF + yF * strideDepth - frontPad;\n                                    const xOffset2 = xF * xS1 + xOffset1;\n                                    const yOffset2 = yF * dyS1 + yOffset1;\n                                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                                        const xR = wR + yR * strideHeight - topPad;\n                                        const xOffset3 = xR * xS2 + xOffset2;\n                                        const yOffset3 = yR * dyS2 + yOffset2;\n                                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                                            const xC = wC + yC * strideWidth - leftPad;\n                                            const xOffset4 = xC * xS3 + xOffset3;\n                                            const yOffset4 = yC * dyS3 + yOffset3;\n                                            dotProd +=\n                                                xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                        }\n                                    }\n                                }\n                            }\n                            dwValues[wOffset4 + d2] = dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dw.toTensor();\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias) {\n            // TODO(lina128): Use add directly once fusedDepthwiseConv2D is\n            // modularized.\n            result = tf.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'depthwiseConv2D');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * y.strides[1];\n                const xRCorner = yR * convInfo.strideHeight - padLeft;\n                for (let wR = 0; wR < filterHeight; ++wR) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * x.strides[1];\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * y.strides[2];\n                        const xCCorner = yC * convInfo.strideWidth - padTop;\n                        for (let wC = 0; wC < filterWidth; ++wC) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                            let yOffset4 = yOffset3;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1];\n                                for (let q = 0; q < chMul; ++q) {\n                                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                                }\n                                yOffset4 += chMul;\n                                wOffset3 += chMul;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const chMul = outChannels / inChannels;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let dm = 0; dm < chMul; ++dm) {\n                                    const d2 = d1 * chMul + dm;\n                                    const pixel = dyValues[dyOffset + d2];\n                                    const weight = fltValues[fltOffset + dm];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    const d1 = Math.trunc(d2 / chMul);\n                    const dm = d2 % chMul;\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, dm);\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    tile(x, reps) {\n        assertNotComplex(x, 'tile');\n        return tile(this.bufferSync(x), reps);\n    }\n    gather(x, indices, axis) {\n        assertNotComplex([x, indices], 'gather');\n        const newShape = x.shape.slice();\n        const indicesValues = this.readSync(indices.dataId);\n        newShape[axis] = indicesValues.length;\n        const result = tf.buffer(newShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < result.size; ++i) {\n            const newLoc = result.indexToLoc(i);\n            const originalLoc = newLoc.slice();\n            originalLoc[axis] = indicesValues[newLoc[axis]];\n            const originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        assertNotComplex([x], 'batchToSpaceND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return tf.transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    pool3d(x, convInfo, poolType) {\n        assertNotComplex(x, 'pool3d');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n            Number.POSITIVE_INFINITY);\n        const xValues = this.readSync(x.dataId);\n        const output = tf.buffer(convInfo.outShape, x.dtype);\n        const outputVals = output.values;\n        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n            convInfo.outShape[3] * convInfo.outShape[4];\n        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n        const outputColStrides = convInfo.outShape[4];\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            const outputBatchOffset = batch * outputBatchStrides;\n            const inputBatchOffset = batch * x.strides[0];\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                            let minMaxValue = initialValue;\n                            let avgValue = 0;\n                            let count = 0;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const xColOffset = xRowOffset + xCol * x.strides[3];\n                                        const pixel = xValues[xColOffset + channel];\n                                        if ((poolType === 'max' && pixel > minMaxValue)) {\n                                            minMaxValue = pixel;\n                                        }\n                                        else if (poolType === 'avg') {\n                                            avgValue += pixel;\n                                            count++;\n                                        }\n                                        if (isNaN(minMaxValue)) {\n                                            break;\n                                        }\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            const outputOffset = outputColOffset + channel;\n                            outputVals[outputOffset] =\n                                poolType === 'avg' ? avgValue / count : minMaxValue;\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    avgPool3d(x, convInfo) {\n        assertNotComplex(x, 'avgPool3d');\n        return this.pool3d(x, convInfo, 'avg').toFloat();\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPool3dBackprop');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins.\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    maxPool3d(x, convInfo) {\n        assertNotComplex(x, 'maxPool3d');\n        return this.pool3d(x, convInfo, 'max').toFloat();\n    }\n    maxPool3dPositions(x, convInfo) {\n        const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const xBuf = this.bufferSync(x);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            let maxValue = Number.NEGATIVE_INFINITY;\n                            let maxPosition = -1;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const wDepth = xDepth - xDepthCorner;\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const wRow = xRow - xRowCorner;\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const wCol = xCol - xColCorner;\n                                        const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                        if (pixel >= maxValue) {\n                                            maxValue = pixel;\n                                            maxPosition = wDepth * effectiveFilterHeight *\n                                                effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                        }\n                                    }\n                                }\n                            }\n                            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return maxPositions.toTensor();\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPool3dBackprop');\n        const maxPositions = this.maxPool3dPositions(x, convInfo);\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const maxPosBuf = this.bufferSync(maxPositions);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const maxPos = effectiveFilterDepth *\n                                            effectiveFilterHeight * effectiveFilterWidth -\n                                            1 -\n                                            maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                            wRow * effectiveFilterWidth + wCol;\n                                        const mask = maxPos === curPos ? 1 : 0;\n                                        if (mask === 0) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel * mask;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeBilinear');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let outputIdx = 0;\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        for (let b = 0; b < batch; b++) {\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceRowFloor = Math.floor(sourceFracRow);\n                const rowFrac = sourceFracRow - sourceRowFloor;\n                const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n                const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n                const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceColFloor = Math.floor(sourceFracCol);\n                    const colFrac = sourceFracCol - sourceColFloor;\n                    const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                    const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n                    const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n                    const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n                    const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const topLeft = xValues[topLeftOffest + d];\n                        const bottomLeft = xValues[botLeftOffset + d];\n                        const topRight = xValues[topRightOffset + d];\n                        const bottomRight = xValues[botRightOffest + d];\n                        const top = topLeft + (topRight - topLeft) * colFrac;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                        const newValue = top + (bottom - top) * rowFrac;\n                        result[outputIdx++] = newValue;\n                    }\n                }\n            }\n        }\n        return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeBilinearBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass and add the\n        // corresponding coefficient from dy to the gradient (with some\n        // interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n        const dyValues = this.readSync(dy.dataId);\n        let offset = 0;\n        for (let b = 0; b < batch; b++) {\n            const bOffset = b * x.strides[0];\n            for (let r = 0; r < yHeight; r++) {\n                const dxR = r * heightScale;\n                const topDxRIndex = Math.floor(dxR);\n                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n                const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n                const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n                const dxRLerp = dxR - topDxRIndex;\n                const inverseDxRLerp = 1.0 - dxRLerp;\n                for (let c = 0; c < yWidth; c++) {\n                    const dxC = c * widthScale;\n                    const leftDxCIndex = Math.floor(dxC);\n                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                    const dxCLerp = dxC - leftDxCIndex;\n                    const inverseDxCLerp = 1.0 - dxCLerp;\n                    const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n                    const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];\n                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];\n                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                    for (let d = 0; d < depth; d++) {\n                        const dyVal = dyValues[offset++];\n                        output[topLeftRCOffset + d] +=\n                            dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                        output[bottomLeftRCOffset + d] +=\n                            dyVal * dxRLerpTimesInverseDxCLerp;\n                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeNearestNeighbor');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        let outputOffset = 0;\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                    Math.floor(sourceFracRow));\n                const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                        Math.floor(sourceFracCol));\n                    const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const newVal = xValues[colOffset + d];\n                        output[outputOffset++] = newVal;\n                    }\n                }\n            }\n        }\n        return tf.tensor(output, [batch, newHeight, newWidth, numChannels], x.dtype);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        const dyValues = this.readSync(dy.dataId);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        // Loop over the output space.\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < xHeight; r++) {\n                const rowOffset = batchOffset + r * x.strides[1];\n                // Compute bounds for where in dy we will look\n                const startRLerp = Math.floor(r * invHeightScale);\n                const startDyR = Math.floor(startRLerp - (winHeight / 2));\n                for (let c = 0; c < xWidth; c++) {\n                    const colOffset = rowOffset + c * x.strides[2];\n                    // Compute bounds for where in dy we will look\n                    const startCLerp = Math.floor(c * invWidthScale);\n                    const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                    for (let d = 0; d < depth; d++) {\n                        let accum = 0;\n                        // loop over dy\n                        for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                            const dyR = dyRIndex + startDyR;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyR < 0 || dyR >= yHeight) {\n                                continue;\n                            }\n                            const dyROffset = batchOffset + dyR * dy.strides[1];\n                            const sourceFracRow = dyR * heightScale;\n                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                                Math.floor(sourceFracRow));\n                            if (r !== sourceNearestRow) {\n                                continue;\n                            }\n                            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                                const dyC = dyCIndex + startDyC;\n                                // Guard against the window exceeding the bounds of dy\n                                if (dyC < 0 || dyC >= yWidth) {\n                                    continue;\n                                }\n                                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                                const sourceFracCol = dyC * widthScale;\n                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                    Math.floor(sourceFracCol));\n                                if (c === sourceNearestCol) {\n                                    accum += dyValues[dyCOffset + d];\n                                }\n                            }\n                        }\n                        output[colOffset + d] = accum;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, x.shape, x.dtype);\n    }\n    localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {\n        assertNotComplex(x, 'localResponseNormalization4D');\n        const channels = x.shape[3];\n        const maxD = channels - 1;\n        const xValues = this.readSync(x.dataId);\n        const size = x.size;\n        const result = new Float32Array(size);\n        function sumAcrossChannels(offset) {\n            const currentChannel = offset % channels;\n            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n            const endSumOffset = offset - currentChannel +\n                Math.min(currentChannel + depthRadius, maxD);\n            let sum = 0.0;\n            for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n                const z = xValues[beginSumOffset];\n                sum += z * z;\n            }\n            return sum;\n        }\n        for (let offset = 0; offset < size; offset++) {\n            const sum = sumAcrossChannels(offset);\n            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n            result[offset] = val;\n        }\n        return tf.tensor4d(result, x.shape);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        assertNotComplex(dy, 'LRNGrad');\n        const channels = dy.shape[3];\n        const dyValues = this.readSync(dy.dataId);\n        const inputImageValues = this.readSync(inputImage.dataId);\n        const outputImageValues = this.readSync(outputImage.dataId);\n        const result = new Float32Array(dy.size);\n        const size = dy.size;\n        for (let offset = 0; offset < size; offset++) {\n            const currentChannel = offset % channels;\n            const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n            const depthEnd = (offset - currentChannel) +\n                Math.min(channels, currentChannel + depthRadius + 1);\n            let norm = 0;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                norm += Math.pow(inputImageValues[k], 2);\n            }\n            norm = alpha * norm + bias;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                let dyi = -2 * alpha * beta * inputImageValues[k] *\n                    outputImageValues[offset] / norm;\n                if (offset === k) {\n                    dyi += Math.pow(norm, -beta);\n                }\n                dyi *= dyValues[offset];\n                result[k] += dyi;\n            }\n        }\n        return tf.tensor4d(result, dy.shape);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        assertNotComplex(logits, 'multinomial');\n        const probabilities = normalized ? logits : tf.softmax(logits);\n        const batchSize = probabilities.shape[0];\n        const numEvents = probabilities.shape[1];\n        const res = tf.zeros([batchSize, numSamples], 'int32');\n        const resVals = this.readSync(res.dataId);\n        const probVals = this.readSync(probabilities.dataId);\n        for (let b = 0; b < batchSize; ++b) {\n            const offset = b * numEvents;\n            // The cdf won't include the last event. It will be implicit if no other\n            // event happened.\n            const cdf = new Float32Array(numEvents - 1);\n            cdf[0] = probVals[offset];\n            for (let event = 1; event < cdf.length; ++event) {\n                cdf[event] = cdf[event - 1] + probVals[offset + event];\n            }\n            const random = seedrandom.alea(seed.toString());\n            const outOffset = b * numSamples;\n            for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n                const r = random();\n                // Assume last event happened by default.\n                resVals[outOffset + sampleId] = cdf.length;\n                for (let event = 0; event < cdf.length; event++) {\n                    if (r < cdf[event]) {\n                        resVals[outOffset + sampleId] = event;\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        assertNotComplex(indices, 'oneHot');\n        const res = new Float32Array(indices.size * depth);\n        res.fill(offValue);\n        const indicesVal = this.readSync(indices.dataId);\n        for (let event = 0; event < indices.size; ++event) {\n            if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n                res[event * depth + indicesVal[event]] = onValue;\n            }\n        }\n        return tf.tensor2d(res, [indices.size, depth], 'int32');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        assertNotComplex(boxes, 'nonMaxSuppression');\n        const boxesVals = this.readSync(boxes.dataId);\n        const scoresVals = this.readSync(scores.dataId);\n        return nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = x.shape[1];\n        const inputWidth = x.shape[2];\n        const inputDepth = x.shape[3];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n        let outputIdx = 0;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let h = 0; h < outputHeight; ++h) {\n                const inH = Math.floor(h / blockSize);\n                const offsetH = (h % blockSize);\n                for (let w = 0; w < outputWidth; ++w) {\n                    const inW = Math.floor(w / blockSize);\n                    const offsetW = (w % blockSize);\n                    const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                    for (let d = 0; d < outputDepth; ++d) {\n                        const inD = d + offsetD;\n                        const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                        result[outputIdx++] = xValues[inputIdx];\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(result, [batchSize, outputHeight, outputWidth, outputDepth]);\n    }\n    broadcastedBinaryOp(a, b, dtype, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const result = tf.buffer(newShape, dtype);\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const resVals = result.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resVals.length; ++i) {\n                resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            const aBuf = this.bufferSync(a);\n            const bBuf = this.bufferSync(b);\n            for (let i = 0; i < resVals.length; ++i) {\n                const loc = result.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bBuf.locToIndex(bLoc);\n                resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return result.toTensor();\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n    cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n        const numBoxes = boxes.shape[0];\n        const [cropHeight, cropWidth] = cropSize;\n        const output = tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n        const boxVals = this.readSync(boxes.dataId);\n        const boxIndVals = this.readSync(boxIndex.dataId);\n        const imageVals = this.readSync(images.dataId);\n        const inStride = images.strides; // to calculate flat indexes into image\n        const outStride = output.strides; // to calculate flat indexes into output\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n        for (let b = 0; b < numBoxes; b++) {\n            const startInd = b * 4;\n            const y1 = boxVals[startInd];\n            const x1 = boxVals[startInd + 1];\n            const y2 = boxVals[startInd + 2];\n            const x2 = boxVals[startInd + 3];\n            const bInd = boxIndVals[b];\n            if (bInd >= batch) {\n                continue;\n            }\n            const heightScale = (cropHeight > 1) ?\n                (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n                0;\n            const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n            for (let y = 0; y < cropHeight; y++) {\n                const yInd = (cropHeight > 1) ?\n                    y1 * (imageHeight - 1) + y * (heightScale) :\n                    0.5 * (y1 + y2) * (imageHeight - 1);\n                if (yInd < 0 || yInd > imageHeight - 1) {\n                    for (let x = 0; x < cropWidth; x++) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                    }\n                    continue;\n                }\n                if (method === 'bilinear') {\n                    const topInd = Math.floor(yInd);\n                    const bottomInd = Math.ceil(yInd);\n                    const yLerp = yInd - topInd;\n                    for (let x = 0; x < cropWidth; x++) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const leftInd = Math.floor(xInd);\n                        const rightInd = Math.ceil(xInd);\n                        const xLerp = xInd - leftInd;\n                        for (let c = 0; c < numChannels; c++) {\n                            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topRight = imageVals[ind];\n                            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomRight = imageVals[ind];\n                            const top = topLeft + (topRight - topLeft) * xLerp;\n                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = top + ((bottom - top) * yLerp);\n                        }\n                    }\n                }\n                else { // method == \"nearest\"\n                    for (let x = 0; x < cropWidth; ++x) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const closestX = Math.round(xInd);\n                        const closestY = Math.round(yInd);\n                        for (let c = 0; c < numChannels; c++) {\n                            const inInd = c + closestX * inStride[2] +\n                                closestY * inStride[1] + bInd * inStride[0];\n                            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[outInd] = imageVals[inInd];\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        if (numSlices === 0) {\n            return tf.tensor([], resultShape, x.dtype);\n        }\n        const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n        const indicesData = this.readSync(indices.dataId);\n        const xData = this.readSync(x.dataId);\n        for (let i = 0; i < numSlices; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                flattenIndex += dim * strides[j];\n                index.push(dim);\n            }\n            if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${x.shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n            }\n        }\n        return buffer.toTensor().reshape(resultShape);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const defaultValue = tf.scalar(0);\n        const sumDupeIndices = true;\n        return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return engine().makeTensor(values, shape, dtype, this);\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported for string tensors');\n        }\n        else {\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        const values = util.getArrayFromDType(x.dtype, util.sizeFromShape(x.shape));\n        return this.makeOutput(values, x.shape, x.dtype);\n    }\n    linspace(start, stop, num) {\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const indicesData = this.readSync(indices.dataId);\n        const updatesData = this.readSync(updates.dataId);\n        if (outputSize === 0) {\n            return tf.tensor([], shape, updates.dtype);\n        }\n        const buffer = new TensorBuffer(flattenShape, updates.dtype);\n        buffer.values.fill(this.readSync(defaultValue.dataId)[0]);\n        for (let i = 0; i < numUpdates; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                index.push(dim);\n                flattenIndex += dim * strides[j];\n            }\n            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                if (sumDupeIndices) {\n                    buffer.values[flattenIndex * sliceSize + k] +=\n                        updatesData[i * sliceSize + k];\n                }\n                else {\n                    buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                        updatesData[0] :\n                        updatesData[i * sliceSize + k];\n                }\n            }\n        }\n        return buffer.toTensor().reshape(shape);\n    }\n}\n//# sourceMappingURL=backend_cpu.js.map"]},"metadata":{},"sourceType":"module"}