{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from \"../kernel_utils/reduce\";\nimport { prodImplCPU } from \"../kernel_utils/shared\";\nimport { reshape } from \"./Reshape\";\nimport { transpose } from \"./Transpose\";\nexport function prod(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  var xRank = x.shape.length;\n  var toDispose = [];\n  var origAxes = util.parseAxisParam(axis, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  var res;\n\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    var xVals = backend.texData.get(permutedX.dataId).values;\n\n    var _prodImplCPU = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes),\n        outVals = _prodImplCPU.outVals,\n        outShape = _prodImplCPU.outShape,\n        outDtype = _prodImplCPU.outDtype;\n\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(permutedX.shape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        _outShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var inSize = util.sizeFromShape(reduceShape);\n    var a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend: backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    var outputDType = sumOutType(x.dtype);\n    var reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend: backend,\n      attrs: {\n        shape: _outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    var newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend: backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return res;\n}\nexport var prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":{"version":3,"sources":["../../src/kernels/Prod.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,IAAhD,EAA6E,UAA7E,EAAiH,IAAjH,QAA4H,uBAA5H;AAGA,SAAQ,MAAR;AACA,SAAQ,WAAR;AAEA,SAAQ,OAAR;AACA,SAAQ,SAAR;AAEA,OAAM,SAAU,IAAV,CACF,IADE,EACqE;EAEzE,IAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;EAAA,IAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;EAAA,IAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;EACA,IAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;EACA,IAAO,IAAP,GAAyB,KAAzB,CAAO,IAAP;EAAA,IAAa,QAAb,GAAyB,KAAzB,CAAa,QAAb;EAEA,IAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;EACA,IAAM,SAAS,GAAG,EAAlB;EAEA,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAjB;EACA,IAAI,IAAI,GAAG,QAAX;EACA,IAAM,YAAY,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAArB;EACA,IAAI,SAAS,GAAG,CAAhB;;EACA,IAAI,YAAY,IAAI,IAApB,EAA0B;IACxB,SAAS,GAAG,SAAS,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAD;MAAD,CAAT;MAAc,OAAO,EAAP,OAAd;MAAuB,KAAK,EAAE;QAAC,IAAI,EAAE;MAAP;IAA9B,CAAD,CAArB;IACA,IAAI,GAAG,YAAY,CAAC,gBAAb,CAA8B,IAAI,CAAC,MAAnC,EAA2C,KAA3C,CAAP;IACA,SAAS,CAAC,IAAV,CAAe,SAAf;EACD;;EAED,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,IAAhD,EAAsD,KAAtD;EAEA,IAAI,GAAJ;;EACA,IAAI,OAAO,CAAC,kBAAR,CAA2B,CAAC,SAAD,CAA3B,CAAJ,EAA6C;IAC3C,IAAM,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,SAAS,CAAC,MAA9B,EAAsC,MAApD;;IACA,mBACI,WAAW,CAAC,SAAS,CAAC,KAAX,EAAkB,SAAS,CAAC,KAA5B,EAAmC,KAAnC,EAA0C,IAA1C,CADf;IAAA,IAAO,OAAP,gBAAO,OAAP;IAAA,IAAgB,QAAhB,gBAAgB,QAAhB;IAAA,IAA0B,QAA1B,gBAA0B,QAA1B;;IAEA,GAAG,GAAG,OAAO,CAAC,cAAR,CAAuB,QAAvB,EAAiC,QAAjC,EAA2C,OAA3C,CAAN;EACD,CALD,MAKO;IACL,4BACI,YAAY,CAAC,yBAAb,CAAuC,SAAS,CAAC,KAAjD,EAAwD,IAAxD,CADJ;IAAA;IAAA,IAAO,SAAP;IAAA,IAAiB,WAAjB;;IAEA,IAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAf;IACA,IAAM,GAAG,GAAG,OAAO,CACf;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAyB,OAAO,EAAP,OAAzB;MAAkC,KAAK,EAAE;QAAC,KAAK,EAAE,CAAC,CAAC,CAAF,EAAK,MAAL;MAAR;IAAzC,CADe,CAAnB;IAEA,IAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,KAAH,CAA9B;IACA,IAAM,OAAO,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,EAAmB,MAAnB,EAA2B,OAA3B,CAAtB;IACA,GAAG,GAAG,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAuB,OAAO,EAAP,OAAvB;MAAgC,KAAK,EAAE;QAAC,KAAK,EAAE;MAAR;IAAvC,CAAD,CAAb;IAEA,SAAS,CAAC,IAAV,CAAe,GAAf;IACA,SAAS,CAAC,IAAV,CAAe,OAAf;EACD;;EAED,IAAI,QAAJ,EAAc;IACZ,SAAS,CAAC,IAAV,CAAe,GAAf;IACA,IAAM,QAAQ,GAAG,YAAY,CAAC,oBAAb,CAAkC,GAAG,CAAC,KAAtC,EAA6C,QAA7C,CAAjB;IACA,GAAG,GAAG,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAmB,OAAO,EAAP,OAAnB;MAA4B,KAAK,EAAE;QAAC,KAAK,EAAE;MAAR;IAAnC,CAAD,CAAb;EACD;;EAED,SAAS,CAAC,OAAV,CAAkB,UAAA,CAAC;IAAA,OAAI,OAAO,CAAC,6BAAR,CAAsC,CAAtC,CAAJ;EAAA,CAAnB;EAEA,OAAO,GAAP;AACD;AAED,OAAO,IAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,OAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        toDispose.push(permutedX);\n    }\n    backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n    let res;\n    if (backend.shouldExecuteOnCPU([permutedX])) {\n        const xVals = backend.texData.get(permutedX.dataId).values;\n        const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n    }\n    else {\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n        const outputDType = sumOutType(x.dtype);\n        const reduced = reduce(a2D, outputDType, 'prod', backend);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        toDispose.push(a2D);\n        toDispose.push(reduced);\n    }\n    if (keepDims) {\n        toDispose.push(res);\n        const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n        res = reshape({ inputs: { x: res }, backend, attrs: { shape: newShape } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'webgl',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map"]},"metadata":{},"sourceType":"module"}