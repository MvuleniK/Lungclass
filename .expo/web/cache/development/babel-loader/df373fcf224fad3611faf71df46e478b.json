{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from \"../../engine\";\nimport { dispose } from \"../../globals\";\nimport { assert } from \"../../util\";\nimport { clone } from \"../clone\";\nimport { concat } from \"../concat\";\nimport { div } from \"../div\";\nimport { eye } from \"../eye\";\nimport { greater } from \"../greater\";\nimport { matMul } from \"../mat_mul\";\nimport { mul } from \"../mul\";\nimport { neg } from \"../neg\";\nimport { norm } from \"../norm\";\nimport { op } from \"../operation\";\nimport { reshape } from \"../reshape\";\nimport { slice } from \"../slice\";\nimport { stack } from \"../stack\";\nimport { sub } from \"../sub\";\nimport { tensor2d } from \"../tensor2d\";\nimport { transpose } from \"../transpose\";\nimport { unstack } from \"../unstack\";\nimport { where } from \"../where\";\n\nfunction qr_(x) {\n  var fullMatrices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  assert(x.rank >= 2, function () {\n    return \"qr() requires input tensor to have a rank >= 2, but got rank \" + x.rank;\n  });\n\n  if (x.rank === 2) {\n    return qr2d(x, fullMatrices);\n  } else {\n    var outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce(function (value, prev) {\n      return value * prev;\n    });\n    var x2ds = unstack(reshape(x, [outerDimsProd, x.shape[x.shape.length - 2], x.shape[x.shape.length - 1]]), 0);\n    var q2ds = [];\n    var r2ds = [];\n    x2ds.forEach(function (x2d) {\n      var _qr2d = qr2d(x2d, fullMatrices),\n          _qr2d2 = _slicedToArray(_qr2d, 2),\n          q2d = _qr2d2[0],\n          r2d = _qr2d2[1];\n\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    var q = reshape(stack(q2ds, 0), x.shape);\n    var r = reshape(stack(r2ds, 0), x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x) {\n  var fullMatrices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return ENGINE.tidy(function () {\n    assert(x.shape.length === 2, function () {\n      return \"qr2d() requires a 2D Tensor, but got a \" + x.shape.length + \"D Tensor.\";\n    });\n    var m = x.shape[0];\n    var n = x.shape[1];\n    var q = eye(m);\n    var r = clone(x);\n    var one2D = tensor2d([[1]], [1, 1]);\n    var w = clone(one2D);\n    var iters = m >= n ? n : m;\n\n    var _loop = function _loop(j) {\n      var rTemp = r;\n      var wTemp = w;\n      var qTemp = q;\n\n      var _ENGINE$tidy = ENGINE.tidy(function () {\n        var rjEnd1 = slice(r, [j, j], [m - j, 1]);\n        var normX = norm(rjEnd1);\n        var rjj = slice(r, [j, j], [1, 1]);\n        var s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n        var u1 = sub(rjj, mul(s, normX));\n        var wPre = div(rjEnd1, u1);\n\n        if (wPre.shape[0] === 1) {\n          w = clone(one2D);\n        } else {\n          w = concat([one2D, slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])], 0);\n        }\n\n        var tau = neg(div(matMul(s, u1), normX));\n        var rjEndAll = slice(r, [j, 0], [m - j, n]);\n        var tauTimesW = mul(tau, w);\n        var wT = transpose(w);\n\n        if (j === 0) {\n          r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n        } else {\n          var rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n          r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n        }\n\n        var tawTimesWT = transpose(tauTimesW);\n        var qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n\n        if (j === 0) {\n          q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n        } else {\n          var qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n          q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n        }\n\n        return [w, r, q];\n      });\n\n      var _ENGINE$tidy2 = _slicedToArray(_ENGINE$tidy, 3);\n\n      w = _ENGINE$tidy2[0];\n      r = _ENGINE$tidy2[1];\n      q = _ENGINE$tidy2[2];\n      dispose([rTemp, wTemp, qTemp]);\n    };\n\n    for (var j = 0; j < iters; ++j) {\n      _loop(j);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = slice(q, [0, 0], [m, n]);\n      r = slice(r, [0, 0], [n, n]);\n    }\n\n    return [q, r];\n  });\n}\n\nexport var qr = op({\n  qr_: qr_\n});","map":{"version":3,"sources":["../../../src/ops/linalg/qr.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x, fullMatrices = false) {\n    assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n    if (x.rank === 2) {\n        return qr2d(x, fullMatrices);\n    }\n    else {\n        // Rank > 2.\n        // TODO(cais): Below we split the input into individual 2D tensors,\n        //   perform QR decomposition on them and then stack the results back\n        //   together. We should explore whether this can be parallelized.\n        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n            .reduce((value, prev) => value * prev);\n        const x2ds = unstack(reshape(x, [\n            outerDimsProd, x.shape[x.shape.length - 2],\n            x.shape[x.shape.length - 1]\n        ]), 0);\n        const q2ds = [];\n        const r2ds = [];\n        x2ds.forEach(x2d => {\n            const [q2d, r2d] = qr2d(x2d, fullMatrices);\n            q2ds.push(q2d);\n            r2ds.push(r2d);\n        });\n        const q = reshape(stack(q2ds, 0), x.shape);\n        const r = reshape(stack(r2ds, 0), x.shape);\n        return [q, r];\n    }\n}\nfunction qr2d(x, fullMatrices = false) {\n    return ENGINE.tidy(() => {\n        assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n        const m = x.shape[0];\n        const n = x.shape[1];\n        let q = eye(m); // Orthogonal transform so far.\n        let r = clone(x); // Transformed matrix so far.\n        const one2D = tensor2d([[1]], [1, 1]);\n        let w = clone(one2D);\n        const iters = m >= n ? n : m;\n        for (let j = 0; j < iters; ++j) {\n            // This tidy within the for-loop ensures we clean up temporary\n            // tensors as soon as they are no longer needed.\n            const rTemp = r;\n            const wTemp = w;\n            const qTemp = q;\n            [w, r, q] = ENGINE.tidy(() => {\n                // Find H = I - tau * w * w', to put zeros below R(j, j).\n                const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n                const normX = norm(rjEnd1);\n                const rjj = slice(r, [j, j], [1, 1]);\n                // The sign() function returns 0 on 0, which causes division by zero.\n                const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n                const u1 = sub(rjj, mul(s, normX));\n                const wPre = div(rjEnd1, u1);\n                if (wPre.shape[0] === 1) {\n                    w = clone(one2D);\n                }\n                else {\n                    w = concat([\n                        one2D,\n                        slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n                    ], 0);\n                }\n                const tau = neg(div(matMul(s, u1), normX));\n                // -- R := HR, Q := QH.\n                const rjEndAll = slice(r, [j, 0], [m - j, n]);\n                const tauTimesW = mul(tau, w);\n                const wT = transpose(w);\n                if (j === 0) {\n                    r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                }\n                else {\n                    const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                    r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n                }\n                const tawTimesWT = transpose(tauTimesW);\n                const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n                if (j === 0) {\n                    q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                }\n                else {\n                    const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                    q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n                }\n                return [w, r, q];\n            });\n            dispose([rTemp, wTemp, qTemp]);\n        }\n        if (!fullMatrices && m > n) {\n            q = slice(q, [0, 0], [m, n]);\n            r = slice(r, [0, 0], [n, n]);\n        }\n        return [q, r];\n    });\n}\nexport const qr = op({ qr_ });\n//# sourceMappingURL=qr.js.map"]},"metadata":{},"sourceType":"module"}